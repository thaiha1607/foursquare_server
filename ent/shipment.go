// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/invoice"
	"github.com/thaiha1607/foursquare_server/ent/order"
	"github.com/thaiha1607/foursquare_server/ent/person"
	"github.com/thaiha1607/foursquare_server/ent/shipment"
	"github.com/thaiha1607/foursquare_server/ent/shipmentstatuscode"
)

// Shipment is the model entity for the Shipment schema.
type Shipment struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID uuid.UUID `json:"invoice_id,omitempty"`
	// StaffID holds the value of the "staff_id" field.
	StaffID uuid.UUID `json:"staff_id,omitempty"`
	// ShipmentDate holds the value of the "shipment_date" field.
	ShipmentDate time.Time `json:"shipment_date,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// StatusCode holds the value of the "status_code" field.
	StatusCode int `json:"status_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentQuery when eager-loading is set.
	Edges        ShipmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ShipmentEdges holds the relations/edges for other nodes in the graph.
type ShipmentEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// Invoice holds the value of the invoice edge.
	Invoice *Invoice `json:"invoice,omitempty"`
	// Staff holds the value of the staff edge.
	Staff *Person `json:"staff,omitempty"`
	// ShipmentStatus holds the value of the shipment_status edge.
	ShipmentStatus *ShipmentStatusCode `json:"shipment_status,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// InvoiceOrErr returns the Invoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) InvoiceOrErr() (*Invoice, error) {
	if e.Invoice != nil {
		return e.Invoice, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: invoice.Label}
	}
	return nil, &NotLoadedError{edge: "invoice"}
}

// StaffOrErr returns the Staff value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) StaffOrErr() (*Person, error) {
	if e.Staff != nil {
		return e.Staff, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: person.Label}
	}
	return nil, &NotLoadedError{edge: "staff"}
}

// ShipmentStatusOrErr returns the ShipmentStatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) ShipmentStatusOrErr() (*ShipmentStatusCode, error) {
	if e.ShipmentStatus != nil {
		return e.ShipmentStatus, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: shipmentstatuscode.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_status"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shipment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipment.FieldStatusCode:
			values[i] = new(sql.NullInt64)
		case shipment.FieldID, shipment.FieldNote:
			values[i] = new(sql.NullString)
		case shipment.FieldCreatedAt, shipment.FieldUpdatedAt, shipment.FieldShipmentDate:
			values[i] = new(sql.NullTime)
		case shipment.FieldOrderID, shipment.FieldInvoiceID, shipment.FieldStaffID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shipment fields.
func (s *Shipment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipment.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case shipment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case shipment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case shipment.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				s.OrderID = *value
			}
		case shipment.FieldInvoiceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value != nil {
				s.InvoiceID = *value
			}
		case shipment.FieldStaffID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field staff_id", values[i])
			} else if value != nil {
				s.StaffID = *value
			}
		case shipment.FieldShipmentDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_date", values[i])
			} else if value.Valid {
				s.ShipmentDate = value.Time
			}
		case shipment.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				s.Note = value.String
			}
		case shipment.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				s.StatusCode = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Shipment.
// This includes values selected through modifiers, order, etc.
func (s *Shipment) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the Shipment entity.
func (s *Shipment) QueryOrder() *OrderQuery {
	return NewShipmentClient(s.config).QueryOrder(s)
}

// QueryInvoice queries the "invoice" edge of the Shipment entity.
func (s *Shipment) QueryInvoice() *InvoiceQuery {
	return NewShipmentClient(s.config).QueryInvoice(s)
}

// QueryStaff queries the "staff" edge of the Shipment entity.
func (s *Shipment) QueryStaff() *PersonQuery {
	return NewShipmentClient(s.config).QueryStaff(s)
}

// QueryShipmentStatus queries the "shipment_status" edge of the Shipment entity.
func (s *Shipment) QueryShipmentStatus() *ShipmentStatusCodeQuery {
	return NewShipmentClient(s.config).QueryShipmentStatus(s)
}

// Update returns a builder for updating this Shipment.
// Note that you need to call Shipment.Unwrap() before calling this method if this Shipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shipment) Update() *ShipmentUpdateOne {
	return NewShipmentClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Shipment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shipment) Unwrap() *Shipment {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shipment is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shipment) String() string {
	var builder strings.Builder
	builder.WriteString("Shipment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", s.OrderID))
	builder.WriteString(", ")
	builder.WriteString("invoice_id=")
	builder.WriteString(fmt.Sprintf("%v", s.InvoiceID))
	builder.WriteString(", ")
	builder.WriteString("staff_id=")
	builder.WriteString(fmt.Sprintf("%v", s.StaffID))
	builder.WriteString(", ")
	builder.WriteString("shipment_date=")
	builder.WriteString(s.ShipmentDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(s.Note)
	builder.WriteString(", ")
	builder.WriteString("status_code=")
	builder.WriteString(fmt.Sprintf("%v", s.StatusCode))
	builder.WriteByte(')')
	return builder.String()
}

// Shipments is a parsable slice of Shipment.
type Shipments []*Shipment
