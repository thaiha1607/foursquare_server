// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/invoicetype"
)

// InvoiceTypeCreate is the builder for creating a InvoiceType entity.
type InvoiceTypeCreate struct {
	config
	mutation *InvoiceTypeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (itc *InvoiceTypeCreate) SetCreatedAt(t time.Time) *InvoiceTypeCreate {
	itc.mutation.SetCreatedAt(t)
	return itc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (itc *InvoiceTypeCreate) SetNillableCreatedAt(t *time.Time) *InvoiceTypeCreate {
	if t != nil {
		itc.SetCreatedAt(*t)
	}
	return itc
}

// SetUpdatedAt sets the "updated_at" field.
func (itc *InvoiceTypeCreate) SetUpdatedAt(t time.Time) *InvoiceTypeCreate {
	itc.mutation.SetUpdatedAt(t)
	return itc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (itc *InvoiceTypeCreate) SetNillableUpdatedAt(t *time.Time) *InvoiceTypeCreate {
	if t != nil {
		itc.SetUpdatedAt(*t)
	}
	return itc
}

// SetInvoiceType sets the "invoice_type" field.
func (itc *InvoiceTypeCreate) SetInvoiceType(s string) *InvoiceTypeCreate {
	itc.mutation.SetInvoiceType(s)
	return itc
}

// Mutation returns the InvoiceTypeMutation object of the builder.
func (itc *InvoiceTypeCreate) Mutation() *InvoiceTypeMutation {
	return itc.mutation
}

// Save creates the InvoiceType in the database.
func (itc *InvoiceTypeCreate) Save(ctx context.Context) (*InvoiceType, error) {
	itc.defaults()
	return withHooks(ctx, itc.sqlSave, itc.mutation, itc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (itc *InvoiceTypeCreate) SaveX(ctx context.Context) *InvoiceType {
	v, err := itc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itc *InvoiceTypeCreate) Exec(ctx context.Context) error {
	_, err := itc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itc *InvoiceTypeCreate) ExecX(ctx context.Context) {
	if err := itc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (itc *InvoiceTypeCreate) defaults() {
	if _, ok := itc.mutation.CreatedAt(); !ok {
		v := invoicetype.DefaultCreatedAt()
		itc.mutation.SetCreatedAt(v)
	}
	if _, ok := itc.mutation.UpdatedAt(); !ok {
		v := invoicetype.DefaultUpdatedAt()
		itc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itc *InvoiceTypeCreate) check() error {
	if _, ok := itc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InvoiceType.created_at"`)}
	}
	if _, ok := itc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "InvoiceType.updated_at"`)}
	}
	if _, ok := itc.mutation.InvoiceType(); !ok {
		return &ValidationError{Name: "invoice_type", err: errors.New(`ent: missing required field "InvoiceType.invoice_type"`)}
	}
	if v, ok := itc.mutation.InvoiceType(); ok {
		if err := invoicetype.InvoiceTypeValidator(v); err != nil {
			return &ValidationError{Name: "invoice_type", err: fmt.Errorf(`ent: validator failed for field "InvoiceType.invoice_type": %w`, err)}
		}
	}
	return nil
}

func (itc *InvoiceTypeCreate) sqlSave(ctx context.Context) (*InvoiceType, error) {
	if err := itc.check(); err != nil {
		return nil, err
	}
	_node, _spec := itc.createSpec()
	if err := sqlgraph.CreateNode(ctx, itc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	itc.mutation.id = &_node.ID
	itc.mutation.done = true
	return _node, nil
}

func (itc *InvoiceTypeCreate) createSpec() (*InvoiceType, *sqlgraph.CreateSpec) {
	var (
		_node = &InvoiceType{config: itc.config}
		_spec = sqlgraph.NewCreateSpec(invoicetype.Table, sqlgraph.NewFieldSpec(invoicetype.FieldID, field.TypeInt))
	)
	if value, ok := itc.mutation.CreatedAt(); ok {
		_spec.SetField(invoicetype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := itc.mutation.UpdatedAt(); ok {
		_spec.SetField(invoicetype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := itc.mutation.InvoiceType(); ok {
		_spec.SetField(invoicetype.FieldInvoiceType, field.TypeString, value)
		_node.InvoiceType = value
	}
	return _node, _spec
}

// InvoiceTypeCreateBulk is the builder for creating many InvoiceType entities in bulk.
type InvoiceTypeCreateBulk struct {
	config
	err      error
	builders []*InvoiceTypeCreate
}

// Save creates the InvoiceType entities in the database.
func (itcb *InvoiceTypeCreateBulk) Save(ctx context.Context) ([]*InvoiceType, error) {
	if itcb.err != nil {
		return nil, itcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(itcb.builders))
	nodes := make([]*InvoiceType, len(itcb.builders))
	mutators := make([]Mutator, len(itcb.builders))
	for i := range itcb.builders {
		func(i int, root context.Context) {
			builder := itcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvoiceTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, itcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, itcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, itcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (itcb *InvoiceTypeCreateBulk) SaveX(ctx context.Context) []*InvoiceType {
	v, err := itcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itcb *InvoiceTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := itcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itcb *InvoiceTypeCreateBulk) ExecX(ctx context.Context) {
	if err := itcb.Exec(ctx); err != nil {
		panic(err)
	}
}
