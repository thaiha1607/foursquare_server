// Code generated by ent, DO NOT EDIT.

package account

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUserID, v))
}

// LastReset applies equality check predicate on the "last_reset" field. It's identical to LastResetEQ.
func LastReset(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLastReset, v))
}

// LastEmailVerification applies equality check predicate on the "last_email_verification" field. It's identical to LastEmailVerificationEQ.
func LastEmailVerification(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLastEmailVerification, v))
}

// LastPhoneVerification applies equality check predicate on the "last_phone_verification" field. It's identical to LastPhoneVerificationEQ.
func LastPhoneVerification(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLastPhoneVerification, v))
}

// IsEmailVerified applies equality check predicate on the "is_email_verified" field. It's identical to IsEmailVerifiedEQ.
func IsEmailVerified(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldIsEmailVerified, v))
}

// IsPhoneVerified applies equality check predicate on the "is_phone_verified" field. It's identical to IsPhoneVerifiedEQ.
func IsPhoneVerified(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldIsPhoneVerified, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPasswordHash, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldUserID, vs...))
}

// LastResetEQ applies the EQ predicate on the "last_reset" field.
func LastResetEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLastReset, v))
}

// LastResetNEQ applies the NEQ predicate on the "last_reset" field.
func LastResetNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldLastReset, v))
}

// LastResetIn applies the In predicate on the "last_reset" field.
func LastResetIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldLastReset, vs...))
}

// LastResetNotIn applies the NotIn predicate on the "last_reset" field.
func LastResetNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldLastReset, vs...))
}

// LastResetGT applies the GT predicate on the "last_reset" field.
func LastResetGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldLastReset, v))
}

// LastResetGTE applies the GTE predicate on the "last_reset" field.
func LastResetGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldLastReset, v))
}

// LastResetLT applies the LT predicate on the "last_reset" field.
func LastResetLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldLastReset, v))
}

// LastResetLTE applies the LTE predicate on the "last_reset" field.
func LastResetLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldLastReset, v))
}

// LastResetIsNil applies the IsNil predicate on the "last_reset" field.
func LastResetIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldLastReset))
}

// LastResetNotNil applies the NotNil predicate on the "last_reset" field.
func LastResetNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldLastReset))
}

// LastEmailVerificationEQ applies the EQ predicate on the "last_email_verification" field.
func LastEmailVerificationEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLastEmailVerification, v))
}

// LastEmailVerificationNEQ applies the NEQ predicate on the "last_email_verification" field.
func LastEmailVerificationNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldLastEmailVerification, v))
}

// LastEmailVerificationIn applies the In predicate on the "last_email_verification" field.
func LastEmailVerificationIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldLastEmailVerification, vs...))
}

// LastEmailVerificationNotIn applies the NotIn predicate on the "last_email_verification" field.
func LastEmailVerificationNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldLastEmailVerification, vs...))
}

// LastEmailVerificationGT applies the GT predicate on the "last_email_verification" field.
func LastEmailVerificationGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldLastEmailVerification, v))
}

// LastEmailVerificationGTE applies the GTE predicate on the "last_email_verification" field.
func LastEmailVerificationGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldLastEmailVerification, v))
}

// LastEmailVerificationLT applies the LT predicate on the "last_email_verification" field.
func LastEmailVerificationLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldLastEmailVerification, v))
}

// LastEmailVerificationLTE applies the LTE predicate on the "last_email_verification" field.
func LastEmailVerificationLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldLastEmailVerification, v))
}

// LastEmailVerificationIsNil applies the IsNil predicate on the "last_email_verification" field.
func LastEmailVerificationIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldLastEmailVerification))
}

// LastEmailVerificationNotNil applies the NotNil predicate on the "last_email_verification" field.
func LastEmailVerificationNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldLastEmailVerification))
}

// LastPhoneVerificationEQ applies the EQ predicate on the "last_phone_verification" field.
func LastPhoneVerificationEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldLastPhoneVerification, v))
}

// LastPhoneVerificationNEQ applies the NEQ predicate on the "last_phone_verification" field.
func LastPhoneVerificationNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldLastPhoneVerification, v))
}

// LastPhoneVerificationIn applies the In predicate on the "last_phone_verification" field.
func LastPhoneVerificationIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldLastPhoneVerification, vs...))
}

// LastPhoneVerificationNotIn applies the NotIn predicate on the "last_phone_verification" field.
func LastPhoneVerificationNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldLastPhoneVerification, vs...))
}

// LastPhoneVerificationGT applies the GT predicate on the "last_phone_verification" field.
func LastPhoneVerificationGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldLastPhoneVerification, v))
}

// LastPhoneVerificationGTE applies the GTE predicate on the "last_phone_verification" field.
func LastPhoneVerificationGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldLastPhoneVerification, v))
}

// LastPhoneVerificationLT applies the LT predicate on the "last_phone_verification" field.
func LastPhoneVerificationLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldLastPhoneVerification, v))
}

// LastPhoneVerificationLTE applies the LTE predicate on the "last_phone_verification" field.
func LastPhoneVerificationLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldLastPhoneVerification, v))
}

// LastPhoneVerificationIsNil applies the IsNil predicate on the "last_phone_verification" field.
func LastPhoneVerificationIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldLastPhoneVerification))
}

// LastPhoneVerificationNotNil applies the NotNil predicate on the "last_phone_verification" field.
func LastPhoneVerificationNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldLastPhoneVerification))
}

// IsEmailVerifiedEQ applies the EQ predicate on the "is_email_verified" field.
func IsEmailVerifiedEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldIsEmailVerified, v))
}

// IsEmailVerifiedNEQ applies the NEQ predicate on the "is_email_verified" field.
func IsEmailVerifiedNEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldIsEmailVerified, v))
}

// IsPhoneVerifiedEQ applies the EQ predicate on the "is_phone_verified" field.
func IsPhoneVerifiedEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldIsPhoneVerified, v))
}

// IsPhoneVerifiedNEQ applies the NEQ predicate on the "is_phone_verified" field.
func IsPhoneVerifiedNEQ(v bool) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldIsPhoneVerified, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldRole, vs...))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldPasswordHash, v))
}

// PasswordHashContains applies the Contains predicate on the "password_hash" field.
func PasswordHashContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldPasswordHash, v))
}

// PasswordHashHasPrefix applies the HasPrefix predicate on the "password_hash" field.
func PasswordHashHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldPasswordHash, v))
}

// PasswordHashHasSuffix applies the HasSuffix predicate on the "password_hash" field.
func PasswordHashHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldPasswordHash, v))
}

// PasswordHashIsNil applies the IsNil predicate on the "password_hash" field.
func PasswordHashIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldPasswordHash))
}

// PasswordHashNotNil applies the NotNil predicate on the "password_hash" field.
func PasswordHashNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldPasswordHash))
}

// PasswordHashEqualFold applies the EqualFold predicate on the "password_hash" field.
func PasswordHashEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldPasswordHash, v))
}

// PasswordHashContainsFold applies the ContainsFold predicate on the "password_hash" field.
func PasswordHashContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldPasswordHash, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Account) predicate.Account {
	return predicate.Account(sql.NotPredicates(p))
}
