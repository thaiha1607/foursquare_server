// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/shipmentitem"
)

// ShipmentItemUpdate is the builder for updating ShipmentItem entities.
type ShipmentItemUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentItemMutation
}

// Where appends a list predicates to the ShipmentItemUpdate builder.
func (siu *ShipmentItemUpdate) Where(ps ...predicate.ShipmentItem) *ShipmentItemUpdate {
	siu.mutation.Where(ps...)
	return siu
}

// SetUpdatedAt sets the "updated_at" field.
func (siu *ShipmentItemUpdate) SetUpdatedAt(t time.Time) *ShipmentItemUpdate {
	siu.mutation.SetUpdatedAt(t)
	return siu
}

// Mutation returns the ShipmentItemMutation object of the builder.
func (siu *ShipmentItemUpdate) Mutation() *ShipmentItemMutation {
	return siu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *ShipmentItemUpdate) Save(ctx context.Context) (int, error) {
	siu.defaults()
	return withHooks(ctx, siu.sqlSave, siu.mutation, siu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siu *ShipmentItemUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *ShipmentItemUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *ShipmentItemUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siu *ShipmentItemUpdate) defaults() {
	if _, ok := siu.mutation.UpdatedAt(); !ok {
		v := shipmentitem.UpdateDefaultUpdatedAt()
		siu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siu *ShipmentItemUpdate) check() error {
	if _, ok := siu.mutation.ShipmentID(); siu.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentItem.shipment"`)
	}
	if _, ok := siu.mutation.OrderItemID(); siu.mutation.OrderItemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentItem.order_item"`)
	}
	return nil
}

func (siu *ShipmentItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := siu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentitem.Table, shipmentitem.Columns, sqlgraph.NewFieldSpec(shipmentitem.FieldID, field.TypeUUID))
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	siu.mutation.done = true
	return n, nil
}

// ShipmentItemUpdateOne is the builder for updating a single ShipmentItem entity.
type ShipmentItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentItemMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (siuo *ShipmentItemUpdateOne) SetUpdatedAt(t time.Time) *ShipmentItemUpdateOne {
	siuo.mutation.SetUpdatedAt(t)
	return siuo
}

// Mutation returns the ShipmentItemMutation object of the builder.
func (siuo *ShipmentItemUpdateOne) Mutation() *ShipmentItemMutation {
	return siuo.mutation
}

// Where appends a list predicates to the ShipmentItemUpdate builder.
func (siuo *ShipmentItemUpdateOne) Where(ps ...predicate.ShipmentItem) *ShipmentItemUpdateOne {
	siuo.mutation.Where(ps...)
	return siuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siuo *ShipmentItemUpdateOne) Select(field string, fields ...string) *ShipmentItemUpdateOne {
	siuo.fields = append([]string{field}, fields...)
	return siuo
}

// Save executes the query and returns the updated ShipmentItem entity.
func (siuo *ShipmentItemUpdateOne) Save(ctx context.Context) (*ShipmentItem, error) {
	siuo.defaults()
	return withHooks(ctx, siuo.sqlSave, siuo.mutation, siuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *ShipmentItemUpdateOne) SaveX(ctx context.Context) *ShipmentItem {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *ShipmentItemUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *ShipmentItemUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siuo *ShipmentItemUpdateOne) defaults() {
	if _, ok := siuo.mutation.UpdatedAt(); !ok {
		v := shipmentitem.UpdateDefaultUpdatedAt()
		siuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siuo *ShipmentItemUpdateOne) check() error {
	if _, ok := siuo.mutation.ShipmentID(); siuo.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentItem.shipment"`)
	}
	if _, ok := siuo.mutation.OrderItemID(); siuo.mutation.OrderItemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentItem.order_item"`)
	}
	return nil
}

func (siuo *ShipmentItemUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentItem, err error) {
	if err := siuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentitem.Table, shipmentitem.Columns, sqlgraph.NewFieldSpec(shipmentitem.FieldID, field.TypeUUID))
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := siuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentitem.FieldID)
		for _, f := range fields {
			if !shipmentitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentitem.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ShipmentItem{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	siuo.mutation.done = true
	return _node, nil
}
