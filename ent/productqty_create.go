// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"github.com/thaiha1607/foursquare_server/ent/productcolor"
	"github.com/thaiha1607/foursquare_server/ent/productinfo"
	"github.com/thaiha1607/foursquare_server/ent/productqty"
	"github.com/thaiha1607/foursquare_server/ent/workunitinfo"
)

// ProductQtyCreate is the builder for creating a ProductQty entity.
type ProductQtyCreate struct {
	config
	mutation *ProductQtyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pqc *ProductQtyCreate) SetCreatedAt(t time.Time) *ProductQtyCreate {
	pqc.mutation.SetCreatedAt(t)
	return pqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pqc *ProductQtyCreate) SetNillableCreatedAt(t *time.Time) *ProductQtyCreate {
	if t != nil {
		pqc.SetCreatedAt(*t)
	}
	return pqc
}

// SetUpdatedAt sets the "updated_at" field.
func (pqc *ProductQtyCreate) SetUpdatedAt(t time.Time) *ProductQtyCreate {
	pqc.mutation.SetUpdatedAt(t)
	return pqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pqc *ProductQtyCreate) SetNillableUpdatedAt(t *time.Time) *ProductQtyCreate {
	if t != nil {
		pqc.SetUpdatedAt(*t)
	}
	return pqc
}

// SetWorkUnitID sets the "work_unit_id" field.
func (pqc *ProductQtyCreate) SetWorkUnitID(u uuid.UUID) *ProductQtyCreate {
	pqc.mutation.SetWorkUnitID(u)
	return pqc
}

// SetProductID sets the "product_id" field.
func (pqc *ProductQtyCreate) SetProductID(s string) *ProductQtyCreate {
	pqc.mutation.SetProductID(s)
	return pqc
}

// SetProductColorID sets the "product_color_id" field.
func (pqc *ProductQtyCreate) SetProductColorID(s string) *ProductQtyCreate {
	pqc.mutation.SetProductColorID(s)
	return pqc
}

// SetPricePerUnit sets the "price_per_unit" field.
func (pqc *ProductQtyCreate) SetPricePerUnit(d decimal.Decimal) *ProductQtyCreate {
	pqc.mutation.SetPricePerUnit(d)
	return pqc
}

// SetQty sets the "qty" field.
func (pqc *ProductQtyCreate) SetQty(d decimal.Decimal) *ProductQtyCreate {
	pqc.mutation.SetQty(d)
	return pqc
}

// SetID sets the "id" field.
func (pqc *ProductQtyCreate) SetID(u uuid.UUID) *ProductQtyCreate {
	pqc.mutation.SetID(u)
	return pqc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pqc *ProductQtyCreate) SetNillableID(u *uuid.UUID) *ProductQtyCreate {
	if u != nil {
		pqc.SetID(*u)
	}
	return pqc
}

// SetWorkUnit sets the "work_unit" edge to the WorkUnitInfo entity.
func (pqc *ProductQtyCreate) SetWorkUnit(w *WorkUnitInfo) *ProductQtyCreate {
	return pqc.SetWorkUnitID(w.ID)
}

// SetProduct sets the "product" edge to the ProductInfo entity.
func (pqc *ProductQtyCreate) SetProduct(p *ProductInfo) *ProductQtyCreate {
	return pqc.SetProductID(p.ID)
}

// SetProductColor sets the "product_color" edge to the ProductColor entity.
func (pqc *ProductQtyCreate) SetProductColor(p *ProductColor) *ProductQtyCreate {
	return pqc.SetProductColorID(p.ID)
}

// Mutation returns the ProductQtyMutation object of the builder.
func (pqc *ProductQtyCreate) Mutation() *ProductQtyMutation {
	return pqc.mutation
}

// Save creates the ProductQty in the database.
func (pqc *ProductQtyCreate) Save(ctx context.Context) (*ProductQty, error) {
	pqc.defaults()
	return withHooks(ctx, pqc.sqlSave, pqc.mutation, pqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pqc *ProductQtyCreate) SaveX(ctx context.Context) *ProductQty {
	v, err := pqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pqc *ProductQtyCreate) Exec(ctx context.Context) error {
	_, err := pqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pqc *ProductQtyCreate) ExecX(ctx context.Context) {
	if err := pqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pqc *ProductQtyCreate) defaults() {
	if _, ok := pqc.mutation.CreatedAt(); !ok {
		v := productqty.DefaultCreatedAt()
		pqc.mutation.SetCreatedAt(v)
	}
	if _, ok := pqc.mutation.UpdatedAt(); !ok {
		v := productqty.DefaultUpdatedAt()
		pqc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pqc.mutation.ID(); !ok {
		v := productqty.DefaultID()
		pqc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pqc *ProductQtyCreate) check() error {
	if _, ok := pqc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProductQty.created_at"`)}
	}
	if _, ok := pqc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProductQty.updated_at"`)}
	}
	if _, ok := pqc.mutation.WorkUnitID(); !ok {
		return &ValidationError{Name: "work_unit_id", err: errors.New(`ent: missing required field "ProductQty.work_unit_id"`)}
	}
	if _, ok := pqc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "ProductQty.product_id"`)}
	}
	if v, ok := pqc.mutation.ProductID(); ok {
		if err := productqty.ProductIDValidator(v); err != nil {
			return &ValidationError{Name: "product_id", err: fmt.Errorf(`ent: validator failed for field "ProductQty.product_id": %w`, err)}
		}
	}
	if _, ok := pqc.mutation.ProductColorID(); !ok {
		return &ValidationError{Name: "product_color_id", err: errors.New(`ent: missing required field "ProductQty.product_color_id"`)}
	}
	if v, ok := pqc.mutation.ProductColorID(); ok {
		if err := productqty.ProductColorIDValidator(v); err != nil {
			return &ValidationError{Name: "product_color_id", err: fmt.Errorf(`ent: validator failed for field "ProductQty.product_color_id": %w`, err)}
		}
	}
	if _, ok := pqc.mutation.PricePerUnit(); !ok {
		return &ValidationError{Name: "price_per_unit", err: errors.New(`ent: missing required field "ProductQty.price_per_unit"`)}
	}
	if _, ok := pqc.mutation.Qty(); !ok {
		return &ValidationError{Name: "qty", err: errors.New(`ent: missing required field "ProductQty.qty"`)}
	}
	if _, ok := pqc.mutation.WorkUnitID(); !ok {
		return &ValidationError{Name: "work_unit", err: errors.New(`ent: missing required edge "ProductQty.work_unit"`)}
	}
	if _, ok := pqc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required edge "ProductQty.product"`)}
	}
	if _, ok := pqc.mutation.ProductColorID(); !ok {
		return &ValidationError{Name: "product_color", err: errors.New(`ent: missing required edge "ProductQty.product_color"`)}
	}
	return nil
}

func (pqc *ProductQtyCreate) sqlSave(ctx context.Context) (*ProductQty, error) {
	if err := pqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pqc.mutation.id = &_node.ID
	pqc.mutation.done = true
	return _node, nil
}

func (pqc *ProductQtyCreate) createSpec() (*ProductQty, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductQty{config: pqc.config}
		_spec = sqlgraph.NewCreateSpec(productqty.Table, sqlgraph.NewFieldSpec(productqty.FieldID, field.TypeUUID))
	)
	if id, ok := pqc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pqc.mutation.CreatedAt(); ok {
		_spec.SetField(productqty.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pqc.mutation.UpdatedAt(); ok {
		_spec.SetField(productqty.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pqc.mutation.PricePerUnit(); ok {
		_spec.SetField(productqty.FieldPricePerUnit, field.TypeFloat64, value)
		_node.PricePerUnit = value
	}
	if value, ok := pqc.mutation.Qty(); ok {
		_spec.SetField(productqty.FieldQty, field.TypeFloat64, value)
		_node.Qty = value
	}
	if nodes := pqc.mutation.WorkUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productqty.WorkUnitTable,
			Columns: []string{productqty.WorkUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workunitinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkUnitID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pqc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productqty.ProductTable,
			Columns: []string{productqty.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pqc.mutation.ProductColorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productqty.ProductColorTable,
			Columns: []string{productqty.ProductColorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcolor.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductColorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductQtyCreateBulk is the builder for creating many ProductQty entities in bulk.
type ProductQtyCreateBulk struct {
	config
	err      error
	builders []*ProductQtyCreate
}

// Save creates the ProductQty entities in the database.
func (pqcb *ProductQtyCreateBulk) Save(ctx context.Context) ([]*ProductQty, error) {
	if pqcb.err != nil {
		return nil, pqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pqcb.builders))
	nodes := make([]*ProductQty, len(pqcb.builders))
	mutators := make([]Mutator, len(pqcb.builders))
	for i := range pqcb.builders {
		func(i int, root context.Context) {
			builder := pqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductQtyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pqcb *ProductQtyCreateBulk) SaveX(ctx context.Context) []*ProductQty {
	v, err := pqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pqcb *ProductQtyCreateBulk) Exec(ctx context.Context) error {
	_, err := pqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pqcb *ProductQtyCreateBulk) ExecX(ctx context.Context) {
	if err := pqcb.Exec(ctx); err != nil {
		panic(err)
	}
}
