// Code generated by ent, DO NOT EDIT.

package orderhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the orderhistory type in the database.
	Label = "order_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldPersonID holds the string denoting the person_id field in the database.
	FieldPersonID = "person_id"
	// FieldPrevStatusCode holds the string denoting the prev_status_code field in the database.
	FieldPrevStatusCode = "prev_status_code"
	// FieldNewStatusCode holds the string denoting the new_status_code field in the database.
	FieldNewStatusCode = "new_status_code"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgePerson holds the string denoting the person edge name in mutations.
	EdgePerson = "person"
	// EdgePrevStatus holds the string denoting the prev_status edge name in mutations.
	EdgePrevStatus = "prev_status"
	// EdgeNewStatus holds the string denoting the new_status edge name in mutations.
	EdgeNewStatus = "new_status"
	// Table holds the table name of the orderhistory in the database.
	Table = "order_histories"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "order_histories"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
	// PersonTable is the table that holds the person relation/edge.
	PersonTable = "order_histories"
	// PersonInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PersonInverseTable = "persons"
	// PersonColumn is the table column denoting the person relation/edge.
	PersonColumn = "person_id"
	// PrevStatusTable is the table that holds the prev_status relation/edge.
	PrevStatusTable = "order_histories"
	// PrevStatusInverseTable is the table name for the OrderStatusCode entity.
	// It exists in this package in order to avoid circular dependency with the "orderstatuscode" package.
	PrevStatusInverseTable = "order_status_codes"
	// PrevStatusColumn is the table column denoting the prev_status relation/edge.
	PrevStatusColumn = "prev_status_code"
	// NewStatusTable is the table that holds the new_status relation/edge.
	NewStatusTable = "order_histories"
	// NewStatusInverseTable is the table name for the OrderStatusCode entity.
	// It exists in this package in order to avoid circular dependency with the "orderstatuscode" package.
	NewStatusInverseTable = "order_status_codes"
	// NewStatusColumn is the table column denoting the new_status relation/edge.
	NewStatusColumn = "new_status_code"
)

// Columns holds all SQL columns for orderhistory fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldOrderID,
	FieldPersonID,
	FieldPrevStatusCode,
	FieldNewStatusCode,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the OrderHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByPersonID orders the results by the person_id field.
func ByPersonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPersonID, opts...).ToFunc()
}

// ByPrevStatusCode orders the results by the prev_status_code field.
func ByPrevStatusCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrevStatusCode, opts...).ToFunc()
}

// ByNewStatusCode orders the results by the new_status_code field.
func ByNewStatusCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNewStatusCode, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByPersonField orders the results by person field.
func ByPersonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonStep(), sql.OrderByField(field, opts...))
	}
}

// ByPrevStatusField orders the results by prev_status field.
func ByPrevStatusField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrevStatusStep(), sql.OrderByField(field, opts...))
	}
}

// ByNewStatusField orders the results by new_status field.
func ByNewStatusField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNewStatusStep(), sql.OrderByField(field, opts...))
	}
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrderTable, OrderColumn),
	)
}
func newPersonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PersonTable, PersonColumn),
	)
}
func newPrevStatusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrevStatusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PrevStatusTable, PrevStatusColumn),
	)
}
func newNewStatusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NewStatusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, NewStatusTable, NewStatusColumn),
	)
}
