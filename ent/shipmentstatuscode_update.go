// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/shipmentstatuscode"
)

// ShipmentStatusCodeUpdate is the builder for updating ShipmentStatusCode entities.
type ShipmentStatusCodeUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentStatusCodeMutation
}

// Where appends a list predicates to the ShipmentStatusCodeUpdate builder.
func (sscu *ShipmentStatusCodeUpdate) Where(ps ...predicate.ShipmentStatusCode) *ShipmentStatusCodeUpdate {
	sscu.mutation.Where(ps...)
	return sscu
}

// SetUpdatedAt sets the "updated_at" field.
func (sscu *ShipmentStatusCodeUpdate) SetUpdatedAt(t time.Time) *ShipmentStatusCodeUpdate {
	sscu.mutation.SetUpdatedAt(t)
	return sscu
}

// SetShipmentStatus sets the "shipment_status" field.
func (sscu *ShipmentStatusCodeUpdate) SetShipmentStatus(s string) *ShipmentStatusCodeUpdate {
	sscu.mutation.SetShipmentStatus(s)
	return sscu
}

// SetNillableShipmentStatus sets the "shipment_status" field if the given value is not nil.
func (sscu *ShipmentStatusCodeUpdate) SetNillableShipmentStatus(s *string) *ShipmentStatusCodeUpdate {
	if s != nil {
		sscu.SetShipmentStatus(*s)
	}
	return sscu
}

// Mutation returns the ShipmentStatusCodeMutation object of the builder.
func (sscu *ShipmentStatusCodeUpdate) Mutation() *ShipmentStatusCodeMutation {
	return sscu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sscu *ShipmentStatusCodeUpdate) Save(ctx context.Context) (int, error) {
	sscu.defaults()
	return withHooks(ctx, sscu.sqlSave, sscu.mutation, sscu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sscu *ShipmentStatusCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := sscu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sscu *ShipmentStatusCodeUpdate) Exec(ctx context.Context) error {
	_, err := sscu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscu *ShipmentStatusCodeUpdate) ExecX(ctx context.Context) {
	if err := sscu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sscu *ShipmentStatusCodeUpdate) defaults() {
	if _, ok := sscu.mutation.UpdatedAt(); !ok {
		v := shipmentstatuscode.UpdateDefaultUpdatedAt()
		sscu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sscu *ShipmentStatusCodeUpdate) check() error {
	if v, ok := sscu.mutation.ShipmentStatus(); ok {
		if err := shipmentstatuscode.ShipmentStatusValidator(v); err != nil {
			return &ValidationError{Name: "shipment_status", err: fmt.Errorf(`ent: validator failed for field "ShipmentStatusCode.shipment_status": %w`, err)}
		}
	}
	return nil
}

func (sscu *ShipmentStatusCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sscu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentstatuscode.Table, shipmentstatuscode.Columns, sqlgraph.NewFieldSpec(shipmentstatuscode.FieldID, field.TypeInt))
	if ps := sscu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sscu.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentstatuscode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sscu.mutation.ShipmentStatus(); ok {
		_spec.SetField(shipmentstatuscode.FieldShipmentStatus, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sscu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentstatuscode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sscu.mutation.done = true
	return n, nil
}

// ShipmentStatusCodeUpdateOne is the builder for updating a single ShipmentStatusCode entity.
type ShipmentStatusCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentStatusCodeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (sscuo *ShipmentStatusCodeUpdateOne) SetUpdatedAt(t time.Time) *ShipmentStatusCodeUpdateOne {
	sscuo.mutation.SetUpdatedAt(t)
	return sscuo
}

// SetShipmentStatus sets the "shipment_status" field.
func (sscuo *ShipmentStatusCodeUpdateOne) SetShipmentStatus(s string) *ShipmentStatusCodeUpdateOne {
	sscuo.mutation.SetShipmentStatus(s)
	return sscuo
}

// SetNillableShipmentStatus sets the "shipment_status" field if the given value is not nil.
func (sscuo *ShipmentStatusCodeUpdateOne) SetNillableShipmentStatus(s *string) *ShipmentStatusCodeUpdateOne {
	if s != nil {
		sscuo.SetShipmentStatus(*s)
	}
	return sscuo
}

// Mutation returns the ShipmentStatusCodeMutation object of the builder.
func (sscuo *ShipmentStatusCodeUpdateOne) Mutation() *ShipmentStatusCodeMutation {
	return sscuo.mutation
}

// Where appends a list predicates to the ShipmentStatusCodeUpdate builder.
func (sscuo *ShipmentStatusCodeUpdateOne) Where(ps ...predicate.ShipmentStatusCode) *ShipmentStatusCodeUpdateOne {
	sscuo.mutation.Where(ps...)
	return sscuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sscuo *ShipmentStatusCodeUpdateOne) Select(field string, fields ...string) *ShipmentStatusCodeUpdateOne {
	sscuo.fields = append([]string{field}, fields...)
	return sscuo
}

// Save executes the query and returns the updated ShipmentStatusCode entity.
func (sscuo *ShipmentStatusCodeUpdateOne) Save(ctx context.Context) (*ShipmentStatusCode, error) {
	sscuo.defaults()
	return withHooks(ctx, sscuo.sqlSave, sscuo.mutation, sscuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sscuo *ShipmentStatusCodeUpdateOne) SaveX(ctx context.Context) *ShipmentStatusCode {
	node, err := sscuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sscuo *ShipmentStatusCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := sscuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscuo *ShipmentStatusCodeUpdateOne) ExecX(ctx context.Context) {
	if err := sscuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sscuo *ShipmentStatusCodeUpdateOne) defaults() {
	if _, ok := sscuo.mutation.UpdatedAt(); !ok {
		v := shipmentstatuscode.UpdateDefaultUpdatedAt()
		sscuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sscuo *ShipmentStatusCodeUpdateOne) check() error {
	if v, ok := sscuo.mutation.ShipmentStatus(); ok {
		if err := shipmentstatuscode.ShipmentStatusValidator(v); err != nil {
			return &ValidationError{Name: "shipment_status", err: fmt.Errorf(`ent: validator failed for field "ShipmentStatusCode.shipment_status": %w`, err)}
		}
	}
	return nil
}

func (sscuo *ShipmentStatusCodeUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentStatusCode, err error) {
	if err := sscuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentstatuscode.Table, shipmentstatuscode.Columns, sqlgraph.NewFieldSpec(shipmentstatuscode.FieldID, field.TypeInt))
	id, ok := sscuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentStatusCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sscuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentstatuscode.FieldID)
		for _, f := range fields {
			if !shipmentstatuscode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentstatuscode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sscuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sscuo.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentstatuscode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sscuo.mutation.ShipmentStatus(); ok {
		_spec.SetField(shipmentstatuscode.FieldShipmentStatus, field.TypeString, value)
	}
	_node = &ShipmentStatusCode{config: sscuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sscuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentstatuscode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sscuo.mutation.done = true
	return _node, nil
}
