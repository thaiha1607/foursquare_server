// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/address"
	"github.com/thaiha1607/foursquare_server/ent/person"
	"github.com/thaiha1607/foursquare_server/ent/workunitinfo"
)

// PersonCreate is the builder for creating a Person entity.
type PersonCreate struct {
	config
	mutation *PersonMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PersonCreate) SetCreatedAt(t time.Time) *PersonCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableCreatedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PersonCreate) SetUpdatedAt(t time.Time) *PersonCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableUpdatedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetAvatarURL sets the "avatar_url" field.
func (pc *PersonCreate) SetAvatarURL(s string) *PersonCreate {
	pc.mutation.SetAvatarURL(s)
	return pc
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (pc *PersonCreate) SetNillableAvatarURL(s *string) *PersonCreate {
	if s != nil {
		pc.SetAvatarURL(*s)
	}
	return pc
}

// SetEmail sets the "email" field.
func (pc *PersonCreate) SetEmail(s string) *PersonCreate {
	pc.mutation.SetEmail(s)
	return pc
}

// SetName sets the "name" field.
func (pc *PersonCreate) SetName(s string) *PersonCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetPhone sets the "phone" field.
func (pc *PersonCreate) SetPhone(s string) *PersonCreate {
	pc.mutation.SetPhone(s)
	return pc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pc *PersonCreate) SetNillablePhone(s *string) *PersonCreate {
	if s != nil {
		pc.SetPhone(*s)
	}
	return pc
}

// SetRole sets the "role" field.
func (pc *PersonCreate) SetRole(pe person.Role) *PersonCreate {
	pc.mutation.SetRole(pe)
	return pc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (pc *PersonCreate) SetNillableRole(pe *person.Role) *PersonCreate {
	if pe != nil {
		pc.SetRole(*pe)
	}
	return pc
}

// SetPasswordHash sets the "password_hash" field.
func (pc *PersonCreate) SetPasswordHash(b []byte) *PersonCreate {
	pc.mutation.SetPasswordHash(b)
	return pc
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (pc *PersonCreate) SetIsEmailVerified(b bool) *PersonCreate {
	pc.mutation.SetIsEmailVerified(b)
	return pc
}

// SetNillableIsEmailVerified sets the "is_email_verified" field if the given value is not nil.
func (pc *PersonCreate) SetNillableIsEmailVerified(b *bool) *PersonCreate {
	if b != nil {
		pc.SetIsEmailVerified(*b)
	}
	return pc
}

// SetIsPhoneVerified sets the "is_phone_verified" field.
func (pc *PersonCreate) SetIsPhoneVerified(b bool) *PersonCreate {
	pc.mutation.SetIsPhoneVerified(b)
	return pc
}

// SetNillableIsPhoneVerified sets the "is_phone_verified" field if the given value is not nil.
func (pc *PersonCreate) SetNillableIsPhoneVerified(b *bool) *PersonCreate {
	if b != nil {
		pc.SetIsPhoneVerified(*b)
	}
	return pc
}

// SetWorkUnitID sets the "work_unit_id" field.
func (pc *PersonCreate) SetWorkUnitID(u uuid.UUID) *PersonCreate {
	pc.mutation.SetWorkUnitID(u)
	return pc
}

// SetNillableWorkUnitID sets the "work_unit_id" field if the given value is not nil.
func (pc *PersonCreate) SetNillableWorkUnitID(u *uuid.UUID) *PersonCreate {
	if u != nil {
		pc.SetWorkUnitID(*u)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PersonCreate) SetID(u uuid.UUID) *PersonCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PersonCreate) SetNillableID(u *uuid.UUID) *PersonCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetWorkUnit sets the "work_unit" edge to the WorkUnitInfo entity.
func (pc *PersonCreate) SetWorkUnit(w *WorkUnitInfo) *PersonCreate {
	return pc.SetWorkUnitID(w.ID)
}

// AddAddressIDs adds the "addresses" edge to the Address entity by IDs.
func (pc *PersonCreate) AddAddressIDs(ids ...string) *PersonCreate {
	pc.mutation.AddAddressIDs(ids...)
	return pc
}

// AddAddresses adds the "addresses" edges to the Address entity.
func (pc *PersonCreate) AddAddresses(a ...*Address) *PersonCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddAddressIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (pc *PersonCreate) Mutation() *PersonMutation {
	return pc.mutation
}

// Save creates the Person in the database.
func (pc *PersonCreate) Save(ctx context.Context) (*Person, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PersonCreate) SaveX(ctx context.Context) *Person {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PersonCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PersonCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PersonCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := person.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := person.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Role(); !ok {
		v := person.DefaultRole
		pc.mutation.SetRole(v)
	}
	if _, ok := pc.mutation.IsEmailVerified(); !ok {
		v := person.DefaultIsEmailVerified
		pc.mutation.SetIsEmailVerified(v)
	}
	if _, ok := pc.mutation.IsPhoneVerified(); !ok {
		v := person.DefaultIsPhoneVerified
		pc.mutation.SetIsPhoneVerified(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := person.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PersonCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Person.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Person.updated_at"`)}
	}
	if v, ok := pc.mutation.AvatarURL(); ok {
		if err := person.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf(`ent: validator failed for field "Person.avatar_url": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Person.email"`)}
	}
	if v, ok := pc.mutation.Email(); ok {
		if err := person.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Person.email": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Person.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Person.name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Phone(); ok {
		if err := person.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Person.phone": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "Person.role"`)}
	}
	if v, ok := pc.mutation.Role(); ok {
		if err := person.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Person.role": %w`, err)}
		}
	}
	if v, ok := pc.mutation.PasswordHash(); ok {
		if err := person.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "Person.password_hash": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IsEmailVerified(); !ok {
		return &ValidationError{Name: "is_email_verified", err: errors.New(`ent: missing required field "Person.is_email_verified"`)}
	}
	if _, ok := pc.mutation.IsPhoneVerified(); !ok {
		return &ValidationError{Name: "is_phone_verified", err: errors.New(`ent: missing required field "Person.is_phone_verified"`)}
	}
	return nil
}

func (pc *PersonCreate) sqlSave(ctx context.Context) (*Person, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PersonCreate) createSpec() (*Person, *sqlgraph.CreateSpec) {
	var (
		_node = &Person{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(person.Table, sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(person.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(person.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.AvatarURL(); ok {
		_spec.SetField(person.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = value
	}
	if value, ok := pc.mutation.Email(); ok {
		_spec.SetField(person.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(person.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Phone(); ok {
		_spec.SetField(person.FieldPhone, field.TypeString, value)
		_node.Phone = &value
	}
	if value, ok := pc.mutation.Role(); ok {
		_spec.SetField(person.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := pc.mutation.PasswordHash(); ok {
		_spec.SetField(person.FieldPasswordHash, field.TypeBytes, value)
		_node.PasswordHash = &value
	}
	if value, ok := pc.mutation.IsEmailVerified(); ok {
		_spec.SetField(person.FieldIsEmailVerified, field.TypeBool, value)
		_node.IsEmailVerified = value
	}
	if value, ok := pc.mutation.IsPhoneVerified(); ok {
		_spec.SetField(person.FieldIsPhoneVerified, field.TypeBool, value)
		_node.IsPhoneVerified = value
	}
	if nodes := pc.mutation.WorkUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   person.WorkUnitTable,
			Columns: []string{person.WorkUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workunitinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkUnitID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   person.AddressesTable,
			Columns: person.AddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &PersonAddressCreate{config: pc.config, mutation: newPersonAddressMutation(pc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PersonCreateBulk is the builder for creating many Person entities in bulk.
type PersonCreateBulk struct {
	config
	err      error
	builders []*PersonCreate
}

// Save creates the Person entities in the database.
func (pcb *PersonCreateBulk) Save(ctx context.Context) ([]*Person, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Person, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PersonCreateBulk) SaveX(ctx context.Context) []*Person {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PersonCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PersonCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
