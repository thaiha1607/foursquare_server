// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/conversation"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/user"
)

// ConversationUpdate is the builder for updating Conversation entities.
type ConversationUpdate struct {
	config
	hooks    []Hook
	mutation *ConversationMutation
}

// Where appends a list predicates to the ConversationUpdate builder.
func (cu *ConversationUpdate) Where(ps ...predicate.Conversation) *ConversationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ConversationUpdate) SetUpdatedAt(t time.Time) *ConversationUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetTitle sets the "title" field.
func (cu *ConversationUpdate) SetTitle(s string) *ConversationUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableTitle(s *string) *ConversationUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// ClearTitle clears the value of the "title" field.
func (cu *ConversationUpdate) ClearTitle() *ConversationUpdate {
	cu.mutation.ClearTitle()
	return cu
}

// SetUserOneID sets the "user_one_id" field.
func (cu *ConversationUpdate) SetUserOneID(u uuid.UUID) *ConversationUpdate {
	cu.mutation.SetUserOneID(u)
	return cu
}

// SetNillableUserOneID sets the "user_one_id" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableUserOneID(u *uuid.UUID) *ConversationUpdate {
	if u != nil {
		cu.SetUserOneID(*u)
	}
	return cu
}

// SetUserTwoID sets the "user_two_id" field.
func (cu *ConversationUpdate) SetUserTwoID(u uuid.UUID) *ConversationUpdate {
	cu.mutation.SetUserTwoID(u)
	return cu
}

// SetNillableUserTwoID sets the "user_two_id" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableUserTwoID(u *uuid.UUID) *ConversationUpdate {
	if u != nil {
		cu.SetUserTwoID(*u)
	}
	return cu
}

// SetUserOne sets the "user_one" edge to the User entity.
func (cu *ConversationUpdate) SetUserOne(u *User) *ConversationUpdate {
	return cu.SetUserOneID(u.ID)
}

// SetUserTwo sets the "user_two" edge to the User entity.
func (cu *ConversationUpdate) SetUserTwo(u *User) *ConversationUpdate {
	return cu.SetUserTwoID(u.ID)
}

// Mutation returns the ConversationMutation object of the builder.
func (cu *ConversationUpdate) Mutation() *ConversationMutation {
	return cu.mutation
}

// ClearUserOne clears the "user_one" edge to the User entity.
func (cu *ConversationUpdate) ClearUserOne() *ConversationUpdate {
	cu.mutation.ClearUserOne()
	return cu
}

// ClearUserTwo clears the "user_two" edge to the User entity.
func (cu *ConversationUpdate) ClearUserTwo() *ConversationUpdate {
	cu.mutation.ClearUserTwo()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConversationUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConversationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConversationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConversationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ConversationUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := conversation.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConversationUpdate) check() error {
	if _, ok := cu.mutation.UserOneID(); cu.mutation.UserOneCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Conversation.user_one"`)
	}
	if _, ok := cu.mutation.UserTwoID(); cu.mutation.UserTwoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Conversation.user_two"`)
	}
	return nil
}

func (cu *ConversationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(conversation.Table, conversation.Columns, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(conversation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(conversation.FieldTitle, field.TypeString, value)
	}
	if cu.mutation.TitleCleared() {
		_spec.ClearField(conversation.FieldTitle, field.TypeString)
	}
	if cu.mutation.UserOneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversation.UserOneTable,
			Columns: []string{conversation.UserOneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserOneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversation.UserOneTable,
			Columns: []string{conversation.UserOneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UserTwoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversation.UserTwoTable,
			Columns: []string{conversation.UserTwoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserTwoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversation.UserTwoTable,
			Columns: []string{conversation.UserTwoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConversationUpdateOne is the builder for updating a single Conversation entity.
type ConversationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConversationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ConversationUpdateOne) SetUpdatedAt(t time.Time) *ConversationUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *ConversationUpdateOne) SetTitle(s string) *ConversationUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableTitle(s *string) *ConversationUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// ClearTitle clears the value of the "title" field.
func (cuo *ConversationUpdateOne) ClearTitle() *ConversationUpdateOne {
	cuo.mutation.ClearTitle()
	return cuo
}

// SetUserOneID sets the "user_one_id" field.
func (cuo *ConversationUpdateOne) SetUserOneID(u uuid.UUID) *ConversationUpdateOne {
	cuo.mutation.SetUserOneID(u)
	return cuo
}

// SetNillableUserOneID sets the "user_one_id" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableUserOneID(u *uuid.UUID) *ConversationUpdateOne {
	if u != nil {
		cuo.SetUserOneID(*u)
	}
	return cuo
}

// SetUserTwoID sets the "user_two_id" field.
func (cuo *ConversationUpdateOne) SetUserTwoID(u uuid.UUID) *ConversationUpdateOne {
	cuo.mutation.SetUserTwoID(u)
	return cuo
}

// SetNillableUserTwoID sets the "user_two_id" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableUserTwoID(u *uuid.UUID) *ConversationUpdateOne {
	if u != nil {
		cuo.SetUserTwoID(*u)
	}
	return cuo
}

// SetUserOne sets the "user_one" edge to the User entity.
func (cuo *ConversationUpdateOne) SetUserOne(u *User) *ConversationUpdateOne {
	return cuo.SetUserOneID(u.ID)
}

// SetUserTwo sets the "user_two" edge to the User entity.
func (cuo *ConversationUpdateOne) SetUserTwo(u *User) *ConversationUpdateOne {
	return cuo.SetUserTwoID(u.ID)
}

// Mutation returns the ConversationMutation object of the builder.
func (cuo *ConversationUpdateOne) Mutation() *ConversationMutation {
	return cuo.mutation
}

// ClearUserOne clears the "user_one" edge to the User entity.
func (cuo *ConversationUpdateOne) ClearUserOne() *ConversationUpdateOne {
	cuo.mutation.ClearUserOne()
	return cuo
}

// ClearUserTwo clears the "user_two" edge to the User entity.
func (cuo *ConversationUpdateOne) ClearUserTwo() *ConversationUpdateOne {
	cuo.mutation.ClearUserTwo()
	return cuo
}

// Where appends a list predicates to the ConversationUpdate builder.
func (cuo *ConversationUpdateOne) Where(ps ...predicate.Conversation) *ConversationUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConversationUpdateOne) Select(field string, fields ...string) *ConversationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Conversation entity.
func (cuo *ConversationUpdateOne) Save(ctx context.Context) (*Conversation, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConversationUpdateOne) SaveX(ctx context.Context) *Conversation {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConversationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConversationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ConversationUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := conversation.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConversationUpdateOne) check() error {
	if _, ok := cuo.mutation.UserOneID(); cuo.mutation.UserOneCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Conversation.user_one"`)
	}
	if _, ok := cuo.mutation.UserTwoID(); cuo.mutation.UserTwoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Conversation.user_two"`)
	}
	return nil
}

func (cuo *ConversationUpdateOne) sqlSave(ctx context.Context) (_node *Conversation, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(conversation.Table, conversation.Columns, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Conversation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, conversation.FieldID)
		for _, f := range fields {
			if !conversation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != conversation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(conversation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(conversation.FieldTitle, field.TypeString, value)
	}
	if cuo.mutation.TitleCleared() {
		_spec.ClearField(conversation.FieldTitle, field.TypeString)
	}
	if cuo.mutation.UserOneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversation.UserOneTable,
			Columns: []string{conversation.UserOneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserOneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversation.UserOneTable,
			Columns: []string{conversation.UserOneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UserTwoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversation.UserTwoTable,
			Columns: []string{conversation.UserTwoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserTwoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversation.UserTwoTable,
			Columns: []string{conversation.UserTwoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Conversation{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
