// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/productcolor"
)

// ProductColorCreate is the builder for creating a ProductColor entity.
type ProductColorCreate struct {
	config
	mutation *ProductColorMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pcc *ProductColorCreate) SetCreatedAt(t time.Time) *ProductColorCreate {
	pcc.mutation.SetCreatedAt(t)
	return pcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcc *ProductColorCreate) SetNillableCreatedAt(t *time.Time) *ProductColorCreate {
	if t != nil {
		pcc.SetCreatedAt(*t)
	}
	return pcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcc *ProductColorCreate) SetUpdatedAt(t time.Time) *ProductColorCreate {
	pcc.mutation.SetUpdatedAt(t)
	return pcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcc *ProductColorCreate) SetNillableUpdatedAt(t *time.Time) *ProductColorCreate {
	if t != nil {
		pcc.SetUpdatedAt(*t)
	}
	return pcc
}

// SetName sets the "name" field.
func (pcc *ProductColorCreate) SetName(s string) *ProductColorCreate {
	pcc.mutation.SetName(s)
	return pcc
}

// SetColorCode sets the "color_code" field.
func (pcc *ProductColorCreate) SetColorCode(s string) *ProductColorCreate {
	pcc.mutation.SetColorCode(s)
	return pcc
}

// SetID sets the "id" field.
func (pcc *ProductColorCreate) SetID(s string) *ProductColorCreate {
	pcc.mutation.SetID(s)
	return pcc
}

// Mutation returns the ProductColorMutation object of the builder.
func (pcc *ProductColorCreate) Mutation() *ProductColorMutation {
	return pcc.mutation
}

// Save creates the ProductColor in the database.
func (pcc *ProductColorCreate) Save(ctx context.Context) (*ProductColor, error) {
	if err := pcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *ProductColorCreate) SaveX(ctx context.Context) *ProductColor {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *ProductColorCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *ProductColorCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *ProductColorCreate) defaults() error {
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		if productcolor.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized productcolor.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := productcolor.DefaultCreatedAt()
		pcc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		if productcolor.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized productcolor.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := productcolor.DefaultUpdatedAt()
		pcc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pcc *ProductColorCreate) check() error {
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProductColor.created_at"`)}
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProductColor.updated_at"`)}
	}
	if _, ok := pcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ProductColor.name"`)}
	}
	if v, ok := pcc.mutation.Name(); ok {
		if err := productcolor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProductColor.name": %w`, err)}
		}
	}
	if _, ok := pcc.mutation.ColorCode(); !ok {
		return &ValidationError{Name: "color_code", err: errors.New(`ent: missing required field "ProductColor.color_code"`)}
	}
	if v, ok := pcc.mutation.ColorCode(); ok {
		if err := productcolor.ColorCodeValidator(v); err != nil {
			return &ValidationError{Name: "color_code", err: fmt.Errorf(`ent: validator failed for field "ProductColor.color_code": %w`, err)}
		}
	}
	if v, ok := pcc.mutation.ID(); ok {
		if err := productcolor.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ProductColor.id": %w`, err)}
		}
	}
	return nil
}

func (pcc *ProductColorCreate) sqlSave(ctx context.Context) (*ProductColor, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ProductColor.ID type: %T", _spec.ID.Value)
		}
	}
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *ProductColorCreate) createSpec() (*ProductColor, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductColor{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(productcolor.Table, sqlgraph.NewFieldSpec(productcolor.FieldID, field.TypeString))
	)
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pcc.mutation.CreatedAt(); ok {
		_spec.SetField(productcolor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := pcc.mutation.UpdatedAt(); ok {
		_spec.SetField(productcolor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := pcc.mutation.Name(); ok {
		_spec.SetField(productcolor.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pcc.mutation.ColorCode(); ok {
		_spec.SetField(productcolor.FieldColorCode, field.TypeString, value)
		_node.ColorCode = value
	}
	return _node, _spec
}

// ProductColorCreateBulk is the builder for creating many ProductColor entities in bulk.
type ProductColorCreateBulk struct {
	config
	err      error
	builders []*ProductColorCreate
}

// Save creates the ProductColor entities in the database.
func (pccb *ProductColorCreateBulk) Save(ctx context.Context) ([]*ProductColor, error) {
	if pccb.err != nil {
		return nil, pccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*ProductColor, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductColorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *ProductColorCreateBulk) SaveX(ctx context.Context) []*ProductColor {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *ProductColorCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *ProductColorCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}
