// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/thaiha1607/foursquare_server/ent/address"
	"github.com/thaiha1607/foursquare_server/ent/conversation"
	"github.com/thaiha1607/foursquare_server/ent/invoice"
	"github.com/thaiha1607/foursquare_server/ent/invoicehistory"
	"github.com/thaiha1607/foursquare_server/ent/message"
	"github.com/thaiha1607/foursquare_server/ent/order"
	"github.com/thaiha1607/foursquare_server/ent/orderhistory"
	"github.com/thaiha1607/foursquare_server/ent/orderitem"
	"github.com/thaiha1607/foursquare_server/ent/orderstatuscode"
	"github.com/thaiha1607/foursquare_server/ent/person"
	"github.com/thaiha1607/foursquare_server/ent/personaddress"
	"github.com/thaiha1607/foursquare_server/ent/productcolor"
	"github.com/thaiha1607/foursquare_server/ent/productimage"
	"github.com/thaiha1607/foursquare_server/ent/productinfo"
	"github.com/thaiha1607/foursquare_server/ent/productqty"
	"github.com/thaiha1607/foursquare_server/ent/producttag"
	"github.com/thaiha1607/foursquare_server/ent/shipment"
	"github.com/thaiha1607/foursquare_server/ent/shipmenthistory"
	"github.com/thaiha1607/foursquare_server/ent/shipmentitem"
	"github.com/thaiha1607/foursquare_server/ent/tag"
	"github.com/thaiha1607/foursquare_server/ent/warehouseassignment"
	"github.com/thaiha1607/foursquare_server/ent/workunitinfo"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Address is the client for interacting with the Address builders.
	Address *AddressClient
	// Conversation is the client for interacting with the Conversation builders.
	Conversation *ConversationClient
	// Invoice is the client for interacting with the Invoice builders.
	Invoice *InvoiceClient
	// InvoiceHistory is the client for interacting with the InvoiceHistory builders.
	InvoiceHistory *InvoiceHistoryClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderHistory is the client for interacting with the OrderHistory builders.
	OrderHistory *OrderHistoryClient
	// OrderItem is the client for interacting with the OrderItem builders.
	OrderItem *OrderItemClient
	// OrderStatusCode is the client for interacting with the OrderStatusCode builders.
	OrderStatusCode *OrderStatusCodeClient
	// Person is the client for interacting with the Person builders.
	Person *PersonClient
	// PersonAddress is the client for interacting with the PersonAddress builders.
	PersonAddress *PersonAddressClient
	// ProductColor is the client for interacting with the ProductColor builders.
	ProductColor *ProductColorClient
	// ProductImage is the client for interacting with the ProductImage builders.
	ProductImage *ProductImageClient
	// ProductInfo is the client for interacting with the ProductInfo builders.
	ProductInfo *ProductInfoClient
	// ProductQty is the client for interacting with the ProductQty builders.
	ProductQty *ProductQtyClient
	// ProductTag is the client for interacting with the ProductTag builders.
	ProductTag *ProductTagClient
	// Shipment is the client for interacting with the Shipment builders.
	Shipment *ShipmentClient
	// ShipmentHistory is the client for interacting with the ShipmentHistory builders.
	ShipmentHistory *ShipmentHistoryClient
	// ShipmentItem is the client for interacting with the ShipmentItem builders.
	ShipmentItem *ShipmentItemClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// WarehouseAssignment is the client for interacting with the WarehouseAssignment builders.
	WarehouseAssignment *WarehouseAssignmentClient
	// WorkUnitInfo is the client for interacting with the WorkUnitInfo builders.
	WorkUnitInfo *WorkUnitInfoClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Address = NewAddressClient(c.config)
	c.Conversation = NewConversationClient(c.config)
	c.Invoice = NewInvoiceClient(c.config)
	c.InvoiceHistory = NewInvoiceHistoryClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderHistory = NewOrderHistoryClient(c.config)
	c.OrderItem = NewOrderItemClient(c.config)
	c.OrderStatusCode = NewOrderStatusCodeClient(c.config)
	c.Person = NewPersonClient(c.config)
	c.PersonAddress = NewPersonAddressClient(c.config)
	c.ProductColor = NewProductColorClient(c.config)
	c.ProductImage = NewProductImageClient(c.config)
	c.ProductInfo = NewProductInfoClient(c.config)
	c.ProductQty = NewProductQtyClient(c.config)
	c.ProductTag = NewProductTagClient(c.config)
	c.Shipment = NewShipmentClient(c.config)
	c.ShipmentHistory = NewShipmentHistoryClient(c.config)
	c.ShipmentItem = NewShipmentItemClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.WarehouseAssignment = NewWarehouseAssignmentClient(c.config)
	c.WorkUnitInfo = NewWorkUnitInfoClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Address:             NewAddressClient(cfg),
		Conversation:        NewConversationClient(cfg),
		Invoice:             NewInvoiceClient(cfg),
		InvoiceHistory:      NewInvoiceHistoryClient(cfg),
		Message:             NewMessageClient(cfg),
		Order:               NewOrderClient(cfg),
		OrderHistory:        NewOrderHistoryClient(cfg),
		OrderItem:           NewOrderItemClient(cfg),
		OrderStatusCode:     NewOrderStatusCodeClient(cfg),
		Person:              NewPersonClient(cfg),
		PersonAddress:       NewPersonAddressClient(cfg),
		ProductColor:        NewProductColorClient(cfg),
		ProductImage:        NewProductImageClient(cfg),
		ProductInfo:         NewProductInfoClient(cfg),
		ProductQty:          NewProductQtyClient(cfg),
		ProductTag:          NewProductTagClient(cfg),
		Shipment:            NewShipmentClient(cfg),
		ShipmentHistory:     NewShipmentHistoryClient(cfg),
		ShipmentItem:        NewShipmentItemClient(cfg),
		Tag:                 NewTagClient(cfg),
		WarehouseAssignment: NewWarehouseAssignmentClient(cfg),
		WorkUnitInfo:        NewWorkUnitInfoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Address:             NewAddressClient(cfg),
		Conversation:        NewConversationClient(cfg),
		Invoice:             NewInvoiceClient(cfg),
		InvoiceHistory:      NewInvoiceHistoryClient(cfg),
		Message:             NewMessageClient(cfg),
		Order:               NewOrderClient(cfg),
		OrderHistory:        NewOrderHistoryClient(cfg),
		OrderItem:           NewOrderItemClient(cfg),
		OrderStatusCode:     NewOrderStatusCodeClient(cfg),
		Person:              NewPersonClient(cfg),
		PersonAddress:       NewPersonAddressClient(cfg),
		ProductColor:        NewProductColorClient(cfg),
		ProductImage:        NewProductImageClient(cfg),
		ProductInfo:         NewProductInfoClient(cfg),
		ProductQty:          NewProductQtyClient(cfg),
		ProductTag:          NewProductTagClient(cfg),
		Shipment:            NewShipmentClient(cfg),
		ShipmentHistory:     NewShipmentHistoryClient(cfg),
		ShipmentItem:        NewShipmentItemClient(cfg),
		Tag:                 NewTagClient(cfg),
		WarehouseAssignment: NewWarehouseAssignmentClient(cfg),
		WorkUnitInfo:        NewWorkUnitInfoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Address.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Address, c.Conversation, c.Invoice, c.InvoiceHistory, c.Message, c.Order,
		c.OrderHistory, c.OrderItem, c.OrderStatusCode, c.Person, c.PersonAddress,
		c.ProductColor, c.ProductImage, c.ProductInfo, c.ProductQty, c.ProductTag,
		c.Shipment, c.ShipmentHistory, c.ShipmentItem, c.Tag, c.WarehouseAssignment,
		c.WorkUnitInfo,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Address, c.Conversation, c.Invoice, c.InvoiceHistory, c.Message, c.Order,
		c.OrderHistory, c.OrderItem, c.OrderStatusCode, c.Person, c.PersonAddress,
		c.ProductColor, c.ProductImage, c.ProductInfo, c.ProductQty, c.ProductTag,
		c.Shipment, c.ShipmentHistory, c.ShipmentItem, c.Tag, c.WarehouseAssignment,
		c.WorkUnitInfo,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AddressMutation:
		return c.Address.mutate(ctx, m)
	case *ConversationMutation:
		return c.Conversation.mutate(ctx, m)
	case *InvoiceMutation:
		return c.Invoice.mutate(ctx, m)
	case *InvoiceHistoryMutation:
		return c.InvoiceHistory.mutate(ctx, m)
	case *MessageMutation:
		return c.Message.mutate(ctx, m)
	case *OrderMutation:
		return c.Order.mutate(ctx, m)
	case *OrderHistoryMutation:
		return c.OrderHistory.mutate(ctx, m)
	case *OrderItemMutation:
		return c.OrderItem.mutate(ctx, m)
	case *OrderStatusCodeMutation:
		return c.OrderStatusCode.mutate(ctx, m)
	case *PersonMutation:
		return c.Person.mutate(ctx, m)
	case *PersonAddressMutation:
		return c.PersonAddress.mutate(ctx, m)
	case *ProductColorMutation:
		return c.ProductColor.mutate(ctx, m)
	case *ProductImageMutation:
		return c.ProductImage.mutate(ctx, m)
	case *ProductInfoMutation:
		return c.ProductInfo.mutate(ctx, m)
	case *ProductQtyMutation:
		return c.ProductQty.mutate(ctx, m)
	case *ProductTagMutation:
		return c.ProductTag.mutate(ctx, m)
	case *ShipmentMutation:
		return c.Shipment.mutate(ctx, m)
	case *ShipmentHistoryMutation:
		return c.ShipmentHistory.mutate(ctx, m)
	case *ShipmentItemMutation:
		return c.ShipmentItem.mutate(ctx, m)
	case *TagMutation:
		return c.Tag.mutate(ctx, m)
	case *WarehouseAssignmentMutation:
		return c.WarehouseAssignment.mutate(ctx, m)
	case *WorkUnitInfoMutation:
		return c.WorkUnitInfo.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AddressClient is a client for the Address schema.
type AddressClient struct {
	config
}

// NewAddressClient returns a client for the Address from the given config.
func NewAddressClient(c config) *AddressClient {
	return &AddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `address.Hooks(f(g(h())))`.
func (c *AddressClient) Use(hooks ...Hook) {
	c.hooks.Address = append(c.hooks.Address, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `address.Intercept(f(g(h())))`.
func (c *AddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.Address = append(c.inters.Address, interceptors...)
}

// Create returns a builder for creating a Address entity.
func (c *AddressClient) Create() *AddressCreate {
	mutation := newAddressMutation(c.config, OpCreate)
	return &AddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Address entities.
func (c *AddressClient) CreateBulk(builders ...*AddressCreate) *AddressCreateBulk {
	return &AddressCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AddressClient) MapCreateBulk(slice any, setFunc func(*AddressCreate, int)) *AddressCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AddressCreateBulk{err: fmt.Errorf("calling to AddressClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AddressCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Address.
func (c *AddressClient) Update() *AddressUpdate {
	mutation := newAddressMutation(c.config, OpUpdate)
	return &AddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AddressClient) UpdateOne(a *Address) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddress(a))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AddressClient) UpdateOneID(id uuid.UUID) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddressID(id))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Address.
func (c *AddressClient) Delete() *AddressDelete {
	mutation := newAddressMutation(c.config, OpDelete)
	return &AddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AddressClient) DeleteOne(a *Address) *AddressDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AddressClient) DeleteOneID(id uuid.UUID) *AddressDeleteOne {
	builder := c.Delete().Where(address.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AddressDeleteOne{builder}
}

// Query returns a query builder for Address.
func (c *AddressClient) Query() *AddressQuery {
	return &AddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a Address entity by its id.
func (c *AddressClient) Get(ctx context.Context, id uuid.UUID) (*Address, error) {
	return c.Query().Where(address.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AddressClient) GetX(ctx context.Context, id uuid.UUID) *Address {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersons queries the persons edge of a Address.
func (c *AddressClient) QueryPersons(a *Address) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, address.PersonsTable, address.PersonsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPersonAddresses queries the person_addresses edge of a Address.
func (c *AddressClient) QueryPersonAddresses(a *Address) *PersonAddressQuery {
	query := (&PersonAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(personaddress.Table, personaddress.AddressesColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, address.PersonAddressesTable, address.PersonAddressesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AddressClient) Hooks() []Hook {
	return c.hooks.Address
}

// Interceptors returns the client interceptors.
func (c *AddressClient) Interceptors() []Interceptor {
	return c.inters.Address
}

func (c *AddressClient) mutate(ctx context.Context, m *AddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Address mutation op: %q", m.Op())
	}
}

// ConversationClient is a client for the Conversation schema.
type ConversationClient struct {
	config
}

// NewConversationClient returns a client for the Conversation from the given config.
func NewConversationClient(c config) *ConversationClient {
	return &ConversationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `conversation.Hooks(f(g(h())))`.
func (c *ConversationClient) Use(hooks ...Hook) {
	c.hooks.Conversation = append(c.hooks.Conversation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `conversation.Intercept(f(g(h())))`.
func (c *ConversationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Conversation = append(c.inters.Conversation, interceptors...)
}

// Create returns a builder for creating a Conversation entity.
func (c *ConversationClient) Create() *ConversationCreate {
	mutation := newConversationMutation(c.config, OpCreate)
	return &ConversationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Conversation entities.
func (c *ConversationClient) CreateBulk(builders ...*ConversationCreate) *ConversationCreateBulk {
	return &ConversationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConversationClient) MapCreateBulk(slice any, setFunc func(*ConversationCreate, int)) *ConversationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConversationCreateBulk{err: fmt.Errorf("calling to ConversationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConversationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConversationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Conversation.
func (c *ConversationClient) Update() *ConversationUpdate {
	mutation := newConversationMutation(c.config, OpUpdate)
	return &ConversationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConversationClient) UpdateOne(co *Conversation) *ConversationUpdateOne {
	mutation := newConversationMutation(c.config, OpUpdateOne, withConversation(co))
	return &ConversationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConversationClient) UpdateOneID(id uuid.UUID) *ConversationUpdateOne {
	mutation := newConversationMutation(c.config, OpUpdateOne, withConversationID(id))
	return &ConversationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Conversation.
func (c *ConversationClient) Delete() *ConversationDelete {
	mutation := newConversationMutation(c.config, OpDelete)
	return &ConversationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConversationClient) DeleteOne(co *Conversation) *ConversationDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConversationClient) DeleteOneID(id uuid.UUID) *ConversationDeleteOne {
	builder := c.Delete().Where(conversation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConversationDeleteOne{builder}
}

// Query returns a query builder for Conversation.
func (c *ConversationClient) Query() *ConversationQuery {
	return &ConversationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConversation},
		inters: c.Interceptors(),
	}
}

// Get returns a Conversation entity by its id.
func (c *ConversationClient) Get(ctx context.Context, id uuid.UUID) (*Conversation, error) {
	return c.Query().Where(conversation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConversationClient) GetX(ctx context.Context, id uuid.UUID) *Conversation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonOne queries the person_one edge of a Conversation.
func (c *ConversationClient) QueryPersonOne(co *Conversation) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(conversation.Table, conversation.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, conversation.PersonOneTable, conversation.PersonOneColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPersonTwo queries the person_two edge of a Conversation.
func (c *ConversationClient) QueryPersonTwo(co *Conversation) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(conversation.Table, conversation.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, conversation.PersonTwoTable, conversation.PersonTwoColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConversationClient) Hooks() []Hook {
	return c.hooks.Conversation
}

// Interceptors returns the client interceptors.
func (c *ConversationClient) Interceptors() []Interceptor {
	return c.inters.Conversation
}

func (c *ConversationClient) mutate(ctx context.Context, m *ConversationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConversationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConversationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConversationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConversationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Conversation mutation op: %q", m.Op())
	}
}

// InvoiceClient is a client for the Invoice schema.
type InvoiceClient struct {
	config
}

// NewInvoiceClient returns a client for the Invoice from the given config.
func NewInvoiceClient(c config) *InvoiceClient {
	return &InvoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invoice.Hooks(f(g(h())))`.
func (c *InvoiceClient) Use(hooks ...Hook) {
	c.hooks.Invoice = append(c.hooks.Invoice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `invoice.Intercept(f(g(h())))`.
func (c *InvoiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Invoice = append(c.inters.Invoice, interceptors...)
}

// Create returns a builder for creating a Invoice entity.
func (c *InvoiceClient) Create() *InvoiceCreate {
	mutation := newInvoiceMutation(c.config, OpCreate)
	return &InvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Invoice entities.
func (c *InvoiceClient) CreateBulk(builders ...*InvoiceCreate) *InvoiceCreateBulk {
	return &InvoiceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InvoiceClient) MapCreateBulk(slice any, setFunc func(*InvoiceCreate, int)) *InvoiceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InvoiceCreateBulk{err: fmt.Errorf("calling to InvoiceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InvoiceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InvoiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Invoice.
func (c *InvoiceClient) Update() *InvoiceUpdate {
	mutation := newInvoiceMutation(c.config, OpUpdate)
	return &InvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvoiceClient) UpdateOne(i *Invoice) *InvoiceUpdateOne {
	mutation := newInvoiceMutation(c.config, OpUpdateOne, withInvoice(i))
	return &InvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvoiceClient) UpdateOneID(id uuid.UUID) *InvoiceUpdateOne {
	mutation := newInvoiceMutation(c.config, OpUpdateOne, withInvoiceID(id))
	return &InvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Invoice.
func (c *InvoiceClient) Delete() *InvoiceDelete {
	mutation := newInvoiceMutation(c.config, OpDelete)
	return &InvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvoiceClient) DeleteOne(i *Invoice) *InvoiceDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvoiceClient) DeleteOneID(id uuid.UUID) *InvoiceDeleteOne {
	builder := c.Delete().Where(invoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvoiceDeleteOne{builder}
}

// Query returns a query builder for Invoice.
func (c *InvoiceClient) Query() *InvoiceQuery {
	return &InvoiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInvoice},
		inters: c.Interceptors(),
	}
}

// Get returns a Invoice entity by its id.
func (c *InvoiceClient) Get(ctx context.Context, id uuid.UUID) (*Invoice, error) {
	return c.Query().Where(invoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvoiceClient) GetX(ctx context.Context, id uuid.UUID) *Invoice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a Invoice.
func (c *InvoiceClient) QueryOrder(i *Invoice) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoice.Table, invoice.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invoice.OrderTable, invoice.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvoiceClient) Hooks() []Hook {
	return c.hooks.Invoice
}

// Interceptors returns the client interceptors.
func (c *InvoiceClient) Interceptors() []Interceptor {
	return c.inters.Invoice
}

func (c *InvoiceClient) mutate(ctx context.Context, m *InvoiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InvoiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InvoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InvoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InvoiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Invoice mutation op: %q", m.Op())
	}
}

// InvoiceHistoryClient is a client for the InvoiceHistory schema.
type InvoiceHistoryClient struct {
	config
}

// NewInvoiceHistoryClient returns a client for the InvoiceHistory from the given config.
func NewInvoiceHistoryClient(c config) *InvoiceHistoryClient {
	return &InvoiceHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invoicehistory.Hooks(f(g(h())))`.
func (c *InvoiceHistoryClient) Use(hooks ...Hook) {
	c.hooks.InvoiceHistory = append(c.hooks.InvoiceHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `invoicehistory.Intercept(f(g(h())))`.
func (c *InvoiceHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.InvoiceHistory = append(c.inters.InvoiceHistory, interceptors...)
}

// Create returns a builder for creating a InvoiceHistory entity.
func (c *InvoiceHistoryClient) Create() *InvoiceHistoryCreate {
	mutation := newInvoiceHistoryMutation(c.config, OpCreate)
	return &InvoiceHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InvoiceHistory entities.
func (c *InvoiceHistoryClient) CreateBulk(builders ...*InvoiceHistoryCreate) *InvoiceHistoryCreateBulk {
	return &InvoiceHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InvoiceHistoryClient) MapCreateBulk(slice any, setFunc func(*InvoiceHistoryCreate, int)) *InvoiceHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InvoiceHistoryCreateBulk{err: fmt.Errorf("calling to InvoiceHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InvoiceHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InvoiceHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InvoiceHistory.
func (c *InvoiceHistoryClient) Update() *InvoiceHistoryUpdate {
	mutation := newInvoiceHistoryMutation(c.config, OpUpdate)
	return &InvoiceHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvoiceHistoryClient) UpdateOne(ih *InvoiceHistory) *InvoiceHistoryUpdateOne {
	mutation := newInvoiceHistoryMutation(c.config, OpUpdateOne, withInvoiceHistory(ih))
	return &InvoiceHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvoiceHistoryClient) UpdateOneID(id uuid.UUID) *InvoiceHistoryUpdateOne {
	mutation := newInvoiceHistoryMutation(c.config, OpUpdateOne, withInvoiceHistoryID(id))
	return &InvoiceHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InvoiceHistory.
func (c *InvoiceHistoryClient) Delete() *InvoiceHistoryDelete {
	mutation := newInvoiceHistoryMutation(c.config, OpDelete)
	return &InvoiceHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvoiceHistoryClient) DeleteOne(ih *InvoiceHistory) *InvoiceHistoryDeleteOne {
	return c.DeleteOneID(ih.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvoiceHistoryClient) DeleteOneID(id uuid.UUID) *InvoiceHistoryDeleteOne {
	builder := c.Delete().Where(invoicehistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvoiceHistoryDeleteOne{builder}
}

// Query returns a query builder for InvoiceHistory.
func (c *InvoiceHistoryClient) Query() *InvoiceHistoryQuery {
	return &InvoiceHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInvoiceHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a InvoiceHistory entity by its id.
func (c *InvoiceHistoryClient) Get(ctx context.Context, id uuid.UUID) (*InvoiceHistory, error) {
	return c.Query().Where(invoicehistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvoiceHistoryClient) GetX(ctx context.Context, id uuid.UUID) *InvoiceHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvoice queries the invoice edge of a InvoiceHistory.
func (c *InvoiceHistoryClient) QueryInvoice(ih *InvoiceHistory) *InvoiceQuery {
	query := (&InvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ih.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoicehistory.Table, invoicehistory.FieldID, id),
			sqlgraph.To(invoice.Table, invoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invoicehistory.InvoiceTable, invoicehistory.InvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(ih.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPerson queries the person edge of a InvoiceHistory.
func (c *InvoiceHistoryClient) QueryPerson(ih *InvoiceHistory) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ih.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoicehistory.Table, invoicehistory.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invoicehistory.PersonTable, invoicehistory.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(ih.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOldStatus queries the old_status edge of a InvoiceHistory.
func (c *InvoiceHistoryClient) QueryOldStatus(ih *InvoiceHistory) *OrderStatusCodeQuery {
	query := (&OrderStatusCodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ih.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoicehistory.Table, invoicehistory.FieldID, id),
			sqlgraph.To(orderstatuscode.Table, orderstatuscode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invoicehistory.OldStatusTable, invoicehistory.OldStatusColumn),
		)
		fromV = sqlgraph.Neighbors(ih.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNewStatus queries the new_status edge of a InvoiceHistory.
func (c *InvoiceHistoryClient) QueryNewStatus(ih *InvoiceHistory) *OrderStatusCodeQuery {
	query := (&OrderStatusCodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ih.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invoicehistory.Table, invoicehistory.FieldID, id),
			sqlgraph.To(orderstatuscode.Table, orderstatuscode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invoicehistory.NewStatusTable, invoicehistory.NewStatusColumn),
		)
		fromV = sqlgraph.Neighbors(ih.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvoiceHistoryClient) Hooks() []Hook {
	return c.hooks.InvoiceHistory
}

// Interceptors returns the client interceptors.
func (c *InvoiceHistoryClient) Interceptors() []Interceptor {
	return c.inters.InvoiceHistory
}

func (c *InvoiceHistoryClient) mutate(ctx context.Context, m *InvoiceHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InvoiceHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InvoiceHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InvoiceHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InvoiceHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InvoiceHistory mutation op: %q", m.Op())
	}
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `message.Intercept(f(g(h())))`.
func (c *MessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Message = append(c.inters.Message, interceptors...)
}

// Create returns a builder for creating a Message entity.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessageClient) MapCreateBulk(slice any, setFunc func(*MessageCreate, int)) *MessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessageCreateBulk{err: fmt.Errorf("calling to MessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id uuid.UUID) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageClient) DeleteOneID(id uuid.UUID) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id uuid.UUID) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id uuid.UUID) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConversation queries the conversation edge of a Message.
func (c *MessageClient) QueryConversation(m *Message) *ConversationQuery {
	query := (&ConversationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(conversation.Table, conversation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, message.ConversationTable, message.ConversationColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySender queries the sender edge of a Message.
func (c *MessageClient) QuerySender(m *Message) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, message.SenderTable, message.SenderColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// Interceptors returns the client interceptors.
func (c *MessageClient) Interceptors() []Interceptor {
	return c.inters.Message
}

func (c *MessageClient) mutate(ctx context.Context, m *MessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Message mutation op: %q", m.Op())
	}
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `order.Intercept(f(g(h())))`.
func (c *OrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Order = append(c.inters.Order, interceptors...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderClient) MapCreateBulk(slice any, setFunc func(*OrderCreate, int)) *OrderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderCreateBulk{err: fmt.Errorf("calling to OrderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id uuid.UUID) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id uuid.UUID) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id uuid.UUID) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id uuid.UUID) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomer queries the customer edge of a Order.
func (c *OrderClient) QueryCustomer(o *Order) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.CustomerTable, order.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a Order.
func (c *OrderClient) QueryCreator(o *Order) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.CreatorTable, order.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParentOrder queries the parent_order edge of a Order.
func (c *OrderClient) QueryParentOrder(o *Order) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, order.ParentOrderTable, order.ParentOrderColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderStatus queries the order_status edge of a Order.
func (c *OrderClient) QueryOrderStatus(o *Order) *OrderStatusCodeQuery {
	query := (&OrderStatusCodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(orderstatuscode.Table, orderstatuscode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.OrderStatusTable, order.OrderStatusColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStaff queries the staff edge of a Order.
func (c *OrderClient) QueryStaff(o *Order) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.StaffTable, order.StaffColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderAddress queries the order_address edge of a Order.
func (c *OrderClient) QueryOrderAddress(o *Order) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.OrderAddressTable, order.OrderAddressColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	return c.hooks.Order
}

// Interceptors returns the client interceptors.
func (c *OrderClient) Interceptors() []Interceptor {
	return c.inters.Order
}

func (c *OrderClient) mutate(ctx context.Context, m *OrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Order mutation op: %q", m.Op())
	}
}

// OrderHistoryClient is a client for the OrderHistory schema.
type OrderHistoryClient struct {
	config
}

// NewOrderHistoryClient returns a client for the OrderHistory from the given config.
func NewOrderHistoryClient(c config) *OrderHistoryClient {
	return &OrderHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderhistory.Hooks(f(g(h())))`.
func (c *OrderHistoryClient) Use(hooks ...Hook) {
	c.hooks.OrderHistory = append(c.hooks.OrderHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderhistory.Intercept(f(g(h())))`.
func (c *OrderHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderHistory = append(c.inters.OrderHistory, interceptors...)
}

// Create returns a builder for creating a OrderHistory entity.
func (c *OrderHistoryClient) Create() *OrderHistoryCreate {
	mutation := newOrderHistoryMutation(c.config, OpCreate)
	return &OrderHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderHistory entities.
func (c *OrderHistoryClient) CreateBulk(builders ...*OrderHistoryCreate) *OrderHistoryCreateBulk {
	return &OrderHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderHistoryClient) MapCreateBulk(slice any, setFunc func(*OrderHistoryCreate, int)) *OrderHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderHistoryCreateBulk{err: fmt.Errorf("calling to OrderHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderHistory.
func (c *OrderHistoryClient) Update() *OrderHistoryUpdate {
	mutation := newOrderHistoryMutation(c.config, OpUpdate)
	return &OrderHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderHistoryClient) UpdateOne(oh *OrderHistory) *OrderHistoryUpdateOne {
	mutation := newOrderHistoryMutation(c.config, OpUpdateOne, withOrderHistory(oh))
	return &OrderHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderHistoryClient) UpdateOneID(id uuid.UUID) *OrderHistoryUpdateOne {
	mutation := newOrderHistoryMutation(c.config, OpUpdateOne, withOrderHistoryID(id))
	return &OrderHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderHistory.
func (c *OrderHistoryClient) Delete() *OrderHistoryDelete {
	mutation := newOrderHistoryMutation(c.config, OpDelete)
	return &OrderHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderHistoryClient) DeleteOne(oh *OrderHistory) *OrderHistoryDeleteOne {
	return c.DeleteOneID(oh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderHistoryClient) DeleteOneID(id uuid.UUID) *OrderHistoryDeleteOne {
	builder := c.Delete().Where(orderhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderHistoryDeleteOne{builder}
}

// Query returns a query builder for OrderHistory.
func (c *OrderHistoryClient) Query() *OrderHistoryQuery {
	return &OrderHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderHistory entity by its id.
func (c *OrderHistoryClient) Get(ctx context.Context, id uuid.UUID) (*OrderHistory, error) {
	return c.Query().Where(orderhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderHistoryClient) GetX(ctx context.Context, id uuid.UUID) *OrderHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a OrderHistory.
func (c *OrderHistoryClient) QueryOrder(oh *OrderHistory) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderhistory.Table, orderhistory.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderhistory.OrderTable, orderhistory.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPerson queries the person edge of a OrderHistory.
func (c *OrderHistoryClient) QueryPerson(oh *OrderHistory) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderhistory.Table, orderhistory.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderhistory.PersonTable, orderhistory.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOldStatus queries the old_status edge of a OrderHistory.
func (c *OrderHistoryClient) QueryOldStatus(oh *OrderHistory) *OrderStatusCodeQuery {
	query := (&OrderStatusCodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderhistory.Table, orderhistory.FieldID, id),
			sqlgraph.To(orderstatuscode.Table, orderstatuscode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderhistory.OldStatusTable, orderhistory.OldStatusColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNewStatus queries the new_status edge of a OrderHistory.
func (c *OrderHistoryClient) QueryNewStatus(oh *OrderHistory) *OrderStatusCodeQuery {
	query := (&OrderStatusCodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderhistory.Table, orderhistory.FieldID, id),
			sqlgraph.To(orderstatuscode.Table, orderstatuscode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderhistory.NewStatusTable, orderhistory.NewStatusColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderHistoryClient) Hooks() []Hook {
	return c.hooks.OrderHistory
}

// Interceptors returns the client interceptors.
func (c *OrderHistoryClient) Interceptors() []Interceptor {
	return c.inters.OrderHistory
}

func (c *OrderHistoryClient) mutate(ctx context.Context, m *OrderHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderHistory mutation op: %q", m.Op())
	}
}

// OrderItemClient is a client for the OrderItem schema.
type OrderItemClient struct {
	config
}

// NewOrderItemClient returns a client for the OrderItem from the given config.
func NewOrderItemClient(c config) *OrderItemClient {
	return &OrderItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderitem.Hooks(f(g(h())))`.
func (c *OrderItemClient) Use(hooks ...Hook) {
	c.hooks.OrderItem = append(c.hooks.OrderItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderitem.Intercept(f(g(h())))`.
func (c *OrderItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderItem = append(c.inters.OrderItem, interceptors...)
}

// Create returns a builder for creating a OrderItem entity.
func (c *OrderItemClient) Create() *OrderItemCreate {
	mutation := newOrderItemMutation(c.config, OpCreate)
	return &OrderItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderItem entities.
func (c *OrderItemClient) CreateBulk(builders ...*OrderItemCreate) *OrderItemCreateBulk {
	return &OrderItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderItemClient) MapCreateBulk(slice any, setFunc func(*OrderItemCreate, int)) *OrderItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderItemCreateBulk{err: fmt.Errorf("calling to OrderItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderItem.
func (c *OrderItemClient) Update() *OrderItemUpdate {
	mutation := newOrderItemMutation(c.config, OpUpdate)
	return &OrderItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderItemClient) UpdateOne(oi *OrderItem) *OrderItemUpdateOne {
	mutation := newOrderItemMutation(c.config, OpUpdateOne, withOrderItem(oi))
	return &OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderItemClient) UpdateOneID(id uuid.UUID) *OrderItemUpdateOne {
	mutation := newOrderItemMutation(c.config, OpUpdateOne, withOrderItemID(id))
	return &OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderItem.
func (c *OrderItemClient) Delete() *OrderItemDelete {
	mutation := newOrderItemMutation(c.config, OpDelete)
	return &OrderItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderItemClient) DeleteOne(oi *OrderItem) *OrderItemDeleteOne {
	return c.DeleteOneID(oi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderItemClient) DeleteOneID(id uuid.UUID) *OrderItemDeleteOne {
	builder := c.Delete().Where(orderitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderItemDeleteOne{builder}
}

// Query returns a query builder for OrderItem.
func (c *OrderItemClient) Query() *OrderItemQuery {
	return &OrderItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderItem},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderItem entity by its id.
func (c *OrderItemClient) Get(ctx context.Context, id uuid.UUID) (*OrderItem, error) {
	return c.Query().Where(orderitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderItemClient) GetX(ctx context.Context, id uuid.UUID) *OrderItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a OrderItem.
func (c *OrderItemClient) QueryOrder(oi *OrderItem) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderitem.OrderTable, orderitem.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a OrderItem.
func (c *OrderItemClient) QueryProduct(oi *OrderItem) *ProductInfoQuery {
	query := (&ProductInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(productinfo.Table, productinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderitem.ProductTable, orderitem.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductColor queries the product_color edge of a OrderItem.
func (c *OrderItemClient) QueryProductColor(oi *OrderItem) *ProductColorQuery {
	query := (&ProductColorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(productcolor.Table, productcolor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderitem.ProductColorTable, orderitem.ProductColorColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySourceWorkUnit queries the source_work_unit edge of a OrderItem.
func (c *OrderItemClient) QuerySourceWorkUnit(oi *OrderItem) *WorkUnitInfoQuery {
	query := (&WorkUnitInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(workunitinfo.Table, workunitinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderitem.SourceWorkUnitTable, orderitem.SourceWorkUnitColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDestinationWorkUnit queries the destination_work_unit edge of a OrderItem.
func (c *OrderItemClient) QueryDestinationWorkUnit(oi *OrderItem) *WorkUnitInfoQuery {
	query := (&WorkUnitInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderitem.Table, orderitem.FieldID, id),
			sqlgraph.To(workunitinfo.Table, workunitinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderitem.DestinationWorkUnitTable, orderitem.DestinationWorkUnitColumn),
		)
		fromV = sqlgraph.Neighbors(oi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderItemClient) Hooks() []Hook {
	return c.hooks.OrderItem
}

// Interceptors returns the client interceptors.
func (c *OrderItemClient) Interceptors() []Interceptor {
	return c.inters.OrderItem
}

func (c *OrderItemClient) mutate(ctx context.Context, m *OrderItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderItem mutation op: %q", m.Op())
	}
}

// OrderStatusCodeClient is a client for the OrderStatusCode schema.
type OrderStatusCodeClient struct {
	config
}

// NewOrderStatusCodeClient returns a client for the OrderStatusCode from the given config.
func NewOrderStatusCodeClient(c config) *OrderStatusCodeClient {
	return &OrderStatusCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderstatuscode.Hooks(f(g(h())))`.
func (c *OrderStatusCodeClient) Use(hooks ...Hook) {
	c.hooks.OrderStatusCode = append(c.hooks.OrderStatusCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderstatuscode.Intercept(f(g(h())))`.
func (c *OrderStatusCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderStatusCode = append(c.inters.OrderStatusCode, interceptors...)
}

// Create returns a builder for creating a OrderStatusCode entity.
func (c *OrderStatusCodeClient) Create() *OrderStatusCodeCreate {
	mutation := newOrderStatusCodeMutation(c.config, OpCreate)
	return &OrderStatusCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderStatusCode entities.
func (c *OrderStatusCodeClient) CreateBulk(builders ...*OrderStatusCodeCreate) *OrderStatusCodeCreateBulk {
	return &OrderStatusCodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderStatusCodeClient) MapCreateBulk(slice any, setFunc func(*OrderStatusCodeCreate, int)) *OrderStatusCodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderStatusCodeCreateBulk{err: fmt.Errorf("calling to OrderStatusCodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderStatusCodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderStatusCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderStatusCode.
func (c *OrderStatusCodeClient) Update() *OrderStatusCodeUpdate {
	mutation := newOrderStatusCodeMutation(c.config, OpUpdate)
	return &OrderStatusCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderStatusCodeClient) UpdateOne(osc *OrderStatusCode) *OrderStatusCodeUpdateOne {
	mutation := newOrderStatusCodeMutation(c.config, OpUpdateOne, withOrderStatusCode(osc))
	return &OrderStatusCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderStatusCodeClient) UpdateOneID(id int) *OrderStatusCodeUpdateOne {
	mutation := newOrderStatusCodeMutation(c.config, OpUpdateOne, withOrderStatusCodeID(id))
	return &OrderStatusCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderStatusCode.
func (c *OrderStatusCodeClient) Delete() *OrderStatusCodeDelete {
	mutation := newOrderStatusCodeMutation(c.config, OpDelete)
	return &OrderStatusCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderStatusCodeClient) DeleteOne(osc *OrderStatusCode) *OrderStatusCodeDeleteOne {
	return c.DeleteOneID(osc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderStatusCodeClient) DeleteOneID(id int) *OrderStatusCodeDeleteOne {
	builder := c.Delete().Where(orderstatuscode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderStatusCodeDeleteOne{builder}
}

// Query returns a query builder for OrderStatusCode.
func (c *OrderStatusCodeClient) Query() *OrderStatusCodeQuery {
	return &OrderStatusCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderStatusCode},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderStatusCode entity by its id.
func (c *OrderStatusCodeClient) Get(ctx context.Context, id int) (*OrderStatusCode, error) {
	return c.Query().Where(orderstatuscode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderStatusCodeClient) GetX(ctx context.Context, id int) *OrderStatusCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderStatusCodeClient) Hooks() []Hook {
	return c.hooks.OrderStatusCode
}

// Interceptors returns the client interceptors.
func (c *OrderStatusCodeClient) Interceptors() []Interceptor {
	return c.inters.OrderStatusCode
}

func (c *OrderStatusCodeClient) mutate(ctx context.Context, m *OrderStatusCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderStatusCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderStatusCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderStatusCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderStatusCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderStatusCode mutation op: %q", m.Op())
	}
}

// PersonClient is a client for the Person schema.
type PersonClient struct {
	config
}

// NewPersonClient returns a client for the Person from the given config.
func NewPersonClient(c config) *PersonClient {
	return &PersonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `person.Hooks(f(g(h())))`.
func (c *PersonClient) Use(hooks ...Hook) {
	c.hooks.Person = append(c.hooks.Person, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `person.Intercept(f(g(h())))`.
func (c *PersonClient) Intercept(interceptors ...Interceptor) {
	c.inters.Person = append(c.inters.Person, interceptors...)
}

// Create returns a builder for creating a Person entity.
func (c *PersonClient) Create() *PersonCreate {
	mutation := newPersonMutation(c.config, OpCreate)
	return &PersonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Person entities.
func (c *PersonClient) CreateBulk(builders ...*PersonCreate) *PersonCreateBulk {
	return &PersonCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PersonClient) MapCreateBulk(slice any, setFunc func(*PersonCreate, int)) *PersonCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PersonCreateBulk{err: fmt.Errorf("calling to PersonClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PersonCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PersonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Person.
func (c *PersonClient) Update() *PersonUpdate {
	mutation := newPersonMutation(c.config, OpUpdate)
	return &PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonClient) UpdateOne(pe *Person) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(pe))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonClient) UpdateOneID(id uuid.UUID) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPersonID(id))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Person.
func (c *PersonClient) Delete() *PersonDelete {
	mutation := newPersonMutation(c.config, OpDelete)
	return &PersonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PersonClient) DeleteOne(pe *Person) *PersonDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PersonClient) DeleteOneID(id uuid.UUID) *PersonDeleteOne {
	builder := c.Delete().Where(person.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonDeleteOne{builder}
}

// Query returns a query builder for Person.
func (c *PersonClient) Query() *PersonQuery {
	return &PersonQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePerson},
		inters: c.Interceptors(),
	}
}

// Get returns a Person entity by its id.
func (c *PersonClient) Get(ctx context.Context, id uuid.UUID) (*Person, error) {
	return c.Query().Where(person.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonClient) GetX(ctx context.Context, id uuid.UUID) *Person {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkUnit queries the work_unit edge of a Person.
func (c *PersonClient) QueryWorkUnit(pe *Person) *WorkUnitInfoQuery {
	query := (&WorkUnitInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(workunitinfo.Table, workunitinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, person.WorkUnitTable, person.WorkUnitColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddresses queries the addresses edge of a Person.
func (c *PersonClient) QueryAddresses(pe *Person) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, person.AddressesTable, person.AddressesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPersonAddresses queries the person_addresses edge of a Person.
func (c *PersonClient) QueryPersonAddresses(pe *Person) *PersonAddressQuery {
	query := (&PersonAddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(personaddress.Table, personaddress.PersonsColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, person.PersonAddressesTable, person.PersonAddressesColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonClient) Hooks() []Hook {
	return c.hooks.Person
}

// Interceptors returns the client interceptors.
func (c *PersonClient) Interceptors() []Interceptor {
	return c.inters.Person
}

func (c *PersonClient) mutate(ctx context.Context, m *PersonMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PersonCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PersonDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Person mutation op: %q", m.Op())
	}
}

// PersonAddressClient is a client for the PersonAddress schema.
type PersonAddressClient struct {
	config
}

// NewPersonAddressClient returns a client for the PersonAddress from the given config.
func NewPersonAddressClient(c config) *PersonAddressClient {
	return &PersonAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personaddress.Hooks(f(g(h())))`.
func (c *PersonAddressClient) Use(hooks ...Hook) {
	c.hooks.PersonAddress = append(c.hooks.PersonAddress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `personaddress.Intercept(f(g(h())))`.
func (c *PersonAddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.PersonAddress = append(c.inters.PersonAddress, interceptors...)
}

// Create returns a builder for creating a PersonAddress entity.
func (c *PersonAddressClient) Create() *PersonAddressCreate {
	mutation := newPersonAddressMutation(c.config, OpCreate)
	return &PersonAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PersonAddress entities.
func (c *PersonAddressClient) CreateBulk(builders ...*PersonAddressCreate) *PersonAddressCreateBulk {
	return &PersonAddressCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PersonAddressClient) MapCreateBulk(slice any, setFunc func(*PersonAddressCreate, int)) *PersonAddressCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PersonAddressCreateBulk{err: fmt.Errorf("calling to PersonAddressClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PersonAddressCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PersonAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PersonAddress.
func (c *PersonAddressClient) Update() *PersonAddressUpdate {
	mutation := newPersonAddressMutation(c.config, OpUpdate)
	return &PersonAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonAddressClient) UpdateOne(pa *PersonAddress) *PersonAddressUpdateOne {
	mutation := newPersonAddressMutation(c.config, OpUpdateOne)
	mutation.persons = &pa.PersonID
	mutation.addresses = &pa.AddressID
	return &PersonAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PersonAddress.
func (c *PersonAddressClient) Delete() *PersonAddressDelete {
	mutation := newPersonAddressMutation(c.config, OpDelete)
	return &PersonAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for PersonAddress.
func (c *PersonAddressClient) Query() *PersonAddressQuery {
	return &PersonAddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePersonAddress},
		inters: c.Interceptors(),
	}
}

// QueryPersons queries the persons edge of a PersonAddress.
func (c *PersonAddressClient) QueryPersons(pa *PersonAddress) *PersonQuery {
	return c.Query().
		Where(personaddress.PersonID(pa.PersonID), personaddress.AddressID(pa.AddressID)).
		QueryPersons()
}

// QueryAddresses queries the addresses edge of a PersonAddress.
func (c *PersonAddressClient) QueryAddresses(pa *PersonAddress) *AddressQuery {
	return c.Query().
		Where(personaddress.PersonID(pa.PersonID), personaddress.AddressID(pa.AddressID)).
		QueryAddresses()
}

// Hooks returns the client hooks.
func (c *PersonAddressClient) Hooks() []Hook {
	return c.hooks.PersonAddress
}

// Interceptors returns the client interceptors.
func (c *PersonAddressClient) Interceptors() []Interceptor {
	return c.inters.PersonAddress
}

func (c *PersonAddressClient) mutate(ctx context.Context, m *PersonAddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PersonAddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PersonAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PersonAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PersonAddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PersonAddress mutation op: %q", m.Op())
	}
}

// ProductColorClient is a client for the ProductColor schema.
type ProductColorClient struct {
	config
}

// NewProductColorClient returns a client for the ProductColor from the given config.
func NewProductColorClient(c config) *ProductColorClient {
	return &ProductColorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcolor.Hooks(f(g(h())))`.
func (c *ProductColorClient) Use(hooks ...Hook) {
	c.hooks.ProductColor = append(c.hooks.ProductColor, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productcolor.Intercept(f(g(h())))`.
func (c *ProductColorClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductColor = append(c.inters.ProductColor, interceptors...)
}

// Create returns a builder for creating a ProductColor entity.
func (c *ProductColorClient) Create() *ProductColorCreate {
	mutation := newProductColorMutation(c.config, OpCreate)
	return &ProductColorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductColor entities.
func (c *ProductColorClient) CreateBulk(builders ...*ProductColorCreate) *ProductColorCreateBulk {
	return &ProductColorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductColorClient) MapCreateBulk(slice any, setFunc func(*ProductColorCreate, int)) *ProductColorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductColorCreateBulk{err: fmt.Errorf("calling to ProductColorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductColorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductColorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductColor.
func (c *ProductColorClient) Update() *ProductColorUpdate {
	mutation := newProductColorMutation(c.config, OpUpdate)
	return &ProductColorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductColorClient) UpdateOne(pc *ProductColor) *ProductColorUpdateOne {
	mutation := newProductColorMutation(c.config, OpUpdateOne, withProductColor(pc))
	return &ProductColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductColorClient) UpdateOneID(id string) *ProductColorUpdateOne {
	mutation := newProductColorMutation(c.config, OpUpdateOne, withProductColorID(id))
	return &ProductColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductColor.
func (c *ProductColorClient) Delete() *ProductColorDelete {
	mutation := newProductColorMutation(c.config, OpDelete)
	return &ProductColorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductColorClient) DeleteOne(pc *ProductColor) *ProductColorDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductColorClient) DeleteOneID(id string) *ProductColorDeleteOne {
	builder := c.Delete().Where(productcolor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductColorDeleteOne{builder}
}

// Query returns a query builder for ProductColor.
func (c *ProductColorClient) Query() *ProductColorQuery {
	return &ProductColorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductColor},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductColor entity by its id.
func (c *ProductColorClient) Get(ctx context.Context, id string) (*ProductColor, error) {
	return c.Query().Where(productcolor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductColorClient) GetX(ctx context.Context, id string) *ProductColor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductColorClient) Hooks() []Hook {
	hooks := c.hooks.ProductColor
	return append(hooks[:len(hooks):len(hooks)], productcolor.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ProductColorClient) Interceptors() []Interceptor {
	return c.inters.ProductColor
}

func (c *ProductColorClient) mutate(ctx context.Context, m *ProductColorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductColorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductColorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductColorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductColorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductColor mutation op: %q", m.Op())
	}
}

// ProductImageClient is a client for the ProductImage schema.
type ProductImageClient struct {
	config
}

// NewProductImageClient returns a client for the ProductImage from the given config.
func NewProductImageClient(c config) *ProductImageClient {
	return &ProductImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productimage.Hooks(f(g(h())))`.
func (c *ProductImageClient) Use(hooks ...Hook) {
	c.hooks.ProductImage = append(c.hooks.ProductImage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productimage.Intercept(f(g(h())))`.
func (c *ProductImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductImage = append(c.inters.ProductImage, interceptors...)
}

// Create returns a builder for creating a ProductImage entity.
func (c *ProductImageClient) Create() *ProductImageCreate {
	mutation := newProductImageMutation(c.config, OpCreate)
	return &ProductImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductImage entities.
func (c *ProductImageClient) CreateBulk(builders ...*ProductImageCreate) *ProductImageCreateBulk {
	return &ProductImageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductImageClient) MapCreateBulk(slice any, setFunc func(*ProductImageCreate, int)) *ProductImageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductImageCreateBulk{err: fmt.Errorf("calling to ProductImageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductImageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductImage.
func (c *ProductImageClient) Update() *ProductImageUpdate {
	mutation := newProductImageMutation(c.config, OpUpdate)
	return &ProductImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductImageClient) UpdateOne(pi *ProductImage) *ProductImageUpdateOne {
	mutation := newProductImageMutation(c.config, OpUpdateOne, withProductImage(pi))
	return &ProductImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductImageClient) UpdateOneID(id uuid.UUID) *ProductImageUpdateOne {
	mutation := newProductImageMutation(c.config, OpUpdateOne, withProductImageID(id))
	return &ProductImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductImage.
func (c *ProductImageClient) Delete() *ProductImageDelete {
	mutation := newProductImageMutation(c.config, OpDelete)
	return &ProductImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductImageClient) DeleteOne(pi *ProductImage) *ProductImageDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductImageClient) DeleteOneID(id uuid.UUID) *ProductImageDeleteOne {
	builder := c.Delete().Where(productimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductImageDeleteOne{builder}
}

// Query returns a query builder for ProductImage.
func (c *ProductImageClient) Query() *ProductImageQuery {
	return &ProductImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductImage},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductImage entity by its id.
func (c *ProductImageClient) Get(ctx context.Context, id uuid.UUID) (*ProductImage, error) {
	return c.Query().Where(productimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductImageClient) GetX(ctx context.Context, id uuid.UUID) *ProductImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProduct queries the product edge of a ProductImage.
func (c *ProductImageClient) QueryProduct(pi *ProductImage) *ProductInfoQuery {
	query := (&ProductInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productimage.Table, productimage.FieldID, id),
			sqlgraph.To(productinfo.Table, productinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productimage.ProductTable, productimage.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductImageClient) Hooks() []Hook {
	return c.hooks.ProductImage
}

// Interceptors returns the client interceptors.
func (c *ProductImageClient) Interceptors() []Interceptor {
	return c.inters.ProductImage
}

func (c *ProductImageClient) mutate(ctx context.Context, m *ProductImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductImage mutation op: %q", m.Op())
	}
}

// ProductInfoClient is a client for the ProductInfo schema.
type ProductInfoClient struct {
	config
}

// NewProductInfoClient returns a client for the ProductInfo from the given config.
func NewProductInfoClient(c config) *ProductInfoClient {
	return &ProductInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productinfo.Hooks(f(g(h())))`.
func (c *ProductInfoClient) Use(hooks ...Hook) {
	c.hooks.ProductInfo = append(c.hooks.ProductInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productinfo.Intercept(f(g(h())))`.
func (c *ProductInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductInfo = append(c.inters.ProductInfo, interceptors...)
}

// Create returns a builder for creating a ProductInfo entity.
func (c *ProductInfoClient) Create() *ProductInfoCreate {
	mutation := newProductInfoMutation(c.config, OpCreate)
	return &ProductInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductInfo entities.
func (c *ProductInfoClient) CreateBulk(builders ...*ProductInfoCreate) *ProductInfoCreateBulk {
	return &ProductInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductInfoClient) MapCreateBulk(slice any, setFunc func(*ProductInfoCreate, int)) *ProductInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductInfoCreateBulk{err: fmt.Errorf("calling to ProductInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductInfo.
func (c *ProductInfoClient) Update() *ProductInfoUpdate {
	mutation := newProductInfoMutation(c.config, OpUpdate)
	return &ProductInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductInfoClient) UpdateOne(pi *ProductInfo) *ProductInfoUpdateOne {
	mutation := newProductInfoMutation(c.config, OpUpdateOne, withProductInfo(pi))
	return &ProductInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductInfoClient) UpdateOneID(id string) *ProductInfoUpdateOne {
	mutation := newProductInfoMutation(c.config, OpUpdateOne, withProductInfoID(id))
	return &ProductInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductInfo.
func (c *ProductInfoClient) Delete() *ProductInfoDelete {
	mutation := newProductInfoMutation(c.config, OpDelete)
	return &ProductInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductInfoClient) DeleteOne(pi *ProductInfo) *ProductInfoDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductInfoClient) DeleteOneID(id string) *ProductInfoDeleteOne {
	builder := c.Delete().Where(productinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductInfoDeleteOne{builder}
}

// Query returns a query builder for ProductInfo.
func (c *ProductInfoClient) Query() *ProductInfoQuery {
	return &ProductInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductInfo entity by its id.
func (c *ProductInfoClient) Get(ctx context.Context, id string) (*ProductInfo, error) {
	return c.Query().Where(productinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductInfoClient) GetX(ctx context.Context, id string) *ProductInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTags queries the tags edge of a ProductInfo.
func (c *ProductInfoClient) QueryTags(pi *ProductInfo) *TagQuery {
	query := (&TagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productinfo.Table, productinfo.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productinfo.TagsTable, productinfo.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductTags queries the product_tags edge of a ProductInfo.
func (c *ProductInfoClient) QueryProductTags(pi *ProductInfo) *ProductTagQuery {
	query := (&ProductTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productinfo.Table, productinfo.FieldID, id),
			sqlgraph.To(producttag.Table, producttag.ProductsColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, productinfo.ProductTagsTable, productinfo.ProductTagsColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductInfoClient) Hooks() []Hook {
	hooks := c.hooks.ProductInfo
	return append(hooks[:len(hooks):len(hooks)], productinfo.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ProductInfoClient) Interceptors() []Interceptor {
	return c.inters.ProductInfo
}

func (c *ProductInfoClient) mutate(ctx context.Context, m *ProductInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductInfo mutation op: %q", m.Op())
	}
}

// ProductQtyClient is a client for the ProductQty schema.
type ProductQtyClient struct {
	config
}

// NewProductQtyClient returns a client for the ProductQty from the given config.
func NewProductQtyClient(c config) *ProductQtyClient {
	return &ProductQtyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productqty.Hooks(f(g(h())))`.
func (c *ProductQtyClient) Use(hooks ...Hook) {
	c.hooks.ProductQty = append(c.hooks.ProductQty, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productqty.Intercept(f(g(h())))`.
func (c *ProductQtyClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductQty = append(c.inters.ProductQty, interceptors...)
}

// Create returns a builder for creating a ProductQty entity.
func (c *ProductQtyClient) Create() *ProductQtyCreate {
	mutation := newProductQtyMutation(c.config, OpCreate)
	return &ProductQtyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductQty entities.
func (c *ProductQtyClient) CreateBulk(builders ...*ProductQtyCreate) *ProductQtyCreateBulk {
	return &ProductQtyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductQtyClient) MapCreateBulk(slice any, setFunc func(*ProductQtyCreate, int)) *ProductQtyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductQtyCreateBulk{err: fmt.Errorf("calling to ProductQtyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductQtyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductQtyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductQty.
func (c *ProductQtyClient) Update() *ProductQtyUpdate {
	mutation := newProductQtyMutation(c.config, OpUpdate)
	return &ProductQtyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductQtyClient) UpdateOne(pq *ProductQty) *ProductQtyUpdateOne {
	mutation := newProductQtyMutation(c.config, OpUpdateOne, withProductQty(pq))
	return &ProductQtyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductQtyClient) UpdateOneID(id uuid.UUID) *ProductQtyUpdateOne {
	mutation := newProductQtyMutation(c.config, OpUpdateOne, withProductQtyID(id))
	return &ProductQtyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductQty.
func (c *ProductQtyClient) Delete() *ProductQtyDelete {
	mutation := newProductQtyMutation(c.config, OpDelete)
	return &ProductQtyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductQtyClient) DeleteOne(pq *ProductQty) *ProductQtyDeleteOne {
	return c.DeleteOneID(pq.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductQtyClient) DeleteOneID(id uuid.UUID) *ProductQtyDeleteOne {
	builder := c.Delete().Where(productqty.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductQtyDeleteOne{builder}
}

// Query returns a query builder for ProductQty.
func (c *ProductQtyClient) Query() *ProductQtyQuery {
	return &ProductQtyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductQty},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductQty entity by its id.
func (c *ProductQtyClient) Get(ctx context.Context, id uuid.UUID) (*ProductQty, error) {
	return c.Query().Where(productqty.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductQtyClient) GetX(ctx context.Context, id uuid.UUID) *ProductQty {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkUnit queries the work_unit edge of a ProductQty.
func (c *ProductQtyClient) QueryWorkUnit(pq *ProductQty) *WorkUnitInfoQuery {
	query := (&WorkUnitInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productqty.Table, productqty.FieldID, id),
			sqlgraph.To(workunitinfo.Table, workunitinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productqty.WorkUnitTable, productqty.WorkUnitColumn),
		)
		fromV = sqlgraph.Neighbors(pq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a ProductQty.
func (c *ProductQtyClient) QueryProduct(pq *ProductQty) *ProductInfoQuery {
	query := (&ProductInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productqty.Table, productqty.FieldID, id),
			sqlgraph.To(productinfo.Table, productinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productqty.ProductTable, productqty.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(pq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductColor queries the product_color edge of a ProductQty.
func (c *ProductQtyClient) QueryProductColor(pq *ProductQty) *ProductColorQuery {
	query := (&ProductColorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productqty.Table, productqty.FieldID, id),
			sqlgraph.To(productcolor.Table, productcolor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productqty.ProductColorTable, productqty.ProductColorColumn),
		)
		fromV = sqlgraph.Neighbors(pq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductQtyClient) Hooks() []Hook {
	return c.hooks.ProductQty
}

// Interceptors returns the client interceptors.
func (c *ProductQtyClient) Interceptors() []Interceptor {
	return c.inters.ProductQty
}

func (c *ProductQtyClient) mutate(ctx context.Context, m *ProductQtyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductQtyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductQtyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductQtyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductQtyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductQty mutation op: %q", m.Op())
	}
}

// ProductTagClient is a client for the ProductTag schema.
type ProductTagClient struct {
	config
}

// NewProductTagClient returns a client for the ProductTag from the given config.
func NewProductTagClient(c config) *ProductTagClient {
	return &ProductTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `producttag.Hooks(f(g(h())))`.
func (c *ProductTagClient) Use(hooks ...Hook) {
	c.hooks.ProductTag = append(c.hooks.ProductTag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `producttag.Intercept(f(g(h())))`.
func (c *ProductTagClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductTag = append(c.inters.ProductTag, interceptors...)
}

// Create returns a builder for creating a ProductTag entity.
func (c *ProductTagClient) Create() *ProductTagCreate {
	mutation := newProductTagMutation(c.config, OpCreate)
	return &ProductTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductTag entities.
func (c *ProductTagClient) CreateBulk(builders ...*ProductTagCreate) *ProductTagCreateBulk {
	return &ProductTagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductTagClient) MapCreateBulk(slice any, setFunc func(*ProductTagCreate, int)) *ProductTagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductTagCreateBulk{err: fmt.Errorf("calling to ProductTagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductTagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductTag.
func (c *ProductTagClient) Update() *ProductTagUpdate {
	mutation := newProductTagMutation(c.config, OpUpdate)
	return &ProductTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductTagClient) UpdateOne(pt *ProductTag) *ProductTagUpdateOne {
	mutation := newProductTagMutation(c.config, OpUpdateOne)
	mutation.products = &pt.ProductID
	mutation.tags = &pt.TagID
	return &ProductTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductTag.
func (c *ProductTagClient) Delete() *ProductTagDelete {
	mutation := newProductTagMutation(c.config, OpDelete)
	return &ProductTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for ProductTag.
func (c *ProductTagClient) Query() *ProductTagQuery {
	return &ProductTagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductTag},
		inters: c.Interceptors(),
	}
}

// QueryProducts queries the products edge of a ProductTag.
func (c *ProductTagClient) QueryProducts(pt *ProductTag) *ProductInfoQuery {
	return c.Query().
		Where(producttag.ProductID(pt.ProductID), producttag.TagID(pt.TagID)).
		QueryProducts()
}

// QueryTags queries the tags edge of a ProductTag.
func (c *ProductTagClient) QueryTags(pt *ProductTag) *TagQuery {
	return c.Query().
		Where(producttag.ProductID(pt.ProductID), producttag.TagID(pt.TagID)).
		QueryTags()
}

// Hooks returns the client hooks.
func (c *ProductTagClient) Hooks() []Hook {
	return c.hooks.ProductTag
}

// Interceptors returns the client interceptors.
func (c *ProductTagClient) Interceptors() []Interceptor {
	return c.inters.ProductTag
}

func (c *ProductTagClient) mutate(ctx context.Context, m *ProductTagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductTagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductTagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductTagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductTag mutation op: %q", m.Op())
	}
}

// ShipmentClient is a client for the Shipment schema.
type ShipmentClient struct {
	config
}

// NewShipmentClient returns a client for the Shipment from the given config.
func NewShipmentClient(c config) *ShipmentClient {
	return &ShipmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipment.Hooks(f(g(h())))`.
func (c *ShipmentClient) Use(hooks ...Hook) {
	c.hooks.Shipment = append(c.hooks.Shipment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipment.Intercept(f(g(h())))`.
func (c *ShipmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Shipment = append(c.inters.Shipment, interceptors...)
}

// Create returns a builder for creating a Shipment entity.
func (c *ShipmentClient) Create() *ShipmentCreate {
	mutation := newShipmentMutation(c.config, OpCreate)
	return &ShipmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Shipment entities.
func (c *ShipmentClient) CreateBulk(builders ...*ShipmentCreate) *ShipmentCreateBulk {
	return &ShipmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentClient) MapCreateBulk(slice any, setFunc func(*ShipmentCreate, int)) *ShipmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentCreateBulk{err: fmt.Errorf("calling to ShipmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Shipment.
func (c *ShipmentClient) Update() *ShipmentUpdate {
	mutation := newShipmentMutation(c.config, OpUpdate)
	return &ShipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentClient) UpdateOne(s *Shipment) *ShipmentUpdateOne {
	mutation := newShipmentMutation(c.config, OpUpdateOne, withShipment(s))
	return &ShipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentClient) UpdateOneID(id string) *ShipmentUpdateOne {
	mutation := newShipmentMutation(c.config, OpUpdateOne, withShipmentID(id))
	return &ShipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Shipment.
func (c *ShipmentClient) Delete() *ShipmentDelete {
	mutation := newShipmentMutation(c.config, OpDelete)
	return &ShipmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentClient) DeleteOne(s *Shipment) *ShipmentDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentClient) DeleteOneID(id string) *ShipmentDeleteOne {
	builder := c.Delete().Where(shipment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentDeleteOne{builder}
}

// Query returns a query builder for Shipment.
func (c *ShipmentClient) Query() *ShipmentQuery {
	return &ShipmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipment},
		inters: c.Interceptors(),
	}
}

// Get returns a Shipment entity by its id.
func (c *ShipmentClient) Get(ctx context.Context, id string) (*Shipment, error) {
	return c.Query().Where(shipment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentClient) GetX(ctx context.Context, id string) *Shipment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a Shipment.
func (c *ShipmentClient) QueryOrder(s *Shipment) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.OrderTable, shipment.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvoice queries the invoice edge of a Shipment.
func (c *ShipmentClient) QueryInvoice(s *Shipment) *InvoiceQuery {
	query := (&InvoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(invoice.Table, invoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.InvoiceTable, shipment.InvoiceColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStaff queries the staff edge of a Shipment.
func (c *ShipmentClient) QueryStaff(s *Shipment) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.StaffTable, shipment.StaffColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentClient) Hooks() []Hook {
	hooks := c.hooks.Shipment
	return append(hooks[:len(hooks):len(hooks)], shipment.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ShipmentClient) Interceptors() []Interceptor {
	return c.inters.Shipment
}

func (c *ShipmentClient) mutate(ctx context.Context, m *ShipmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Shipment mutation op: %q", m.Op())
	}
}

// ShipmentHistoryClient is a client for the ShipmentHistory schema.
type ShipmentHistoryClient struct {
	config
}

// NewShipmentHistoryClient returns a client for the ShipmentHistory from the given config.
func NewShipmentHistoryClient(c config) *ShipmentHistoryClient {
	return &ShipmentHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmenthistory.Hooks(f(g(h())))`.
func (c *ShipmentHistoryClient) Use(hooks ...Hook) {
	c.hooks.ShipmentHistory = append(c.hooks.ShipmentHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmenthistory.Intercept(f(g(h())))`.
func (c *ShipmentHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentHistory = append(c.inters.ShipmentHistory, interceptors...)
}

// Create returns a builder for creating a ShipmentHistory entity.
func (c *ShipmentHistoryClient) Create() *ShipmentHistoryCreate {
	mutation := newShipmentHistoryMutation(c.config, OpCreate)
	return &ShipmentHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentHistory entities.
func (c *ShipmentHistoryClient) CreateBulk(builders ...*ShipmentHistoryCreate) *ShipmentHistoryCreateBulk {
	return &ShipmentHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentHistoryClient) MapCreateBulk(slice any, setFunc func(*ShipmentHistoryCreate, int)) *ShipmentHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentHistoryCreateBulk{err: fmt.Errorf("calling to ShipmentHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentHistory.
func (c *ShipmentHistoryClient) Update() *ShipmentHistoryUpdate {
	mutation := newShipmentHistoryMutation(c.config, OpUpdate)
	return &ShipmentHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentHistoryClient) UpdateOne(sh *ShipmentHistory) *ShipmentHistoryUpdateOne {
	mutation := newShipmentHistoryMutation(c.config, OpUpdateOne, withShipmentHistory(sh))
	return &ShipmentHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentHistoryClient) UpdateOneID(id uuid.UUID) *ShipmentHistoryUpdateOne {
	mutation := newShipmentHistoryMutation(c.config, OpUpdateOne, withShipmentHistoryID(id))
	return &ShipmentHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentHistory.
func (c *ShipmentHistoryClient) Delete() *ShipmentHistoryDelete {
	mutation := newShipmentHistoryMutation(c.config, OpDelete)
	return &ShipmentHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentHistoryClient) DeleteOne(sh *ShipmentHistory) *ShipmentHistoryDeleteOne {
	return c.DeleteOneID(sh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentHistoryClient) DeleteOneID(id uuid.UUID) *ShipmentHistoryDeleteOne {
	builder := c.Delete().Where(shipmenthistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentHistoryDeleteOne{builder}
}

// Query returns a query builder for ShipmentHistory.
func (c *ShipmentHistoryClient) Query() *ShipmentHistoryQuery {
	return &ShipmentHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentHistory entity by its id.
func (c *ShipmentHistoryClient) Get(ctx context.Context, id uuid.UUID) (*ShipmentHistory, error) {
	return c.Query().Where(shipmenthistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentHistoryClient) GetX(ctx context.Context, id uuid.UUID) *ShipmentHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShipment queries the shipment edge of a ShipmentHistory.
func (c *ShipmentHistoryClient) QueryShipment(sh *ShipmentHistory) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenthistory.Table, shipmenthistory.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmenthistory.ShipmentTable, shipmenthistory.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(sh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPerson queries the person edge of a ShipmentHistory.
func (c *ShipmentHistoryClient) QueryPerson(sh *ShipmentHistory) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenthistory.Table, shipmenthistory.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmenthistory.PersonTable, shipmenthistory.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(sh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOldStatus queries the old_status edge of a ShipmentHistory.
func (c *ShipmentHistoryClient) QueryOldStatus(sh *ShipmentHistory) *OrderStatusCodeQuery {
	query := (&OrderStatusCodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenthistory.Table, shipmenthistory.FieldID, id),
			sqlgraph.To(orderstatuscode.Table, orderstatuscode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmenthistory.OldStatusTable, shipmenthistory.OldStatusColumn),
		)
		fromV = sqlgraph.Neighbors(sh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNewStatus queries the new_status edge of a ShipmentHistory.
func (c *ShipmentHistoryClient) QueryNewStatus(sh *ShipmentHistory) *OrderStatusCodeQuery {
	query := (&OrderStatusCodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenthistory.Table, shipmenthistory.FieldID, id),
			sqlgraph.To(orderstatuscode.Table, orderstatuscode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmenthistory.NewStatusTable, shipmenthistory.NewStatusColumn),
		)
		fromV = sqlgraph.Neighbors(sh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentHistoryClient) Hooks() []Hook {
	return c.hooks.ShipmentHistory
}

// Interceptors returns the client interceptors.
func (c *ShipmentHistoryClient) Interceptors() []Interceptor {
	return c.inters.ShipmentHistory
}

func (c *ShipmentHistoryClient) mutate(ctx context.Context, m *ShipmentHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentHistory mutation op: %q", m.Op())
	}
}

// ShipmentItemClient is a client for the ShipmentItem schema.
type ShipmentItemClient struct {
	config
}

// NewShipmentItemClient returns a client for the ShipmentItem from the given config.
func NewShipmentItemClient(c config) *ShipmentItemClient {
	return &ShipmentItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentitem.Hooks(f(g(h())))`.
func (c *ShipmentItemClient) Use(hooks ...Hook) {
	c.hooks.ShipmentItem = append(c.hooks.ShipmentItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmentitem.Intercept(f(g(h())))`.
func (c *ShipmentItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentItem = append(c.inters.ShipmentItem, interceptors...)
}

// Create returns a builder for creating a ShipmentItem entity.
func (c *ShipmentItemClient) Create() *ShipmentItemCreate {
	mutation := newShipmentItemMutation(c.config, OpCreate)
	return &ShipmentItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentItem entities.
func (c *ShipmentItemClient) CreateBulk(builders ...*ShipmentItemCreate) *ShipmentItemCreateBulk {
	return &ShipmentItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentItemClient) MapCreateBulk(slice any, setFunc func(*ShipmentItemCreate, int)) *ShipmentItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentItemCreateBulk{err: fmt.Errorf("calling to ShipmentItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentItem.
func (c *ShipmentItemClient) Update() *ShipmentItemUpdate {
	mutation := newShipmentItemMutation(c.config, OpUpdate)
	return &ShipmentItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentItemClient) UpdateOne(si *ShipmentItem) *ShipmentItemUpdateOne {
	mutation := newShipmentItemMutation(c.config, OpUpdateOne, withShipmentItem(si))
	return &ShipmentItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentItemClient) UpdateOneID(id uuid.UUID) *ShipmentItemUpdateOne {
	mutation := newShipmentItemMutation(c.config, OpUpdateOne, withShipmentItemID(id))
	return &ShipmentItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentItem.
func (c *ShipmentItemClient) Delete() *ShipmentItemDelete {
	mutation := newShipmentItemMutation(c.config, OpDelete)
	return &ShipmentItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentItemClient) DeleteOne(si *ShipmentItem) *ShipmentItemDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentItemClient) DeleteOneID(id uuid.UUID) *ShipmentItemDeleteOne {
	builder := c.Delete().Where(shipmentitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentItemDeleteOne{builder}
}

// Query returns a query builder for ShipmentItem.
func (c *ShipmentItemClient) Query() *ShipmentItemQuery {
	return &ShipmentItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentItem},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentItem entity by its id.
func (c *ShipmentItemClient) Get(ctx context.Context, id uuid.UUID) (*ShipmentItem, error) {
	return c.Query().Where(shipmentitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentItemClient) GetX(ctx context.Context, id uuid.UUID) *ShipmentItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShipment queries the shipment edge of a ShipmentItem.
func (c *ShipmentItemClient) QueryShipment(si *ShipmentItem) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentitem.Table, shipmentitem.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentitem.ShipmentTable, shipmentitem.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderItem queries the order_item edge of a ShipmentItem.
func (c *ShipmentItemClient) QueryOrderItem(si *ShipmentItem) *OrderItemQuery {
	query := (&OrderItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentitem.Table, shipmentitem.FieldID, id),
			sqlgraph.To(orderitem.Table, orderitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentitem.OrderItemTable, shipmentitem.OrderItemColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentItemClient) Hooks() []Hook {
	return c.hooks.ShipmentItem
}

// Interceptors returns the client interceptors.
func (c *ShipmentItemClient) Interceptors() []Interceptor {
	return c.inters.ShipmentItem
}

func (c *ShipmentItemClient) mutate(ctx context.Context, m *ShipmentItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentItem mutation op: %q", m.Op())
	}
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tag.Intercept(f(g(h())))`.
func (c *TagClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tag = append(c.inters.Tag, interceptors...)
}

// Create returns a builder for creating a Tag entity.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TagClient) MapCreateBulk(slice any, setFunc func(*TagCreate, int)) *TagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TagCreateBulk{err: fmt.Errorf("calling to TagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id string) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TagClient) DeleteOneID(id string) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTag},
		inters: c.Interceptors(),
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id string) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id string) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProducts queries the products edge of a Tag.
func (c *TagClient) QueryProducts(t *Tag) *ProductInfoQuery {
	query := (&ProductInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(productinfo.Table, productinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tag.ProductsTable, tag.ProductsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductTags queries the product_tags edge of a Tag.
func (c *TagClient) QueryProductTags(t *Tag) *ProductTagQuery {
	query := (&ProductTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(producttag.Table, producttag.TagsColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, tag.ProductTagsTable, tag.ProductTagsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	hooks := c.hooks.Tag
	return append(hooks[:len(hooks):len(hooks)], tag.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *TagClient) Interceptors() []Interceptor {
	return c.inters.Tag
}

func (c *TagClient) mutate(ctx context.Context, m *TagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tag mutation op: %q", m.Op())
	}
}

// WarehouseAssignmentClient is a client for the WarehouseAssignment schema.
type WarehouseAssignmentClient struct {
	config
}

// NewWarehouseAssignmentClient returns a client for the WarehouseAssignment from the given config.
func NewWarehouseAssignmentClient(c config) *WarehouseAssignmentClient {
	return &WarehouseAssignmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `warehouseassignment.Hooks(f(g(h())))`.
func (c *WarehouseAssignmentClient) Use(hooks ...Hook) {
	c.hooks.WarehouseAssignment = append(c.hooks.WarehouseAssignment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `warehouseassignment.Intercept(f(g(h())))`.
func (c *WarehouseAssignmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.WarehouseAssignment = append(c.inters.WarehouseAssignment, interceptors...)
}

// Create returns a builder for creating a WarehouseAssignment entity.
func (c *WarehouseAssignmentClient) Create() *WarehouseAssignmentCreate {
	mutation := newWarehouseAssignmentMutation(c.config, OpCreate)
	return &WarehouseAssignmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WarehouseAssignment entities.
func (c *WarehouseAssignmentClient) CreateBulk(builders ...*WarehouseAssignmentCreate) *WarehouseAssignmentCreateBulk {
	return &WarehouseAssignmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WarehouseAssignmentClient) MapCreateBulk(slice any, setFunc func(*WarehouseAssignmentCreate, int)) *WarehouseAssignmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WarehouseAssignmentCreateBulk{err: fmt.Errorf("calling to WarehouseAssignmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WarehouseAssignmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WarehouseAssignmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WarehouseAssignment.
func (c *WarehouseAssignmentClient) Update() *WarehouseAssignmentUpdate {
	mutation := newWarehouseAssignmentMutation(c.config, OpUpdate)
	return &WarehouseAssignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WarehouseAssignmentClient) UpdateOne(wa *WarehouseAssignment) *WarehouseAssignmentUpdateOne {
	mutation := newWarehouseAssignmentMutation(c.config, OpUpdateOne, withWarehouseAssignment(wa))
	return &WarehouseAssignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WarehouseAssignmentClient) UpdateOneID(id uuid.UUID) *WarehouseAssignmentUpdateOne {
	mutation := newWarehouseAssignmentMutation(c.config, OpUpdateOne, withWarehouseAssignmentID(id))
	return &WarehouseAssignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WarehouseAssignment.
func (c *WarehouseAssignmentClient) Delete() *WarehouseAssignmentDelete {
	mutation := newWarehouseAssignmentMutation(c.config, OpDelete)
	return &WarehouseAssignmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WarehouseAssignmentClient) DeleteOne(wa *WarehouseAssignment) *WarehouseAssignmentDeleteOne {
	return c.DeleteOneID(wa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WarehouseAssignmentClient) DeleteOneID(id uuid.UUID) *WarehouseAssignmentDeleteOne {
	builder := c.Delete().Where(warehouseassignment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WarehouseAssignmentDeleteOne{builder}
}

// Query returns a query builder for WarehouseAssignment.
func (c *WarehouseAssignmentClient) Query() *WarehouseAssignmentQuery {
	return &WarehouseAssignmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWarehouseAssignment},
		inters: c.Interceptors(),
	}
}

// Get returns a WarehouseAssignment entity by its id.
func (c *WarehouseAssignmentClient) Get(ctx context.Context, id uuid.UUID) (*WarehouseAssignment, error) {
	return c.Query().Where(warehouseassignment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WarehouseAssignmentClient) GetX(ctx context.Context, id uuid.UUID) *WarehouseAssignment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a WarehouseAssignment.
func (c *WarehouseAssignmentClient) QueryOrder(wa *WarehouseAssignment) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(warehouseassignment.Table, warehouseassignment.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, warehouseassignment.OrderTable, warehouseassignment.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(wa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkUnit queries the work_unit edge of a WarehouseAssignment.
func (c *WarehouseAssignmentClient) QueryWorkUnit(wa *WarehouseAssignment) *WorkUnitInfoQuery {
	query := (&WorkUnitInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(warehouseassignment.Table, warehouseassignment.FieldID, id),
			sqlgraph.To(workunitinfo.Table, workunitinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, warehouseassignment.WorkUnitTable, warehouseassignment.WorkUnitColumn),
		)
		fromV = sqlgraph.Neighbors(wa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStaff queries the staff edge of a WarehouseAssignment.
func (c *WarehouseAssignmentClient) QueryStaff(wa *WarehouseAssignment) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(warehouseassignment.Table, warehouseassignment.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, warehouseassignment.StaffTable, warehouseassignment.StaffColumn),
		)
		fromV = sqlgraph.Neighbors(wa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WarehouseAssignmentClient) Hooks() []Hook {
	return c.hooks.WarehouseAssignment
}

// Interceptors returns the client interceptors.
func (c *WarehouseAssignmentClient) Interceptors() []Interceptor {
	return c.inters.WarehouseAssignment
}

func (c *WarehouseAssignmentClient) mutate(ctx context.Context, m *WarehouseAssignmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WarehouseAssignmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WarehouseAssignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WarehouseAssignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WarehouseAssignmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WarehouseAssignment mutation op: %q", m.Op())
	}
}

// WorkUnitInfoClient is a client for the WorkUnitInfo schema.
type WorkUnitInfoClient struct {
	config
}

// NewWorkUnitInfoClient returns a client for the WorkUnitInfo from the given config.
func NewWorkUnitInfoClient(c config) *WorkUnitInfoClient {
	return &WorkUnitInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workunitinfo.Hooks(f(g(h())))`.
func (c *WorkUnitInfoClient) Use(hooks ...Hook) {
	c.hooks.WorkUnitInfo = append(c.hooks.WorkUnitInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workunitinfo.Intercept(f(g(h())))`.
func (c *WorkUnitInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkUnitInfo = append(c.inters.WorkUnitInfo, interceptors...)
}

// Create returns a builder for creating a WorkUnitInfo entity.
func (c *WorkUnitInfoClient) Create() *WorkUnitInfoCreate {
	mutation := newWorkUnitInfoMutation(c.config, OpCreate)
	return &WorkUnitInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkUnitInfo entities.
func (c *WorkUnitInfoClient) CreateBulk(builders ...*WorkUnitInfoCreate) *WorkUnitInfoCreateBulk {
	return &WorkUnitInfoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkUnitInfoClient) MapCreateBulk(slice any, setFunc func(*WorkUnitInfoCreate, int)) *WorkUnitInfoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkUnitInfoCreateBulk{err: fmt.Errorf("calling to WorkUnitInfoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkUnitInfoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkUnitInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkUnitInfo.
func (c *WorkUnitInfoClient) Update() *WorkUnitInfoUpdate {
	mutation := newWorkUnitInfoMutation(c.config, OpUpdate)
	return &WorkUnitInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkUnitInfoClient) UpdateOne(wui *WorkUnitInfo) *WorkUnitInfoUpdateOne {
	mutation := newWorkUnitInfoMutation(c.config, OpUpdateOne, withWorkUnitInfo(wui))
	return &WorkUnitInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkUnitInfoClient) UpdateOneID(id uuid.UUID) *WorkUnitInfoUpdateOne {
	mutation := newWorkUnitInfoMutation(c.config, OpUpdateOne, withWorkUnitInfoID(id))
	return &WorkUnitInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkUnitInfo.
func (c *WorkUnitInfoClient) Delete() *WorkUnitInfoDelete {
	mutation := newWorkUnitInfoMutation(c.config, OpDelete)
	return &WorkUnitInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkUnitInfoClient) DeleteOne(wui *WorkUnitInfo) *WorkUnitInfoDeleteOne {
	return c.DeleteOneID(wui.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkUnitInfoClient) DeleteOneID(id uuid.UUID) *WorkUnitInfoDeleteOne {
	builder := c.Delete().Where(workunitinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkUnitInfoDeleteOne{builder}
}

// Query returns a query builder for WorkUnitInfo.
func (c *WorkUnitInfoClient) Query() *WorkUnitInfoQuery {
	return &WorkUnitInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkUnitInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkUnitInfo entity by its id.
func (c *WorkUnitInfoClient) Get(ctx context.Context, id uuid.UUID) (*WorkUnitInfo, error) {
	return c.Query().Where(workunitinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkUnitInfoClient) GetX(ctx context.Context, id uuid.UUID) *WorkUnitInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAddress queries the address edge of a WorkUnitInfo.
func (c *WorkUnitInfoClient) QueryAddress(wui *WorkUnitInfo) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wui.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workunitinfo.Table, workunitinfo.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workunitinfo.AddressTable, workunitinfo.AddressColumn),
		)
		fromV = sqlgraph.Neighbors(wui.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkUnitInfoClient) Hooks() []Hook {
	return c.hooks.WorkUnitInfo
}

// Interceptors returns the client interceptors.
func (c *WorkUnitInfoClient) Interceptors() []Interceptor {
	return c.inters.WorkUnitInfo
}

func (c *WorkUnitInfoClient) mutate(ctx context.Context, m *WorkUnitInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkUnitInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkUnitInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkUnitInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkUnitInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkUnitInfo mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Address, Conversation, Invoice, InvoiceHistory, Message, Order, OrderHistory,
		OrderItem, OrderStatusCode, Person, PersonAddress, ProductColor, ProductImage,
		ProductInfo, ProductQty, ProductTag, Shipment, ShipmentHistory, ShipmentItem,
		Tag, WarehouseAssignment, WorkUnitInfo []ent.Hook
	}
	inters struct {
		Address, Conversation, Invoice, InvoiceHistory, Message, Order, OrderHistory,
		OrderItem, OrderStatusCode, Person, PersonAddress, ProductColor, ProductImage,
		ProductInfo, ProductQty, ProductTag, Shipment, ShipmentHistory, ShipmentItem,
		Tag, WarehouseAssignment, WorkUnitInfo []ent.Interceptor
	}
)
