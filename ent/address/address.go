// Code generated by ent, DO NOT EDIT.

package address

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the address type in the database.
	Label = "address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLine1 holds the string denoting the line1 field in the database.
	FieldLine1 = "line1"
	// FieldLine2 holds the string denoting the line2 field in the database.
	FieldLine2 = "line2"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldStateOrProvince holds the string denoting the state_or_province field in the database.
	FieldStateOrProvince = "state_or_province"
	// FieldZipOrPostcode holds the string denoting the zip_or_postcode field in the database.
	FieldZipOrPostcode = "zip_or_postcode"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldOtherAddressDetails holds the string denoting the other_address_details field in the database.
	FieldOtherAddressDetails = "other_address_details"
	// EdgePersons holds the string denoting the persons edge name in mutations.
	EdgePersons = "persons"
	// EdgePersonAddresses holds the string denoting the person_addresses edge name in mutations.
	EdgePersonAddresses = "person_addresses"
	// Table holds the table name of the address in the database.
	Table = "addresses"
	// PersonsTable is the table that holds the persons relation/edge. The primary key declared below.
	PersonsTable = "person_addresses"
	// PersonsInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PersonsInverseTable = "persons"
	// PersonAddressesTable is the table that holds the person_addresses relation/edge.
	PersonAddressesTable = "person_addresses"
	// PersonAddressesInverseTable is the table name for the PersonAddress entity.
	// It exists in this package in order to avoid circular dependency with the "personaddress" package.
	PersonAddressesInverseTable = "person_addresses"
	// PersonAddressesColumn is the table column denoting the person_addresses relation/edge.
	PersonAddressesColumn = "address_id"
)

// Columns holds all SQL columns for address fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldLine1,
	FieldLine2,
	FieldCity,
	FieldStateOrProvince,
	FieldZipOrPostcode,
	FieldCountry,
	FieldOtherAddressDetails,
}

var (
	// PersonsPrimaryKey and PersonsColumn2 are the table columns denoting the
	// primary key for the persons relation (M2M).
	PersonsPrimaryKey = []string{"person_id", "address_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// Line1Validator is a validator for the "line1" field. It is called by the builders before save.
	Line1Validator func(string) error
	// CityValidator is a validator for the "city" field. It is called by the builders before save.
	CityValidator func(string) error
	// StateOrProvinceValidator is a validator for the "state_or_province" field. It is called by the builders before save.
	StateOrProvinceValidator func(string) error
	// ZipOrPostcodeValidator is a validator for the "zip_or_postcode" field. It is called by the builders before save.
	ZipOrPostcodeValidator func(string) error
	// CountryValidator is a validator for the "country" field. It is called by the builders before save.
	CountryValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Address queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLine1 orders the results by the line1 field.
func ByLine1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLine1, opts...).ToFunc()
}

// ByLine2 orders the results by the line2 field.
func ByLine2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLine2, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByStateOrProvince orders the results by the state_or_province field.
func ByStateOrProvince(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStateOrProvince, opts...).ToFunc()
}

// ByZipOrPostcode orders the results by the zip_or_postcode field.
func ByZipOrPostcode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZipOrPostcode, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByOtherAddressDetails orders the results by the other_address_details field.
func ByOtherAddressDetails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOtherAddressDetails, opts...).ToFunc()
}

// ByPersonsCount orders the results by persons count.
func ByPersonsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPersonsStep(), opts...)
	}
}

// ByPersons orders the results by persons terms.
func ByPersons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPersonAddressesCount orders the results by person_addresses count.
func ByPersonAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPersonAddressesStep(), opts...)
	}
}

// ByPersonAddresses orders the results by person_addresses terms.
func ByPersonAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPersonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PersonsTable, PersonsPrimaryKey...),
	)
}
func newPersonAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonAddressesInverseTable, PersonAddressesColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, PersonAddressesTable, PersonAddressesColumn),
	)
}
