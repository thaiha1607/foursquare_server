// Code generated by ent, DO NOT EDIT.

package orderstatuscode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldEQ(FieldUpdatedAt, v))
}

// OrderStatus applies equality check predicate on the "order_status" field. It's identical to OrderStatusEQ.
func OrderStatus(v string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldEQ(FieldOrderStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldLTE(FieldUpdatedAt, v))
}

// OrderStatusEQ applies the EQ predicate on the "order_status" field.
func OrderStatusEQ(v string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldEQ(FieldOrderStatus, v))
}

// OrderStatusNEQ applies the NEQ predicate on the "order_status" field.
func OrderStatusNEQ(v string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldNEQ(FieldOrderStatus, v))
}

// OrderStatusIn applies the In predicate on the "order_status" field.
func OrderStatusIn(vs ...string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldIn(FieldOrderStatus, vs...))
}

// OrderStatusNotIn applies the NotIn predicate on the "order_status" field.
func OrderStatusNotIn(vs ...string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldNotIn(FieldOrderStatus, vs...))
}

// OrderStatusGT applies the GT predicate on the "order_status" field.
func OrderStatusGT(v string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldGT(FieldOrderStatus, v))
}

// OrderStatusGTE applies the GTE predicate on the "order_status" field.
func OrderStatusGTE(v string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldGTE(FieldOrderStatus, v))
}

// OrderStatusLT applies the LT predicate on the "order_status" field.
func OrderStatusLT(v string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldLT(FieldOrderStatus, v))
}

// OrderStatusLTE applies the LTE predicate on the "order_status" field.
func OrderStatusLTE(v string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldLTE(FieldOrderStatus, v))
}

// OrderStatusContains applies the Contains predicate on the "order_status" field.
func OrderStatusContains(v string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldContains(FieldOrderStatus, v))
}

// OrderStatusHasPrefix applies the HasPrefix predicate on the "order_status" field.
func OrderStatusHasPrefix(v string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldHasPrefix(FieldOrderStatus, v))
}

// OrderStatusHasSuffix applies the HasSuffix predicate on the "order_status" field.
func OrderStatusHasSuffix(v string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldHasSuffix(FieldOrderStatus, v))
}

// OrderStatusEqualFold applies the EqualFold predicate on the "order_status" field.
func OrderStatusEqualFold(v string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldEqualFold(FieldOrderStatus, v))
}

// OrderStatusContainsFold applies the ContainsFold predicate on the "order_status" field.
func OrderStatusContainsFold(v string) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.FieldContainsFold(FieldOrderStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderStatusCode) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderStatusCode) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderStatusCode) predicate.OrderStatusCode {
	return predicate.OrderStatusCode(sql.NotPredicates(p))
}
