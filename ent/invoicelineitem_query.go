// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/invoice"
	"github.com/thaiha1607/foursquare_server/ent/invoicelineitem"
	"github.com/thaiha1607/foursquare_server/ent/orderlineitem"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// InvoiceLineItemQuery is the builder for querying InvoiceLineItem entities.
type InvoiceLineItemQuery struct {
	config
	ctx               *QueryContext
	order             []invoicelineitem.OrderOption
	inters            []Interceptor
	predicates        []predicate.InvoiceLineItem
	withInvoice       *InvoiceQuery
	withOrderLineItem *OrderLineItemQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InvoiceLineItemQuery builder.
func (iliq *InvoiceLineItemQuery) Where(ps ...predicate.InvoiceLineItem) *InvoiceLineItemQuery {
	iliq.predicates = append(iliq.predicates, ps...)
	return iliq
}

// Limit the number of records to be returned by this query.
func (iliq *InvoiceLineItemQuery) Limit(limit int) *InvoiceLineItemQuery {
	iliq.ctx.Limit = &limit
	return iliq
}

// Offset to start from.
func (iliq *InvoiceLineItemQuery) Offset(offset int) *InvoiceLineItemQuery {
	iliq.ctx.Offset = &offset
	return iliq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iliq *InvoiceLineItemQuery) Unique(unique bool) *InvoiceLineItemQuery {
	iliq.ctx.Unique = &unique
	return iliq
}

// Order specifies how the records should be ordered.
func (iliq *InvoiceLineItemQuery) Order(o ...invoicelineitem.OrderOption) *InvoiceLineItemQuery {
	iliq.order = append(iliq.order, o...)
	return iliq
}

// QueryInvoice chains the current query on the "invoice" edge.
func (iliq *InvoiceLineItemQuery) QueryInvoice() *InvoiceQuery {
	query := (&InvoiceClient{config: iliq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iliq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iliq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invoicelineitem.Table, invoicelineitem.FieldID, selector),
			sqlgraph.To(invoice.Table, invoice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invoicelineitem.InvoiceTable, invoicelineitem.InvoiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(iliq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderLineItem chains the current query on the "order_line_item" edge.
func (iliq *InvoiceLineItemQuery) QueryOrderLineItem() *OrderLineItemQuery {
	query := (&OrderLineItemClient{config: iliq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iliq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iliq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(invoicelineitem.Table, invoicelineitem.FieldID, selector),
			sqlgraph.To(orderlineitem.Table, orderlineitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, invoicelineitem.OrderLineItemTable, invoicelineitem.OrderLineItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(iliq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InvoiceLineItem entity from the query.
// Returns a *NotFoundError when no InvoiceLineItem was found.
func (iliq *InvoiceLineItemQuery) First(ctx context.Context) (*InvoiceLineItem, error) {
	nodes, err := iliq.Limit(1).All(setContextOp(ctx, iliq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{invoicelineitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iliq *InvoiceLineItemQuery) FirstX(ctx context.Context) *InvoiceLineItem {
	node, err := iliq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InvoiceLineItem ID from the query.
// Returns a *NotFoundError when no InvoiceLineItem ID was found.
func (iliq *InvoiceLineItemQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iliq.Limit(1).IDs(setContextOp(ctx, iliq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{invoicelineitem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iliq *InvoiceLineItemQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := iliq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InvoiceLineItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InvoiceLineItem entity is found.
// Returns a *NotFoundError when no InvoiceLineItem entities are found.
func (iliq *InvoiceLineItemQuery) Only(ctx context.Context) (*InvoiceLineItem, error) {
	nodes, err := iliq.Limit(2).All(setContextOp(ctx, iliq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{invoicelineitem.Label}
	default:
		return nil, &NotSingularError{invoicelineitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iliq *InvoiceLineItemQuery) OnlyX(ctx context.Context) *InvoiceLineItem {
	node, err := iliq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InvoiceLineItem ID in the query.
// Returns a *NotSingularError when more than one InvoiceLineItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (iliq *InvoiceLineItemQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = iliq.Limit(2).IDs(setContextOp(ctx, iliq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{invoicelineitem.Label}
	default:
		err = &NotSingularError{invoicelineitem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iliq *InvoiceLineItemQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := iliq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InvoiceLineItems.
func (iliq *InvoiceLineItemQuery) All(ctx context.Context) ([]*InvoiceLineItem, error) {
	ctx = setContextOp(ctx, iliq.ctx, "All")
	if err := iliq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*InvoiceLineItem, *InvoiceLineItemQuery]()
	return withInterceptors[[]*InvoiceLineItem](ctx, iliq, qr, iliq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iliq *InvoiceLineItemQuery) AllX(ctx context.Context) []*InvoiceLineItem {
	nodes, err := iliq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InvoiceLineItem IDs.
func (iliq *InvoiceLineItemQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if iliq.ctx.Unique == nil && iliq.path != nil {
		iliq.Unique(true)
	}
	ctx = setContextOp(ctx, iliq.ctx, "IDs")
	if err = iliq.Select(invoicelineitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iliq *InvoiceLineItemQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := iliq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iliq *InvoiceLineItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, iliq.ctx, "Count")
	if err := iliq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iliq, querierCount[*InvoiceLineItemQuery](), iliq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iliq *InvoiceLineItemQuery) CountX(ctx context.Context) int {
	count, err := iliq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iliq *InvoiceLineItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, iliq.ctx, "Exist")
	switch _, err := iliq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iliq *InvoiceLineItemQuery) ExistX(ctx context.Context) bool {
	exist, err := iliq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InvoiceLineItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iliq *InvoiceLineItemQuery) Clone() *InvoiceLineItemQuery {
	if iliq == nil {
		return nil
	}
	return &InvoiceLineItemQuery{
		config:            iliq.config,
		ctx:               iliq.ctx.Clone(),
		order:             append([]invoicelineitem.OrderOption{}, iliq.order...),
		inters:            append([]Interceptor{}, iliq.inters...),
		predicates:        append([]predicate.InvoiceLineItem{}, iliq.predicates...),
		withInvoice:       iliq.withInvoice.Clone(),
		withOrderLineItem: iliq.withOrderLineItem.Clone(),
		// clone intermediate query.
		sql:  iliq.sql.Clone(),
		path: iliq.path,
	}
}

// WithInvoice tells the query-builder to eager-load the nodes that are connected to
// the "invoice" edge. The optional arguments are used to configure the query builder of the edge.
func (iliq *InvoiceLineItemQuery) WithInvoice(opts ...func(*InvoiceQuery)) *InvoiceLineItemQuery {
	query := (&InvoiceClient{config: iliq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iliq.withInvoice = query
	return iliq
}

// WithOrderLineItem tells the query-builder to eager-load the nodes that are connected to
// the "order_line_item" edge. The optional arguments are used to configure the query builder of the edge.
func (iliq *InvoiceLineItemQuery) WithOrderLineItem(opts ...func(*OrderLineItemQuery)) *InvoiceLineItemQuery {
	query := (&OrderLineItemClient{config: iliq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iliq.withOrderLineItem = query
	return iliq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		InvoiceID uuid.UUID `json:"invoice_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InvoiceLineItem.Query().
//		GroupBy(invoicelineitem.FieldInvoiceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iliq *InvoiceLineItemQuery) GroupBy(field string, fields ...string) *InvoiceLineItemGroupBy {
	iliq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &InvoiceLineItemGroupBy{build: iliq}
	grbuild.flds = &iliq.ctx.Fields
	grbuild.label = invoicelineitem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		InvoiceID uuid.UUID `json:"invoice_id,omitempty"`
//	}
//
//	client.InvoiceLineItem.Query().
//		Select(invoicelineitem.FieldInvoiceID).
//		Scan(ctx, &v)
func (iliq *InvoiceLineItemQuery) Select(fields ...string) *InvoiceLineItemSelect {
	iliq.ctx.Fields = append(iliq.ctx.Fields, fields...)
	sbuild := &InvoiceLineItemSelect{InvoiceLineItemQuery: iliq}
	sbuild.label = invoicelineitem.Label
	sbuild.flds, sbuild.scan = &iliq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a InvoiceLineItemSelect configured with the given aggregations.
func (iliq *InvoiceLineItemQuery) Aggregate(fns ...AggregateFunc) *InvoiceLineItemSelect {
	return iliq.Select().Aggregate(fns...)
}

func (iliq *InvoiceLineItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iliq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iliq); err != nil {
				return err
			}
		}
	}
	for _, f := range iliq.ctx.Fields {
		if !invoicelineitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iliq.path != nil {
		prev, err := iliq.path(ctx)
		if err != nil {
			return err
		}
		iliq.sql = prev
	}
	return nil
}

func (iliq *InvoiceLineItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*InvoiceLineItem, error) {
	var (
		nodes       = []*InvoiceLineItem{}
		_spec       = iliq.querySpec()
		loadedTypes = [2]bool{
			iliq.withInvoice != nil,
			iliq.withOrderLineItem != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*InvoiceLineItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &InvoiceLineItem{config: iliq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iliq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iliq.withInvoice; query != nil {
		if err := iliq.loadInvoice(ctx, query, nodes, nil,
			func(n *InvoiceLineItem, e *Invoice) { n.Edges.Invoice = e }); err != nil {
			return nil, err
		}
	}
	if query := iliq.withOrderLineItem; query != nil {
		if err := iliq.loadOrderLineItem(ctx, query, nodes, nil,
			func(n *InvoiceLineItem, e *OrderLineItem) { n.Edges.OrderLineItem = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iliq *InvoiceLineItemQuery) loadInvoice(ctx context.Context, query *InvoiceQuery, nodes []*InvoiceLineItem, init func(*InvoiceLineItem), assign func(*InvoiceLineItem, *Invoice)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*InvoiceLineItem)
	for i := range nodes {
		fk := nodes[i].InvoiceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(invoice.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "invoice_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (iliq *InvoiceLineItemQuery) loadOrderLineItem(ctx context.Context, query *OrderLineItemQuery, nodes []*InvoiceLineItem, init func(*InvoiceLineItem), assign func(*InvoiceLineItem, *OrderLineItem)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*InvoiceLineItem)
	for i := range nodes {
		fk := nodes[i].OrderLineItemID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(orderlineitem.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_line_item_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (iliq *InvoiceLineItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iliq.querySpec()
	_spec.Node.Columns = iliq.ctx.Fields
	if len(iliq.ctx.Fields) > 0 {
		_spec.Unique = iliq.ctx.Unique != nil && *iliq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, iliq.driver, _spec)
}

func (iliq *InvoiceLineItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(invoicelineitem.Table, invoicelineitem.Columns, sqlgraph.NewFieldSpec(invoicelineitem.FieldID, field.TypeUUID))
	_spec.From = iliq.sql
	if unique := iliq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if iliq.path != nil {
		_spec.Unique = true
	}
	if fields := iliq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoicelineitem.FieldID)
		for i := range fields {
			if fields[i] != invoicelineitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if iliq.withInvoice != nil {
			_spec.Node.AddColumnOnce(invoicelineitem.FieldInvoiceID)
		}
		if iliq.withOrderLineItem != nil {
			_spec.Node.AddColumnOnce(invoicelineitem.FieldOrderLineItemID)
		}
	}
	if ps := iliq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iliq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iliq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iliq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iliq *InvoiceLineItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iliq.driver.Dialect())
	t1 := builder.Table(invoicelineitem.Table)
	columns := iliq.ctx.Fields
	if len(columns) == 0 {
		columns = invoicelineitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iliq.sql != nil {
		selector = iliq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iliq.ctx.Unique != nil && *iliq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range iliq.predicates {
		p(selector)
	}
	for _, p := range iliq.order {
		p(selector)
	}
	if offset := iliq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iliq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// InvoiceLineItemGroupBy is the group-by builder for InvoiceLineItem entities.
type InvoiceLineItemGroupBy struct {
	selector
	build *InvoiceLineItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iligb *InvoiceLineItemGroupBy) Aggregate(fns ...AggregateFunc) *InvoiceLineItemGroupBy {
	iligb.fns = append(iligb.fns, fns...)
	return iligb
}

// Scan applies the selector query and scans the result into the given value.
func (iligb *InvoiceLineItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, iligb.build.ctx, "GroupBy")
	if err := iligb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InvoiceLineItemQuery, *InvoiceLineItemGroupBy](ctx, iligb.build, iligb, iligb.build.inters, v)
}

func (iligb *InvoiceLineItemGroupBy) sqlScan(ctx context.Context, root *InvoiceLineItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(iligb.fns))
	for _, fn := range iligb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*iligb.flds)+len(iligb.fns))
		for _, f := range *iligb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*iligb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iligb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// InvoiceLineItemSelect is the builder for selecting fields of InvoiceLineItem entities.
type InvoiceLineItemSelect struct {
	*InvoiceLineItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ilis *InvoiceLineItemSelect) Aggregate(fns ...AggregateFunc) *InvoiceLineItemSelect {
	ilis.fns = append(ilis.fns, fns...)
	return ilis
}

// Scan applies the selector query and scans the result into the given value.
func (ilis *InvoiceLineItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ilis.ctx, "Select")
	if err := ilis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InvoiceLineItemQuery, *InvoiceLineItemSelect](ctx, ilis.InvoiceLineItemQuery, ilis, ilis.inters, v)
}

func (ilis *InvoiceLineItemSelect) sqlScan(ctx context.Context, root *InvoiceLineItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ilis.fns))
	for _, fn := range ilis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ilis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ilis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
