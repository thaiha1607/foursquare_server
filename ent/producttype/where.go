// Code generated by ent, DO NOT EDIT.

package producttype

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductType {
	return predicate.ProductType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductType {
	return predicate.ProductType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductType {
	return predicate.ProductType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductType {
	return predicate.ProductType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductType {
	return predicate.ProductType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductType {
	return predicate.ProductType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductType {
	return predicate.ProductType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductType {
	return predicate.ProductType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductType {
	return predicate.ProductType(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProductType applies equality check predicate on the "product_type" field. It's identical to ProductTypeEQ.
func ProductType(v string) predicate.ProductType {
	return predicate.ProductType(sql.FieldEQ(FieldProductType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProductType {
	return predicate.ProductType(sql.FieldLTE(FieldUpdatedAt, v))
}

// ProductTypeEQ applies the EQ predicate on the "product_type" field.
func ProductTypeEQ(v string) predicate.ProductType {
	return predicate.ProductType(sql.FieldEQ(FieldProductType, v))
}

// ProductTypeNEQ applies the NEQ predicate on the "product_type" field.
func ProductTypeNEQ(v string) predicate.ProductType {
	return predicate.ProductType(sql.FieldNEQ(FieldProductType, v))
}

// ProductTypeIn applies the In predicate on the "product_type" field.
func ProductTypeIn(vs ...string) predicate.ProductType {
	return predicate.ProductType(sql.FieldIn(FieldProductType, vs...))
}

// ProductTypeNotIn applies the NotIn predicate on the "product_type" field.
func ProductTypeNotIn(vs ...string) predicate.ProductType {
	return predicate.ProductType(sql.FieldNotIn(FieldProductType, vs...))
}

// ProductTypeGT applies the GT predicate on the "product_type" field.
func ProductTypeGT(v string) predicate.ProductType {
	return predicate.ProductType(sql.FieldGT(FieldProductType, v))
}

// ProductTypeGTE applies the GTE predicate on the "product_type" field.
func ProductTypeGTE(v string) predicate.ProductType {
	return predicate.ProductType(sql.FieldGTE(FieldProductType, v))
}

// ProductTypeLT applies the LT predicate on the "product_type" field.
func ProductTypeLT(v string) predicate.ProductType {
	return predicate.ProductType(sql.FieldLT(FieldProductType, v))
}

// ProductTypeLTE applies the LTE predicate on the "product_type" field.
func ProductTypeLTE(v string) predicate.ProductType {
	return predicate.ProductType(sql.FieldLTE(FieldProductType, v))
}

// ProductTypeContains applies the Contains predicate on the "product_type" field.
func ProductTypeContains(v string) predicate.ProductType {
	return predicate.ProductType(sql.FieldContains(FieldProductType, v))
}

// ProductTypeHasPrefix applies the HasPrefix predicate on the "product_type" field.
func ProductTypeHasPrefix(v string) predicate.ProductType {
	return predicate.ProductType(sql.FieldHasPrefix(FieldProductType, v))
}

// ProductTypeHasSuffix applies the HasSuffix predicate on the "product_type" field.
func ProductTypeHasSuffix(v string) predicate.ProductType {
	return predicate.ProductType(sql.FieldHasSuffix(FieldProductType, v))
}

// ProductTypeEqualFold applies the EqualFold predicate on the "product_type" field.
func ProductTypeEqualFold(v string) predicate.ProductType {
	return predicate.ProductType(sql.FieldEqualFold(FieldProductType, v))
}

// ProductTypeContainsFold applies the ContainsFold predicate on the "product_type" field.
func ProductTypeContainsFold(v string) predicate.ProductType {
	return predicate.ProductType(sql.FieldContainsFold(FieldProductType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductType) predicate.ProductType {
	return predicate.ProductType(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductType) predicate.ProductType {
	return predicate.ProductType(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductType) predicate.ProductType {
	return predicate.ProductType(sql.NotPredicates(p))
}
