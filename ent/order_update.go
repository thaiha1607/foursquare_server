// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/order"
	"github.com/thaiha1607/foursquare_server/ent/orderstatuscode"
	"github.com/thaiha1607/foursquare_server/ent/ordertype"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/user"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetCustomerID sets the "customer_id" field.
func (ou *OrderUpdate) SetCustomerID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetCustomerID(u)
	return ou
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCustomerID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetCustomerID(*u)
	}
	return ou
}

// SetNote sets the "note" field.
func (ou *OrderUpdate) SetNote(s string) *OrderUpdate {
	ou.mutation.SetNote(s)
	return ou
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableNote(s *string) *OrderUpdate {
	if s != nil {
		ou.SetNote(*s)
	}
	return ou
}

// ClearNote clears the value of the "note" field.
func (ou *OrderUpdate) ClearNote() *OrderUpdate {
	ou.mutation.ClearNote()
	return ou
}

// SetCreatedBy sets the "created_by" field.
func (ou *OrderUpdate) SetCreatedBy(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetCreatedBy(u)
	return ou
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedBy(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetCreatedBy(*u)
	}
	return ou
}

// SetParentOrderID sets the "parent_order_id" field.
func (ou *OrderUpdate) SetParentOrderID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetParentOrderID(u)
	return ou
}

// SetNillableParentOrderID sets the "parent_order_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableParentOrderID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetParentOrderID(*u)
	}
	return ou
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (ou *OrderUpdate) ClearParentOrderID() *OrderUpdate {
	ou.mutation.ClearParentOrderID()
	return ou
}

// SetPriority sets the "priority" field.
func (ou *OrderUpdate) SetPriority(i int) *OrderUpdate {
	ou.mutation.ResetPriority()
	ou.mutation.SetPriority(i)
	return ou
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePriority(i *int) *OrderUpdate {
	if i != nil {
		ou.SetPriority(*i)
	}
	return ou
}

// AddPriority adds i to the "priority" field.
func (ou *OrderUpdate) AddPriority(i int) *OrderUpdate {
	ou.mutation.AddPriority(i)
	return ou
}

// SetType sets the "type" field.
func (ou *OrderUpdate) SetType(i int) *OrderUpdate {
	ou.mutation.SetType(i)
	return ou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableType(i *int) *OrderUpdate {
	if i != nil {
		ou.SetType(*i)
	}
	return ou
}

// SetStatusCode sets the "status_code" field.
func (ou *OrderUpdate) SetStatusCode(i int) *OrderUpdate {
	ou.mutation.SetStatusCode(i)
	return ou
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatusCode(i *int) *OrderUpdate {
	if i != nil {
		ou.SetStatusCode(*i)
	}
	return ou
}

// SetManaagmentStaffID sets the "manaagment_staff_id" field.
func (ou *OrderUpdate) SetManaagmentStaffID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetManaagmentStaffID(u)
	return ou
}

// SetNillableManaagmentStaffID sets the "manaagment_staff_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableManaagmentStaffID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetManaagmentStaffID(*u)
	}
	return ou
}

// SetWarehouseStaffID sets the "warehouse_staff_id" field.
func (ou *OrderUpdate) SetWarehouseStaffID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetWarehouseStaffID(u)
	return ou
}

// SetNillableWarehouseStaffID sets the "warehouse_staff_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableWarehouseStaffID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetWarehouseStaffID(*u)
	}
	return ou
}

// ClearWarehouseStaffID clears the value of the "warehouse_staff_id" field.
func (ou *OrderUpdate) ClearWarehouseStaffID() *OrderUpdate {
	ou.mutation.ClearWarehouseStaffID()
	return ou
}

// SetDeliveryStaffID sets the "delivery_staff_id" field.
func (ou *OrderUpdate) SetDeliveryStaffID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetDeliveryStaffID(u)
	return ou
}

// SetNillableDeliveryStaffID sets the "delivery_staff_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliveryStaffID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetDeliveryStaffID(*u)
	}
	return ou
}

// ClearDeliveryStaffID clears the value of the "delivery_staff_id" field.
func (ou *OrderUpdate) ClearDeliveryStaffID() *OrderUpdate {
	ou.mutation.ClearDeliveryStaffID()
	return ou
}

// SetInternalNote sets the "internal_note" field.
func (ou *OrderUpdate) SetInternalNote(s string) *OrderUpdate {
	ou.mutation.SetInternalNote(s)
	return ou
}

// SetNillableInternalNote sets the "internal_note" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableInternalNote(s *string) *OrderUpdate {
	if s != nil {
		ou.SetInternalNote(*s)
	}
	return ou
}

// ClearInternalNote clears the value of the "internal_note" field.
func (ou *OrderUpdate) ClearInternalNote() *OrderUpdate {
	ou.mutation.ClearInternalNote()
	return ou
}

// SetIsInternal sets the "is_internal" field.
func (ou *OrderUpdate) SetIsInternal(b bool) *OrderUpdate {
	ou.mutation.SetIsInternal(b)
	return ou
}

// SetNillableIsInternal sets the "is_internal" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableIsInternal(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetIsInternal(*b)
	}
	return ou
}

// SetCustomer sets the "customer" edge to the User entity.
func (ou *OrderUpdate) SetCustomer(u *User) *OrderUpdate {
	return ou.SetCustomerID(u.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (ou *OrderUpdate) SetCreatorID(id uuid.UUID) *OrderUpdate {
	ou.mutation.SetCreatorID(id)
	return ou
}

// SetCreator sets the "creator" edge to the User entity.
func (ou *OrderUpdate) SetCreator(u *User) *OrderUpdate {
	return ou.SetCreatorID(u.ID)
}

// SetParentOrder sets the "parent_order" edge to the Order entity.
func (ou *OrderUpdate) SetParentOrder(o *Order) *OrderUpdate {
	return ou.SetParentOrderID(o.ID)
}

// SetOrderStatusID sets the "order_status" edge to the OrderStatusCode entity by ID.
func (ou *OrderUpdate) SetOrderStatusID(id int) *OrderUpdate {
	ou.mutation.SetOrderStatusID(id)
	return ou
}

// SetOrderStatus sets the "order_status" edge to the OrderStatusCode entity.
func (ou *OrderUpdate) SetOrderStatus(o *OrderStatusCode) *OrderUpdate {
	return ou.SetOrderStatusID(o.ID)
}

// SetOrderTypeID sets the "order_type" edge to the OrderType entity by ID.
func (ou *OrderUpdate) SetOrderTypeID(id int) *OrderUpdate {
	ou.mutation.SetOrderTypeID(id)
	return ou
}

// SetOrderType sets the "order_type" edge to the OrderType entity.
func (ou *OrderUpdate) SetOrderType(o *OrderType) *OrderUpdate {
	return ou.SetOrderTypeID(o.ID)
}

// SetManagementStaffID sets the "management_staff" edge to the User entity by ID.
func (ou *OrderUpdate) SetManagementStaffID(id uuid.UUID) *OrderUpdate {
	ou.mutation.SetManagementStaffID(id)
	return ou
}

// SetManagementStaff sets the "management_staff" edge to the User entity.
func (ou *OrderUpdate) SetManagementStaff(u *User) *OrderUpdate {
	return ou.SetManagementStaffID(u.ID)
}

// SetWarehouseStaff sets the "warehouse_staff" edge to the User entity.
func (ou *OrderUpdate) SetWarehouseStaff(u *User) *OrderUpdate {
	return ou.SetWarehouseStaffID(u.ID)
}

// SetDeliveryStaff sets the "delivery_staff" edge to the User entity.
func (ou *OrderUpdate) SetDeliveryStaff(u *User) *OrderUpdate {
	return ou.SetDeliveryStaffID(u.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearCustomer clears the "customer" edge to the User entity.
func (ou *OrderUpdate) ClearCustomer() *OrderUpdate {
	ou.mutation.ClearCustomer()
	return ou
}

// ClearCreator clears the "creator" edge to the User entity.
func (ou *OrderUpdate) ClearCreator() *OrderUpdate {
	ou.mutation.ClearCreator()
	return ou
}

// ClearParentOrder clears the "parent_order" edge to the Order entity.
func (ou *OrderUpdate) ClearParentOrder() *OrderUpdate {
	ou.mutation.ClearParentOrder()
	return ou
}

// ClearOrderStatus clears the "order_status" edge to the OrderStatusCode entity.
func (ou *OrderUpdate) ClearOrderStatus() *OrderUpdate {
	ou.mutation.ClearOrderStatus()
	return ou
}

// ClearOrderType clears the "order_type" edge to the OrderType entity.
func (ou *OrderUpdate) ClearOrderType() *OrderUpdate {
	ou.mutation.ClearOrderType()
	return ou
}

// ClearManagementStaff clears the "management_staff" edge to the User entity.
func (ou *OrderUpdate) ClearManagementStaff() *OrderUpdate {
	ou.mutation.ClearManagementStaff()
	return ou
}

// ClearWarehouseStaff clears the "warehouse_staff" edge to the User entity.
func (ou *OrderUpdate) ClearWarehouseStaff() *OrderUpdate {
	ou.mutation.ClearWarehouseStaff()
	return ou
}

// ClearDeliveryStaff clears the "delivery_staff" edge to the User entity.
func (ou *OrderUpdate) ClearDeliveryStaff() *OrderUpdate {
	ou.mutation.ClearDeliveryStaff()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.Priority(); ok {
		if err := order.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Order.priority": %w`, err)}
		}
	}
	if _, ok := ou.mutation.CustomerID(); ou.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.customer"`)
	}
	if _, ok := ou.mutation.CreatorID(); ou.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.creator"`)
	}
	if _, ok := ou.mutation.OrderStatusID(); ou.mutation.OrderStatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.order_status"`)
	}
	if _, ok := ou.mutation.OrderTypeID(); ou.mutation.OrderTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.order_type"`)
	}
	if _, ok := ou.mutation.ManagementStaffID(); ou.mutation.ManagementStaffCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.management_staff"`)
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Note(); ok {
		_spec.SetField(order.FieldNote, field.TypeString, value)
	}
	if ou.mutation.NoteCleared() {
		_spec.ClearField(order.FieldNote, field.TypeString)
	}
	if value, ok := ou.mutation.Priority(); ok {
		_spec.SetField(order.FieldPriority, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedPriority(); ok {
		_spec.AddField(order.FieldPriority, field.TypeInt, value)
	}
	if value, ok := ou.mutation.InternalNote(); ok {
		_spec.SetField(order.FieldInternalNote, field.TypeString, value)
	}
	if ou.mutation.InternalNoteCleared() {
		_spec.ClearField(order.FieldInternalNote, field.TypeString)
	}
	if value, ok := ou.mutation.IsInternal(); ok {
		_spec.SetField(order.FieldIsInternal, field.TypeBool, value)
	}
	if ou.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CreatorTable,
			Columns: []string{order.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CreatorTable,
			Columns: []string{order.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ParentOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.ParentOrderTable,
			Columns: []string{order.ParentOrderColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ParentOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.ParentOrderTable,
			Columns: []string{order.ParentOrderColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.OrderStatusTable,
			Columns: []string{order.OrderStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.OrderStatusTable,
			Columns: []string{order.OrderStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.OrderTypeTable,
			Columns: []string{order.OrderTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordertype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.OrderTypeTable,
			Columns: []string{order.OrderTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordertype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ManagementStaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.ManagementStaffTable,
			Columns: []string{order.ManagementStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ManagementStaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.ManagementStaffTable,
			Columns: []string{order.ManagementStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.WarehouseStaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.WarehouseStaffTable,
			Columns: []string{order.WarehouseStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.WarehouseStaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.WarehouseStaffTable,
			Columns: []string{order.WarehouseStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.DeliveryStaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.DeliveryStaffTable,
			Columns: []string{order.DeliveryStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.DeliveryStaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.DeliveryStaffTable,
			Columns: []string{order.DeliveryStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetCustomerID sets the "customer_id" field.
func (ouo *OrderUpdateOne) SetCustomerID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetCustomerID(u)
	return ouo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCustomerID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetCustomerID(*u)
	}
	return ouo
}

// SetNote sets the "note" field.
func (ouo *OrderUpdateOne) SetNote(s string) *OrderUpdateOne {
	ouo.mutation.SetNote(s)
	return ouo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableNote(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetNote(*s)
	}
	return ouo
}

// ClearNote clears the value of the "note" field.
func (ouo *OrderUpdateOne) ClearNote() *OrderUpdateOne {
	ouo.mutation.ClearNote()
	return ouo
}

// SetCreatedBy sets the "created_by" field.
func (ouo *OrderUpdateOne) SetCreatedBy(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetCreatedBy(u)
	return ouo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetCreatedBy(*u)
	}
	return ouo
}

// SetParentOrderID sets the "parent_order_id" field.
func (ouo *OrderUpdateOne) SetParentOrderID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetParentOrderID(u)
	return ouo
}

// SetNillableParentOrderID sets the "parent_order_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableParentOrderID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetParentOrderID(*u)
	}
	return ouo
}

// ClearParentOrderID clears the value of the "parent_order_id" field.
func (ouo *OrderUpdateOne) ClearParentOrderID() *OrderUpdateOne {
	ouo.mutation.ClearParentOrderID()
	return ouo
}

// SetPriority sets the "priority" field.
func (ouo *OrderUpdateOne) SetPriority(i int) *OrderUpdateOne {
	ouo.mutation.ResetPriority()
	ouo.mutation.SetPriority(i)
	return ouo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePriority(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetPriority(*i)
	}
	return ouo
}

// AddPriority adds i to the "priority" field.
func (ouo *OrderUpdateOne) AddPriority(i int) *OrderUpdateOne {
	ouo.mutation.AddPriority(i)
	return ouo
}

// SetType sets the "type" field.
func (ouo *OrderUpdateOne) SetType(i int) *OrderUpdateOne {
	ouo.mutation.SetType(i)
	return ouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableType(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetType(*i)
	}
	return ouo
}

// SetStatusCode sets the "status_code" field.
func (ouo *OrderUpdateOne) SetStatusCode(i int) *OrderUpdateOne {
	ouo.mutation.SetStatusCode(i)
	return ouo
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatusCode(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetStatusCode(*i)
	}
	return ouo
}

// SetManaagmentStaffID sets the "manaagment_staff_id" field.
func (ouo *OrderUpdateOne) SetManaagmentStaffID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetManaagmentStaffID(u)
	return ouo
}

// SetNillableManaagmentStaffID sets the "manaagment_staff_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableManaagmentStaffID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetManaagmentStaffID(*u)
	}
	return ouo
}

// SetWarehouseStaffID sets the "warehouse_staff_id" field.
func (ouo *OrderUpdateOne) SetWarehouseStaffID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetWarehouseStaffID(u)
	return ouo
}

// SetNillableWarehouseStaffID sets the "warehouse_staff_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableWarehouseStaffID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetWarehouseStaffID(*u)
	}
	return ouo
}

// ClearWarehouseStaffID clears the value of the "warehouse_staff_id" field.
func (ouo *OrderUpdateOne) ClearWarehouseStaffID() *OrderUpdateOne {
	ouo.mutation.ClearWarehouseStaffID()
	return ouo
}

// SetDeliveryStaffID sets the "delivery_staff_id" field.
func (ouo *OrderUpdateOne) SetDeliveryStaffID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetDeliveryStaffID(u)
	return ouo
}

// SetNillableDeliveryStaffID sets the "delivery_staff_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliveryStaffID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetDeliveryStaffID(*u)
	}
	return ouo
}

// ClearDeliveryStaffID clears the value of the "delivery_staff_id" field.
func (ouo *OrderUpdateOne) ClearDeliveryStaffID() *OrderUpdateOne {
	ouo.mutation.ClearDeliveryStaffID()
	return ouo
}

// SetInternalNote sets the "internal_note" field.
func (ouo *OrderUpdateOne) SetInternalNote(s string) *OrderUpdateOne {
	ouo.mutation.SetInternalNote(s)
	return ouo
}

// SetNillableInternalNote sets the "internal_note" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableInternalNote(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetInternalNote(*s)
	}
	return ouo
}

// ClearInternalNote clears the value of the "internal_note" field.
func (ouo *OrderUpdateOne) ClearInternalNote() *OrderUpdateOne {
	ouo.mutation.ClearInternalNote()
	return ouo
}

// SetIsInternal sets the "is_internal" field.
func (ouo *OrderUpdateOne) SetIsInternal(b bool) *OrderUpdateOne {
	ouo.mutation.SetIsInternal(b)
	return ouo
}

// SetNillableIsInternal sets the "is_internal" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableIsInternal(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetIsInternal(*b)
	}
	return ouo
}

// SetCustomer sets the "customer" edge to the User entity.
func (ouo *OrderUpdateOne) SetCustomer(u *User) *OrderUpdateOne {
	return ouo.SetCustomerID(u.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (ouo *OrderUpdateOne) SetCreatorID(id uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetCreatorID(id)
	return ouo
}

// SetCreator sets the "creator" edge to the User entity.
func (ouo *OrderUpdateOne) SetCreator(u *User) *OrderUpdateOne {
	return ouo.SetCreatorID(u.ID)
}

// SetParentOrder sets the "parent_order" edge to the Order entity.
func (ouo *OrderUpdateOne) SetParentOrder(o *Order) *OrderUpdateOne {
	return ouo.SetParentOrderID(o.ID)
}

// SetOrderStatusID sets the "order_status" edge to the OrderStatusCode entity by ID.
func (ouo *OrderUpdateOne) SetOrderStatusID(id int) *OrderUpdateOne {
	ouo.mutation.SetOrderStatusID(id)
	return ouo
}

// SetOrderStatus sets the "order_status" edge to the OrderStatusCode entity.
func (ouo *OrderUpdateOne) SetOrderStatus(o *OrderStatusCode) *OrderUpdateOne {
	return ouo.SetOrderStatusID(o.ID)
}

// SetOrderTypeID sets the "order_type" edge to the OrderType entity by ID.
func (ouo *OrderUpdateOne) SetOrderTypeID(id int) *OrderUpdateOne {
	ouo.mutation.SetOrderTypeID(id)
	return ouo
}

// SetOrderType sets the "order_type" edge to the OrderType entity.
func (ouo *OrderUpdateOne) SetOrderType(o *OrderType) *OrderUpdateOne {
	return ouo.SetOrderTypeID(o.ID)
}

// SetManagementStaffID sets the "management_staff" edge to the User entity by ID.
func (ouo *OrderUpdateOne) SetManagementStaffID(id uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetManagementStaffID(id)
	return ouo
}

// SetManagementStaff sets the "management_staff" edge to the User entity.
func (ouo *OrderUpdateOne) SetManagementStaff(u *User) *OrderUpdateOne {
	return ouo.SetManagementStaffID(u.ID)
}

// SetWarehouseStaff sets the "warehouse_staff" edge to the User entity.
func (ouo *OrderUpdateOne) SetWarehouseStaff(u *User) *OrderUpdateOne {
	return ouo.SetWarehouseStaffID(u.ID)
}

// SetDeliveryStaff sets the "delivery_staff" edge to the User entity.
func (ouo *OrderUpdateOne) SetDeliveryStaff(u *User) *OrderUpdateOne {
	return ouo.SetDeliveryStaffID(u.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearCustomer clears the "customer" edge to the User entity.
func (ouo *OrderUpdateOne) ClearCustomer() *OrderUpdateOne {
	ouo.mutation.ClearCustomer()
	return ouo
}

// ClearCreator clears the "creator" edge to the User entity.
func (ouo *OrderUpdateOne) ClearCreator() *OrderUpdateOne {
	ouo.mutation.ClearCreator()
	return ouo
}

// ClearParentOrder clears the "parent_order" edge to the Order entity.
func (ouo *OrderUpdateOne) ClearParentOrder() *OrderUpdateOne {
	ouo.mutation.ClearParentOrder()
	return ouo
}

// ClearOrderStatus clears the "order_status" edge to the OrderStatusCode entity.
func (ouo *OrderUpdateOne) ClearOrderStatus() *OrderUpdateOne {
	ouo.mutation.ClearOrderStatus()
	return ouo
}

// ClearOrderType clears the "order_type" edge to the OrderType entity.
func (ouo *OrderUpdateOne) ClearOrderType() *OrderUpdateOne {
	ouo.mutation.ClearOrderType()
	return ouo
}

// ClearManagementStaff clears the "management_staff" edge to the User entity.
func (ouo *OrderUpdateOne) ClearManagementStaff() *OrderUpdateOne {
	ouo.mutation.ClearManagementStaff()
	return ouo
}

// ClearWarehouseStaff clears the "warehouse_staff" edge to the User entity.
func (ouo *OrderUpdateOne) ClearWarehouseStaff() *OrderUpdateOne {
	ouo.mutation.ClearWarehouseStaff()
	return ouo
}

// ClearDeliveryStaff clears the "delivery_staff" edge to the User entity.
func (ouo *OrderUpdateOne) ClearDeliveryStaff() *OrderUpdateOne {
	ouo.mutation.ClearDeliveryStaff()
	return ouo
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.Priority(); ok {
		if err := order.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Order.priority": %w`, err)}
		}
	}
	if _, ok := ouo.mutation.CustomerID(); ouo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.customer"`)
	}
	if _, ok := ouo.mutation.CreatorID(); ouo.mutation.CreatorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.creator"`)
	}
	if _, ok := ouo.mutation.OrderStatusID(); ouo.mutation.OrderStatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.order_status"`)
	}
	if _, ok := ouo.mutation.OrderTypeID(); ouo.mutation.OrderTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.order_type"`)
	}
	if _, ok := ouo.mutation.ManagementStaffID(); ouo.mutation.ManagementStaffCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.management_staff"`)
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Note(); ok {
		_spec.SetField(order.FieldNote, field.TypeString, value)
	}
	if ouo.mutation.NoteCleared() {
		_spec.ClearField(order.FieldNote, field.TypeString)
	}
	if value, ok := ouo.mutation.Priority(); ok {
		_spec.SetField(order.FieldPriority, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedPriority(); ok {
		_spec.AddField(order.FieldPriority, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.InternalNote(); ok {
		_spec.SetField(order.FieldInternalNote, field.TypeString, value)
	}
	if ouo.mutation.InternalNoteCleared() {
		_spec.ClearField(order.FieldInternalNote, field.TypeString)
	}
	if value, ok := ouo.mutation.IsInternal(); ok {
		_spec.SetField(order.FieldIsInternal, field.TypeBool, value)
	}
	if ouo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CreatorTable,
			Columns: []string{order.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CreatorTable,
			Columns: []string{order.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ParentOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.ParentOrderTable,
			Columns: []string{order.ParentOrderColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ParentOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.ParentOrderTable,
			Columns: []string{order.ParentOrderColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.OrderStatusTable,
			Columns: []string{order.OrderStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.OrderStatusTable,
			Columns: []string{order.OrderStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.OrderTypeTable,
			Columns: []string{order.OrderTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordertype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.OrderTypeTable,
			Columns: []string{order.OrderTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordertype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ManagementStaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.ManagementStaffTable,
			Columns: []string{order.ManagementStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ManagementStaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.ManagementStaffTable,
			Columns: []string{order.ManagementStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.WarehouseStaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.WarehouseStaffTable,
			Columns: []string{order.WarehouseStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.WarehouseStaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.WarehouseStaffTable,
			Columns: []string{order.WarehouseStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.DeliveryStaffCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.DeliveryStaffTable,
			Columns: []string{order.DeliveryStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.DeliveryStaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.DeliveryStaffTable,
			Columns: []string{order.DeliveryStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
