// Code generated by ent, DO NOT EDIT.

package orderitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldOrderID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldProductID, v))
}

// ProductColorID applies equality check predicate on the "product_color_id" field. It's identical to ProductColorIDEQ.
func ProductColorID(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldProductColorID, v))
}

// SrcUnitID applies equality check predicate on the "src_unit_id" field. It's identical to SrcUnitIDEQ.
func SrcUnitID(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldSrcUnitID, v))
}

// DstUnitID applies equality check predicate on the "dst_unit_id" field. It's identical to DstUnitIDEQ.
func DstUnitID(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldDstUnitID, v))
}

// Qty applies equality check predicate on the "qty" field. It's identical to QtyEQ.
func Qty(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldQty, v))
}

// PricePerUnit applies equality check predicate on the "price_per_unit" field. It's identical to PricePerUnitEQ.
func PricePerUnit(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldPricePerUnit, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldUpdatedAt, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldOrderID, vs...))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldProductID, v))
}

// ProductIDContains applies the Contains predicate on the "product_id" field.
func ProductIDContains(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldContains(FieldProductID, v))
}

// ProductIDHasPrefix applies the HasPrefix predicate on the "product_id" field.
func ProductIDHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldHasPrefix(FieldProductID, v))
}

// ProductIDHasSuffix applies the HasSuffix predicate on the "product_id" field.
func ProductIDHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldHasSuffix(FieldProductID, v))
}

// ProductIDEqualFold applies the EqualFold predicate on the "product_id" field.
func ProductIDEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEqualFold(FieldProductID, v))
}

// ProductIDContainsFold applies the ContainsFold predicate on the "product_id" field.
func ProductIDContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldContainsFold(FieldProductID, v))
}

// ProductColorIDEQ applies the EQ predicate on the "product_color_id" field.
func ProductColorIDEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldProductColorID, v))
}

// ProductColorIDNEQ applies the NEQ predicate on the "product_color_id" field.
func ProductColorIDNEQ(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldProductColorID, v))
}

// ProductColorIDIn applies the In predicate on the "product_color_id" field.
func ProductColorIDIn(vs ...string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldProductColorID, vs...))
}

// ProductColorIDNotIn applies the NotIn predicate on the "product_color_id" field.
func ProductColorIDNotIn(vs ...string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldProductColorID, vs...))
}

// ProductColorIDGT applies the GT predicate on the "product_color_id" field.
func ProductColorIDGT(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldProductColorID, v))
}

// ProductColorIDGTE applies the GTE predicate on the "product_color_id" field.
func ProductColorIDGTE(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldProductColorID, v))
}

// ProductColorIDLT applies the LT predicate on the "product_color_id" field.
func ProductColorIDLT(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldProductColorID, v))
}

// ProductColorIDLTE applies the LTE predicate on the "product_color_id" field.
func ProductColorIDLTE(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldProductColorID, v))
}

// ProductColorIDContains applies the Contains predicate on the "product_color_id" field.
func ProductColorIDContains(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldContains(FieldProductColorID, v))
}

// ProductColorIDHasPrefix applies the HasPrefix predicate on the "product_color_id" field.
func ProductColorIDHasPrefix(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldHasPrefix(FieldProductColorID, v))
}

// ProductColorIDHasSuffix applies the HasSuffix predicate on the "product_color_id" field.
func ProductColorIDHasSuffix(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldHasSuffix(FieldProductColorID, v))
}

// ProductColorIDEqualFold applies the EqualFold predicate on the "product_color_id" field.
func ProductColorIDEqualFold(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEqualFold(FieldProductColorID, v))
}

// ProductColorIDContainsFold applies the ContainsFold predicate on the "product_color_id" field.
func ProductColorIDContainsFold(v string) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldContainsFold(FieldProductColorID, v))
}

// SrcUnitIDEQ applies the EQ predicate on the "src_unit_id" field.
func SrcUnitIDEQ(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldSrcUnitID, v))
}

// SrcUnitIDNEQ applies the NEQ predicate on the "src_unit_id" field.
func SrcUnitIDNEQ(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldSrcUnitID, v))
}

// SrcUnitIDIn applies the In predicate on the "src_unit_id" field.
func SrcUnitIDIn(vs ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldSrcUnitID, vs...))
}

// SrcUnitIDNotIn applies the NotIn predicate on the "src_unit_id" field.
func SrcUnitIDNotIn(vs ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldSrcUnitID, vs...))
}

// SrcUnitIDIsNil applies the IsNil predicate on the "src_unit_id" field.
func SrcUnitIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIsNull(FieldSrcUnitID))
}

// SrcUnitIDNotNil applies the NotNil predicate on the "src_unit_id" field.
func SrcUnitIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotNull(FieldSrcUnitID))
}

// DstUnitIDEQ applies the EQ predicate on the "dst_unit_id" field.
func DstUnitIDEQ(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldDstUnitID, v))
}

// DstUnitIDNEQ applies the NEQ predicate on the "dst_unit_id" field.
func DstUnitIDNEQ(v uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldDstUnitID, v))
}

// DstUnitIDIn applies the In predicate on the "dst_unit_id" field.
func DstUnitIDIn(vs ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldDstUnitID, vs...))
}

// DstUnitIDNotIn applies the NotIn predicate on the "dst_unit_id" field.
func DstUnitIDNotIn(vs ...uuid.UUID) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldDstUnitID, vs...))
}

// DstUnitIDIsNil applies the IsNil predicate on the "dst_unit_id" field.
func DstUnitIDIsNil() predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIsNull(FieldDstUnitID))
}

// DstUnitIDNotNil applies the NotNil predicate on the "dst_unit_id" field.
func DstUnitIDNotNil() predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotNull(FieldDstUnitID))
}

// QtyEQ applies the EQ predicate on the "qty" field.
func QtyEQ(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldQty, v))
}

// QtyNEQ applies the NEQ predicate on the "qty" field.
func QtyNEQ(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldQty, v))
}

// QtyIn applies the In predicate on the "qty" field.
func QtyIn(vs ...decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldQty, vs...))
}

// QtyNotIn applies the NotIn predicate on the "qty" field.
func QtyNotIn(vs ...decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldQty, vs...))
}

// QtyGT applies the GT predicate on the "qty" field.
func QtyGT(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldQty, v))
}

// QtyGTE applies the GTE predicate on the "qty" field.
func QtyGTE(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldQty, v))
}

// QtyLT applies the LT predicate on the "qty" field.
func QtyLT(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldQty, v))
}

// QtyLTE applies the LTE predicate on the "qty" field.
func QtyLTE(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldQty, v))
}

// PricePerUnitEQ applies the EQ predicate on the "price_per_unit" field.
func PricePerUnitEQ(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldPricePerUnit, v))
}

// PricePerUnitNEQ applies the NEQ predicate on the "price_per_unit" field.
func PricePerUnitNEQ(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldPricePerUnit, v))
}

// PricePerUnitIn applies the In predicate on the "price_per_unit" field.
func PricePerUnitIn(vs ...decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldPricePerUnit, vs...))
}

// PricePerUnitNotIn applies the NotIn predicate on the "price_per_unit" field.
func PricePerUnitNotIn(vs ...decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldPricePerUnit, vs...))
}

// PricePerUnitGT applies the GT predicate on the "price_per_unit" field.
func PricePerUnitGT(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGT(FieldPricePerUnit, v))
}

// PricePerUnitGTE applies the GTE predicate on the "price_per_unit" field.
func PricePerUnitGTE(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldGTE(FieldPricePerUnit, v))
}

// PricePerUnitLT applies the LT predicate on the "price_per_unit" field.
func PricePerUnitLT(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLT(FieldPricePerUnit, v))
}

// PricePerUnitLTE applies the LTE predicate on the "price_per_unit" field.
func PricePerUnitLTE(v decimal.Decimal) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldLTE(FieldPricePerUnit, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.OrderItem {
	return predicate.OrderItem(sql.FieldNotIn(FieldStatus, vs...))
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.ProductInfo) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductColor applies the HasEdge predicate on the "product_color" edge.
func HasProductColor() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProductColorTable, ProductColorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductColorWith applies the HasEdge predicate on the "product_color" edge with a given conditions (other predicates).
func HasProductColorWith(preds ...predicate.ProductColor) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := newProductColorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSourceWorkUnit applies the HasEdge predicate on the "source_work_unit" edge.
func HasSourceWorkUnit() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SourceWorkUnitTable, SourceWorkUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceWorkUnitWith applies the HasEdge predicate on the "source_work_unit" edge with a given conditions (other predicates).
func HasSourceWorkUnitWith(preds ...predicate.WorkUnitInfo) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := newSourceWorkUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDestinationWorkUnit applies the HasEdge predicate on the "destination_work_unit" edge.
func HasDestinationWorkUnit() predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DestinationWorkUnitTable, DestinationWorkUnitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDestinationWorkUnitWith applies the HasEdge predicate on the "destination_work_unit" edge with a given conditions (other predicates).
func HasDestinationWorkUnitWith(preds ...predicate.WorkUnitInfo) predicate.OrderItem {
	return predicate.OrderItem(func(s *sql.Selector) {
		step := newDestinationWorkUnitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderItem) predicate.OrderItem {
	return predicate.OrderItem(sql.NotPredicates(p))
}
