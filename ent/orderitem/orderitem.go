// Code generated by ent, DO NOT EDIT.

package orderitem

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the orderitem type in the database.
	Label = "order_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldProductColorID holds the string denoting the product_color_id field in the database.
	FieldProductColorID = "product_color_id"
	// FieldSrcUnitID holds the string denoting the src_unit_id field in the database.
	FieldSrcUnitID = "src_unit_id"
	// FieldDstUnitID holds the string denoting the dst_unit_id field in the database.
	FieldDstUnitID = "dst_unit_id"
	// FieldQty holds the string denoting the qty field in the database.
	FieldQty = "qty"
	// FieldPricePerUnit holds the string denoting the price_per_unit field in the database.
	FieldPricePerUnit = "price_per_unit"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// EdgeProductColor holds the string denoting the product_color edge name in mutations.
	EdgeProductColor = "product_color"
	// EdgeSourceWorkUnit holds the string denoting the source_work_unit edge name in mutations.
	EdgeSourceWorkUnit = "source_work_unit"
	// EdgeDestinationWorkUnit holds the string denoting the destination_work_unit edge name in mutations.
	EdgeDestinationWorkUnit = "destination_work_unit"
	// Table holds the table name of the orderitem in the database.
	Table = "order_items"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "order_items"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
	// ProductTable is the table that holds the product relation/edge.
	ProductTable = "order_items"
	// ProductInverseTable is the table name for the ProductInfo entity.
	// It exists in this package in order to avoid circular dependency with the "productinfo" package.
	ProductInverseTable = "product_info"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "product_id"
	// ProductColorTable is the table that holds the product_color relation/edge.
	ProductColorTable = "order_items"
	// ProductColorInverseTable is the table name for the ProductColor entity.
	// It exists in this package in order to avoid circular dependency with the "productcolor" package.
	ProductColorInverseTable = "product_color"
	// ProductColorColumn is the table column denoting the product_color relation/edge.
	ProductColorColumn = "product_color_id"
	// SourceWorkUnitTable is the table that holds the source_work_unit relation/edge.
	SourceWorkUnitTable = "order_items"
	// SourceWorkUnitInverseTable is the table name for the WorkUnitInfo entity.
	// It exists in this package in order to avoid circular dependency with the "workunitinfo" package.
	SourceWorkUnitInverseTable = "work_unit_info"
	// SourceWorkUnitColumn is the table column denoting the source_work_unit relation/edge.
	SourceWorkUnitColumn = "src_unit_id"
	// DestinationWorkUnitTable is the table that holds the destination_work_unit relation/edge.
	DestinationWorkUnitTable = "order_items"
	// DestinationWorkUnitInverseTable is the table name for the WorkUnitInfo entity.
	// It exists in this package in order to avoid circular dependency with the "workunitinfo" package.
	DestinationWorkUnitInverseTable = "work_unit_info"
	// DestinationWorkUnitColumn is the table column denoting the destination_work_unit relation/edge.
	DestinationWorkUnitColumn = "dst_unit_id"
)

// Columns holds all SQL columns for orderitem fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldOrderID,
	FieldProductID,
	FieldProductColorID,
	FieldSrcUnitID,
	FieldDstUnitID,
	FieldQty,
	FieldPricePerUnit,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusInStock is the default value of the Status enum.
const DefaultStatus = StatusInStock

// Status values.
const (
	StatusDelivered          Status = "DELIVERED"
	StatusOutOfStock         Status = "OUT_OF_STOCK"
	StatusInTransit          Status = "IN_TRANSIT"
	StatusInStock            Status = "IN_STOCK"
	StatusPartiallyDelivered Status = "PARTIALLY_DELIVERED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDelivered, StatusOutOfStock, StatusInTransit, StatusInStock, StatusPartiallyDelivered:
		return nil
	default:
		return fmt.Errorf("orderitem: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the OrderItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByProductColorID orders the results by the product_color_id field.
func ByProductColorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductColorID, opts...).ToFunc()
}

// BySrcUnitID orders the results by the src_unit_id field.
func BySrcUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSrcUnitID, opts...).ToFunc()
}

// ByDstUnitID orders the results by the dst_unit_id field.
func ByDstUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDstUnitID, opts...).ToFunc()
}

// ByQty orders the results by the qty field.
func ByQty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQty, opts...).ToFunc()
}

// ByPricePerUnit orders the results by the price_per_unit field.
func ByPricePerUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPricePerUnit, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductField orders the results by product field.
func ByProductField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductStep(), sql.OrderByField(field, opts...))
	}
}

// ByProductColorField orders the results by product_color field.
func ByProductColorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductColorStep(), sql.OrderByField(field, opts...))
	}
}

// BySourceWorkUnitField orders the results by source_work_unit field.
func BySourceWorkUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSourceWorkUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByDestinationWorkUnitField orders the results by destination_work_unit field.
func ByDestinationWorkUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDestinationWorkUnitStep(), sql.OrderByField(field, opts...))
	}
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrderTable, OrderColumn),
	)
}
func newProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProductTable, ProductColumn),
	)
}
func newProductColorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductColorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProductColorTable, ProductColorColumn),
	)
}
func newSourceWorkUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SourceWorkUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SourceWorkUnitTable, SourceWorkUnitColumn),
	)
}
func newDestinationWorkUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DestinationWorkUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DestinationWorkUnitTable, DestinationWorkUnitColumn),
	)
}
