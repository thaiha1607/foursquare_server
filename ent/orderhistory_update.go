// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/orderhistory"
	"github.com/thaiha1607/foursquare_server/ent/orderstatuscode"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// OrderHistoryUpdate is the builder for updating OrderHistory entities.
type OrderHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *OrderHistoryMutation
}

// Where appends a list predicates to the OrderHistoryUpdate builder.
func (ohu *OrderHistoryUpdate) Where(ps ...predicate.OrderHistory) *OrderHistoryUpdate {
	ohu.mutation.Where(ps...)
	return ohu
}

// SetUpdatedAt sets the "updated_at" field.
func (ohu *OrderHistoryUpdate) SetUpdatedAt(t time.Time) *OrderHistoryUpdate {
	ohu.mutation.SetUpdatedAt(t)
	return ohu
}

// SetPrevStatusCode sets the "prev_status_code" field.
func (ohu *OrderHistoryUpdate) SetPrevStatusCode(i int) *OrderHistoryUpdate {
	ohu.mutation.SetPrevStatusCode(i)
	return ohu
}

// SetNillablePrevStatusCode sets the "prev_status_code" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillablePrevStatusCode(i *int) *OrderHistoryUpdate {
	if i != nil {
		ohu.SetPrevStatusCode(*i)
	}
	return ohu
}

// ClearPrevStatusCode clears the value of the "prev_status_code" field.
func (ohu *OrderHistoryUpdate) ClearPrevStatusCode() *OrderHistoryUpdate {
	ohu.mutation.ClearPrevStatusCode()
	return ohu
}

// SetNewStatusCode sets the "new_status_code" field.
func (ohu *OrderHistoryUpdate) SetNewStatusCode(i int) *OrderHistoryUpdate {
	ohu.mutation.SetNewStatusCode(i)
	return ohu
}

// SetNillableNewStatusCode sets the "new_status_code" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillableNewStatusCode(i *int) *OrderHistoryUpdate {
	if i != nil {
		ohu.SetNewStatusCode(*i)
	}
	return ohu
}

// ClearNewStatusCode clears the value of the "new_status_code" field.
func (ohu *OrderHistoryUpdate) ClearNewStatusCode() *OrderHistoryUpdate {
	ohu.mutation.ClearNewStatusCode()
	return ohu
}

// SetDescription sets the "description" field.
func (ohu *OrderHistoryUpdate) SetDescription(s string) *OrderHistoryUpdate {
	ohu.mutation.SetDescription(s)
	return ohu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillableDescription(s *string) *OrderHistoryUpdate {
	if s != nil {
		ohu.SetDescription(*s)
	}
	return ohu
}

// ClearDescription clears the value of the "description" field.
func (ohu *OrderHistoryUpdate) ClearDescription() *OrderHistoryUpdate {
	ohu.mutation.ClearDescription()
	return ohu
}

// SetPrevStatusID sets the "prev_status" edge to the OrderStatusCode entity by ID.
func (ohu *OrderHistoryUpdate) SetPrevStatusID(id int) *OrderHistoryUpdate {
	ohu.mutation.SetPrevStatusID(id)
	return ohu
}

// SetNillablePrevStatusID sets the "prev_status" edge to the OrderStatusCode entity by ID if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillablePrevStatusID(id *int) *OrderHistoryUpdate {
	if id != nil {
		ohu = ohu.SetPrevStatusID(*id)
	}
	return ohu
}

// SetPrevStatus sets the "prev_status" edge to the OrderStatusCode entity.
func (ohu *OrderHistoryUpdate) SetPrevStatus(o *OrderStatusCode) *OrderHistoryUpdate {
	return ohu.SetPrevStatusID(o.ID)
}

// SetNewStatusID sets the "new_status" edge to the OrderStatusCode entity by ID.
func (ohu *OrderHistoryUpdate) SetNewStatusID(id int) *OrderHistoryUpdate {
	ohu.mutation.SetNewStatusID(id)
	return ohu
}

// SetNillableNewStatusID sets the "new_status" edge to the OrderStatusCode entity by ID if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillableNewStatusID(id *int) *OrderHistoryUpdate {
	if id != nil {
		ohu = ohu.SetNewStatusID(*id)
	}
	return ohu
}

// SetNewStatus sets the "new_status" edge to the OrderStatusCode entity.
func (ohu *OrderHistoryUpdate) SetNewStatus(o *OrderStatusCode) *OrderHistoryUpdate {
	return ohu.SetNewStatusID(o.ID)
}

// Mutation returns the OrderHistoryMutation object of the builder.
func (ohu *OrderHistoryUpdate) Mutation() *OrderHistoryMutation {
	return ohu.mutation
}

// ClearPrevStatus clears the "prev_status" edge to the OrderStatusCode entity.
func (ohu *OrderHistoryUpdate) ClearPrevStatus() *OrderHistoryUpdate {
	ohu.mutation.ClearPrevStatus()
	return ohu
}

// ClearNewStatus clears the "new_status" edge to the OrderStatusCode entity.
func (ohu *OrderHistoryUpdate) ClearNewStatus() *OrderHistoryUpdate {
	ohu.mutation.ClearNewStatus()
	return ohu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ohu *OrderHistoryUpdate) Save(ctx context.Context) (int, error) {
	ohu.defaults()
	return withHooks(ctx, ohu.sqlSave, ohu.mutation, ohu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ohu *OrderHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ohu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ohu *OrderHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ohu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohu *OrderHistoryUpdate) ExecX(ctx context.Context) {
	if err := ohu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ohu *OrderHistoryUpdate) defaults() {
	if _, ok := ohu.mutation.UpdatedAt(); !ok {
		v := orderhistory.UpdateDefaultUpdatedAt()
		ohu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ohu *OrderHistoryUpdate) check() error {
	if _, ok := ohu.mutation.OrderID(); ohu.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderHistory.order"`)
	}
	if _, ok := ohu.mutation.PersonID(); ohu.mutation.PersonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderHistory.person"`)
	}
	return nil
}

func (ohu *OrderHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ohu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderhistory.Table, orderhistory.Columns, sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeUUID))
	if ps := ohu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ohu.mutation.UpdatedAt(); ok {
		_spec.SetField(orderhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ohu.mutation.Description(); ok {
		_spec.SetField(orderhistory.FieldDescription, field.TypeString, value)
	}
	if ohu.mutation.DescriptionCleared() {
		_spec.ClearField(orderhistory.FieldDescription, field.TypeString)
	}
	if ohu.mutation.PrevStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderhistory.PrevStatusTable,
			Columns: []string{orderhistory.PrevStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.PrevStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderhistory.PrevStatusTable,
			Columns: []string{orderhistory.PrevStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohu.mutation.NewStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderhistory.NewStatusTable,
			Columns: []string{orderhistory.NewStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.NewStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderhistory.NewStatusTable,
			Columns: []string{orderhistory.NewStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ohu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ohu.mutation.done = true
	return n, nil
}

// OrderHistoryUpdateOne is the builder for updating a single OrderHistory entity.
type OrderHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ohuo *OrderHistoryUpdateOne) SetUpdatedAt(t time.Time) *OrderHistoryUpdateOne {
	ohuo.mutation.SetUpdatedAt(t)
	return ohuo
}

// SetPrevStatusCode sets the "prev_status_code" field.
func (ohuo *OrderHistoryUpdateOne) SetPrevStatusCode(i int) *OrderHistoryUpdateOne {
	ohuo.mutation.SetPrevStatusCode(i)
	return ohuo
}

// SetNillablePrevStatusCode sets the "prev_status_code" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillablePrevStatusCode(i *int) *OrderHistoryUpdateOne {
	if i != nil {
		ohuo.SetPrevStatusCode(*i)
	}
	return ohuo
}

// ClearPrevStatusCode clears the value of the "prev_status_code" field.
func (ohuo *OrderHistoryUpdateOne) ClearPrevStatusCode() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearPrevStatusCode()
	return ohuo
}

// SetNewStatusCode sets the "new_status_code" field.
func (ohuo *OrderHistoryUpdateOne) SetNewStatusCode(i int) *OrderHistoryUpdateOne {
	ohuo.mutation.SetNewStatusCode(i)
	return ohuo
}

// SetNillableNewStatusCode sets the "new_status_code" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillableNewStatusCode(i *int) *OrderHistoryUpdateOne {
	if i != nil {
		ohuo.SetNewStatusCode(*i)
	}
	return ohuo
}

// ClearNewStatusCode clears the value of the "new_status_code" field.
func (ohuo *OrderHistoryUpdateOne) ClearNewStatusCode() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearNewStatusCode()
	return ohuo
}

// SetDescription sets the "description" field.
func (ohuo *OrderHistoryUpdateOne) SetDescription(s string) *OrderHistoryUpdateOne {
	ohuo.mutation.SetDescription(s)
	return ohuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillableDescription(s *string) *OrderHistoryUpdateOne {
	if s != nil {
		ohuo.SetDescription(*s)
	}
	return ohuo
}

// ClearDescription clears the value of the "description" field.
func (ohuo *OrderHistoryUpdateOne) ClearDescription() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearDescription()
	return ohuo
}

// SetPrevStatusID sets the "prev_status" edge to the OrderStatusCode entity by ID.
func (ohuo *OrderHistoryUpdateOne) SetPrevStatusID(id int) *OrderHistoryUpdateOne {
	ohuo.mutation.SetPrevStatusID(id)
	return ohuo
}

// SetNillablePrevStatusID sets the "prev_status" edge to the OrderStatusCode entity by ID if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillablePrevStatusID(id *int) *OrderHistoryUpdateOne {
	if id != nil {
		ohuo = ohuo.SetPrevStatusID(*id)
	}
	return ohuo
}

// SetPrevStatus sets the "prev_status" edge to the OrderStatusCode entity.
func (ohuo *OrderHistoryUpdateOne) SetPrevStatus(o *OrderStatusCode) *OrderHistoryUpdateOne {
	return ohuo.SetPrevStatusID(o.ID)
}

// SetNewStatusID sets the "new_status" edge to the OrderStatusCode entity by ID.
func (ohuo *OrderHistoryUpdateOne) SetNewStatusID(id int) *OrderHistoryUpdateOne {
	ohuo.mutation.SetNewStatusID(id)
	return ohuo
}

// SetNillableNewStatusID sets the "new_status" edge to the OrderStatusCode entity by ID if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillableNewStatusID(id *int) *OrderHistoryUpdateOne {
	if id != nil {
		ohuo = ohuo.SetNewStatusID(*id)
	}
	return ohuo
}

// SetNewStatus sets the "new_status" edge to the OrderStatusCode entity.
func (ohuo *OrderHistoryUpdateOne) SetNewStatus(o *OrderStatusCode) *OrderHistoryUpdateOne {
	return ohuo.SetNewStatusID(o.ID)
}

// Mutation returns the OrderHistoryMutation object of the builder.
func (ohuo *OrderHistoryUpdateOne) Mutation() *OrderHistoryMutation {
	return ohuo.mutation
}

// ClearPrevStatus clears the "prev_status" edge to the OrderStatusCode entity.
func (ohuo *OrderHistoryUpdateOne) ClearPrevStatus() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearPrevStatus()
	return ohuo
}

// ClearNewStatus clears the "new_status" edge to the OrderStatusCode entity.
func (ohuo *OrderHistoryUpdateOne) ClearNewStatus() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearNewStatus()
	return ohuo
}

// Where appends a list predicates to the OrderHistoryUpdate builder.
func (ohuo *OrderHistoryUpdateOne) Where(ps ...predicate.OrderHistory) *OrderHistoryUpdateOne {
	ohuo.mutation.Where(ps...)
	return ohuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ohuo *OrderHistoryUpdateOne) Select(field string, fields ...string) *OrderHistoryUpdateOne {
	ohuo.fields = append([]string{field}, fields...)
	return ohuo
}

// Save executes the query and returns the updated OrderHistory entity.
func (ohuo *OrderHistoryUpdateOne) Save(ctx context.Context) (*OrderHistory, error) {
	ohuo.defaults()
	return withHooks(ctx, ohuo.sqlSave, ohuo.mutation, ohuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ohuo *OrderHistoryUpdateOne) SaveX(ctx context.Context) *OrderHistory {
	node, err := ohuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ohuo *OrderHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ohuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohuo *OrderHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ohuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ohuo *OrderHistoryUpdateOne) defaults() {
	if _, ok := ohuo.mutation.UpdatedAt(); !ok {
		v := orderhistory.UpdateDefaultUpdatedAt()
		ohuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ohuo *OrderHistoryUpdateOne) check() error {
	if _, ok := ohuo.mutation.OrderID(); ohuo.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderHistory.order"`)
	}
	if _, ok := ohuo.mutation.PersonID(); ohuo.mutation.PersonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderHistory.person"`)
	}
	return nil
}

func (ohuo *OrderHistoryUpdateOne) sqlSave(ctx context.Context) (_node *OrderHistory, err error) {
	if err := ohuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderhistory.Table, orderhistory.Columns, sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeUUID))
	id, ok := ohuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ohuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderhistory.FieldID)
		for _, f := range fields {
			if !orderhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ohuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ohuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orderhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ohuo.mutation.Description(); ok {
		_spec.SetField(orderhistory.FieldDescription, field.TypeString, value)
	}
	if ohuo.mutation.DescriptionCleared() {
		_spec.ClearField(orderhistory.FieldDescription, field.TypeString)
	}
	if ohuo.mutation.PrevStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderhistory.PrevStatusTable,
			Columns: []string{orderhistory.PrevStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.PrevStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderhistory.PrevStatusTable,
			Columns: []string{orderhistory.PrevStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohuo.mutation.NewStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderhistory.NewStatusTable,
			Columns: []string{orderhistory.NewStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.NewStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderhistory.NewStatusTable,
			Columns: []string{orderhistory.NewStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderHistory{config: ohuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ohuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ohuo.mutation.done = true
	return _node, nil
}
