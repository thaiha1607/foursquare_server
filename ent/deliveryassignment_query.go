// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/deliveryassignment"
	"github.com/thaiha1607/foursquare_server/ent/person"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/shipment"
)

// DeliveryAssignmentQuery is the builder for querying DeliveryAssignment entities.
type DeliveryAssignmentQuery struct {
	config
	ctx          *QueryContext
	order        []deliveryassignment.OrderOption
	inters       []Interceptor
	predicates   []predicate.DeliveryAssignment
	withShipment *ShipmentQuery
	withStaff    *PersonQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeliveryAssignmentQuery builder.
func (daq *DeliveryAssignmentQuery) Where(ps ...predicate.DeliveryAssignment) *DeliveryAssignmentQuery {
	daq.predicates = append(daq.predicates, ps...)
	return daq
}

// Limit the number of records to be returned by this query.
func (daq *DeliveryAssignmentQuery) Limit(limit int) *DeliveryAssignmentQuery {
	daq.ctx.Limit = &limit
	return daq
}

// Offset to start from.
func (daq *DeliveryAssignmentQuery) Offset(offset int) *DeliveryAssignmentQuery {
	daq.ctx.Offset = &offset
	return daq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (daq *DeliveryAssignmentQuery) Unique(unique bool) *DeliveryAssignmentQuery {
	daq.ctx.Unique = &unique
	return daq
}

// Order specifies how the records should be ordered.
func (daq *DeliveryAssignmentQuery) Order(o ...deliveryassignment.OrderOption) *DeliveryAssignmentQuery {
	daq.order = append(daq.order, o...)
	return daq
}

// QueryShipment chains the current query on the "shipment" edge.
func (daq *DeliveryAssignmentQuery) QueryShipment() *ShipmentQuery {
	query := (&ShipmentClient{config: daq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := daq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := daq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryassignment.Table, deliveryassignment.FieldID, selector),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryassignment.ShipmentTable, deliveryassignment.ShipmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(daq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStaff chains the current query on the "staff" edge.
func (daq *DeliveryAssignmentQuery) QueryStaff() *PersonQuery {
	query := (&PersonClient{config: daq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := daq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := daq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryassignment.Table, deliveryassignment.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryassignment.StaffTable, deliveryassignment.StaffColumn),
		)
		fromU = sqlgraph.SetNeighbors(daq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeliveryAssignment entity from the query.
// Returns a *NotFoundError when no DeliveryAssignment was found.
func (daq *DeliveryAssignmentQuery) First(ctx context.Context) (*DeliveryAssignment, error) {
	nodes, err := daq.Limit(1).All(setContextOp(ctx, daq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deliveryassignment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (daq *DeliveryAssignmentQuery) FirstX(ctx context.Context) *DeliveryAssignment {
	node, err := daq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeliveryAssignment ID from the query.
// Returns a *NotFoundError when no DeliveryAssignment ID was found.
func (daq *DeliveryAssignmentQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = daq.Limit(1).IDs(setContextOp(ctx, daq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deliveryassignment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (daq *DeliveryAssignmentQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := daq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeliveryAssignment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeliveryAssignment entity is found.
// Returns a *NotFoundError when no DeliveryAssignment entities are found.
func (daq *DeliveryAssignmentQuery) Only(ctx context.Context) (*DeliveryAssignment, error) {
	nodes, err := daq.Limit(2).All(setContextOp(ctx, daq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deliveryassignment.Label}
	default:
		return nil, &NotSingularError{deliveryassignment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (daq *DeliveryAssignmentQuery) OnlyX(ctx context.Context) *DeliveryAssignment {
	node, err := daq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeliveryAssignment ID in the query.
// Returns a *NotSingularError when more than one DeliveryAssignment ID is found.
// Returns a *NotFoundError when no entities are found.
func (daq *DeliveryAssignmentQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = daq.Limit(2).IDs(setContextOp(ctx, daq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deliveryassignment.Label}
	default:
		err = &NotSingularError{deliveryassignment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (daq *DeliveryAssignmentQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := daq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeliveryAssignments.
func (daq *DeliveryAssignmentQuery) All(ctx context.Context) ([]*DeliveryAssignment, error) {
	ctx = setContextOp(ctx, daq.ctx, "All")
	if err := daq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeliveryAssignment, *DeliveryAssignmentQuery]()
	return withInterceptors[[]*DeliveryAssignment](ctx, daq, qr, daq.inters)
}

// AllX is like All, but panics if an error occurs.
func (daq *DeliveryAssignmentQuery) AllX(ctx context.Context) []*DeliveryAssignment {
	nodes, err := daq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeliveryAssignment IDs.
func (daq *DeliveryAssignmentQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if daq.ctx.Unique == nil && daq.path != nil {
		daq.Unique(true)
	}
	ctx = setContextOp(ctx, daq.ctx, "IDs")
	if err = daq.Select(deliveryassignment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (daq *DeliveryAssignmentQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := daq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (daq *DeliveryAssignmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, daq.ctx, "Count")
	if err := daq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, daq, querierCount[*DeliveryAssignmentQuery](), daq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (daq *DeliveryAssignmentQuery) CountX(ctx context.Context) int {
	count, err := daq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (daq *DeliveryAssignmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, daq.ctx, "Exist")
	switch _, err := daq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (daq *DeliveryAssignmentQuery) ExistX(ctx context.Context) bool {
	exist, err := daq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeliveryAssignmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (daq *DeliveryAssignmentQuery) Clone() *DeliveryAssignmentQuery {
	if daq == nil {
		return nil
	}
	return &DeliveryAssignmentQuery{
		config:       daq.config,
		ctx:          daq.ctx.Clone(),
		order:        append([]deliveryassignment.OrderOption{}, daq.order...),
		inters:       append([]Interceptor{}, daq.inters...),
		predicates:   append([]predicate.DeliveryAssignment{}, daq.predicates...),
		withShipment: daq.withShipment.Clone(),
		withStaff:    daq.withStaff.Clone(),
		// clone intermediate query.
		sql:  daq.sql.Clone(),
		path: daq.path,
	}
}

// WithShipment tells the query-builder to eager-load the nodes that are connected to
// the "shipment" edge. The optional arguments are used to configure the query builder of the edge.
func (daq *DeliveryAssignmentQuery) WithShipment(opts ...func(*ShipmentQuery)) *DeliveryAssignmentQuery {
	query := (&ShipmentClient{config: daq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	daq.withShipment = query
	return daq
}

// WithStaff tells the query-builder to eager-load the nodes that are connected to
// the "staff" edge. The optional arguments are used to configure the query builder of the edge.
func (daq *DeliveryAssignmentQuery) WithStaff(opts ...func(*PersonQuery)) *DeliveryAssignmentQuery {
	query := (&PersonClient{config: daq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	daq.withStaff = query
	return daq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeliveryAssignment.Query().
//		GroupBy(deliveryassignment.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (daq *DeliveryAssignmentQuery) GroupBy(field string, fields ...string) *DeliveryAssignmentGroupBy {
	daq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeliveryAssignmentGroupBy{build: daq}
	grbuild.flds = &daq.ctx.Fields
	grbuild.label = deliveryassignment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.DeliveryAssignment.Query().
//		Select(deliveryassignment.FieldCreatedAt).
//		Scan(ctx, &v)
func (daq *DeliveryAssignmentQuery) Select(fields ...string) *DeliveryAssignmentSelect {
	daq.ctx.Fields = append(daq.ctx.Fields, fields...)
	sbuild := &DeliveryAssignmentSelect{DeliveryAssignmentQuery: daq}
	sbuild.label = deliveryassignment.Label
	sbuild.flds, sbuild.scan = &daq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeliveryAssignmentSelect configured with the given aggregations.
func (daq *DeliveryAssignmentQuery) Aggregate(fns ...AggregateFunc) *DeliveryAssignmentSelect {
	return daq.Select().Aggregate(fns...)
}

func (daq *DeliveryAssignmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range daq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, daq); err != nil {
				return err
			}
		}
	}
	for _, f := range daq.ctx.Fields {
		if !deliveryassignment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if daq.path != nil {
		prev, err := daq.path(ctx)
		if err != nil {
			return err
		}
		daq.sql = prev
	}
	return nil
}

func (daq *DeliveryAssignmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeliveryAssignment, error) {
	var (
		nodes       = []*DeliveryAssignment{}
		_spec       = daq.querySpec()
		loadedTypes = [2]bool{
			daq.withShipment != nil,
			daq.withStaff != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeliveryAssignment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeliveryAssignment{config: daq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, daq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := daq.withShipment; query != nil {
		if err := daq.loadShipment(ctx, query, nodes, nil,
			func(n *DeliveryAssignment, e *Shipment) { n.Edges.Shipment = e }); err != nil {
			return nil, err
		}
	}
	if query := daq.withStaff; query != nil {
		if err := daq.loadStaff(ctx, query, nodes, nil,
			func(n *DeliveryAssignment, e *Person) { n.Edges.Staff = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (daq *DeliveryAssignmentQuery) loadShipment(ctx context.Context, query *ShipmentQuery, nodes []*DeliveryAssignment, init func(*DeliveryAssignment), assign func(*DeliveryAssignment, *Shipment)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*DeliveryAssignment)
	for i := range nodes {
		fk := nodes[i].ShipmentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(shipment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shipment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (daq *DeliveryAssignmentQuery) loadStaff(ctx context.Context, query *PersonQuery, nodes []*DeliveryAssignment, init func(*DeliveryAssignment), assign func(*DeliveryAssignment, *Person)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*DeliveryAssignment)
	for i := range nodes {
		fk := nodes[i].StaffID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(person.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "staff_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (daq *DeliveryAssignmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := daq.querySpec()
	_spec.Node.Columns = daq.ctx.Fields
	if len(daq.ctx.Fields) > 0 {
		_spec.Unique = daq.ctx.Unique != nil && *daq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, daq.driver, _spec)
}

func (daq *DeliveryAssignmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(deliveryassignment.Table, deliveryassignment.Columns, sqlgraph.NewFieldSpec(deliveryassignment.FieldID, field.TypeUUID))
	_spec.From = daq.sql
	if unique := daq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if daq.path != nil {
		_spec.Unique = true
	}
	if fields := daq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryassignment.FieldID)
		for i := range fields {
			if fields[i] != deliveryassignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if daq.withShipment != nil {
			_spec.Node.AddColumnOnce(deliveryassignment.FieldShipmentID)
		}
		if daq.withStaff != nil {
			_spec.Node.AddColumnOnce(deliveryassignment.FieldStaffID)
		}
	}
	if ps := daq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := daq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := daq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := daq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (daq *DeliveryAssignmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(daq.driver.Dialect())
	t1 := builder.Table(deliveryassignment.Table)
	columns := daq.ctx.Fields
	if len(columns) == 0 {
		columns = deliveryassignment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if daq.sql != nil {
		selector = daq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if daq.ctx.Unique != nil && *daq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range daq.predicates {
		p(selector)
	}
	for _, p := range daq.order {
		p(selector)
	}
	if offset := daq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := daq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DeliveryAssignmentGroupBy is the group-by builder for DeliveryAssignment entities.
type DeliveryAssignmentGroupBy struct {
	selector
	build *DeliveryAssignmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dagb *DeliveryAssignmentGroupBy) Aggregate(fns ...AggregateFunc) *DeliveryAssignmentGroupBy {
	dagb.fns = append(dagb.fns, fns...)
	return dagb
}

// Scan applies the selector query and scans the result into the given value.
func (dagb *DeliveryAssignmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dagb.build.ctx, "GroupBy")
	if err := dagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryAssignmentQuery, *DeliveryAssignmentGroupBy](ctx, dagb.build, dagb, dagb.build.inters, v)
}

func (dagb *DeliveryAssignmentGroupBy) sqlScan(ctx context.Context, root *DeliveryAssignmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dagb.fns))
	for _, fn := range dagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dagb.flds)+len(dagb.fns))
		for _, f := range *dagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeliveryAssignmentSelect is the builder for selecting fields of DeliveryAssignment entities.
type DeliveryAssignmentSelect struct {
	*DeliveryAssignmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (das *DeliveryAssignmentSelect) Aggregate(fns ...AggregateFunc) *DeliveryAssignmentSelect {
	das.fns = append(das.fns, fns...)
	return das
}

// Scan applies the selector query and scans the result into the given value.
func (das *DeliveryAssignmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, das.ctx, "Select")
	if err := das.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryAssignmentQuery, *DeliveryAssignmentSelect](ctx, das.DeliveryAssignmentQuery, das, das.inters, v)
}

func (das *DeliveryAssignmentSelect) sqlScan(ctx context.Context, root *DeliveryAssignmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(das.fns))
	for _, fn := range das.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*das.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := das.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
