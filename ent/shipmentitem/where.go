// Code generated by ent, DO NOT EDIT.

package shipmentitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// ShipmentID applies equality check predicate on the "shipment_id" field. It's identical to ShipmentIDEQ.
func ShipmentID(v uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldShipmentID, v))
}

// OrderItemID applies equality check predicate on the "order_item_id" field. It's identical to OrderItemIDEQ.
func OrderItemID(v uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldOrderItemID, v))
}

// Qty applies equality check predicate on the "qty" field. It's identical to QtyEQ.
func Qty(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldQty, v))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldTotal, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldLTE(FieldUpdatedAt, v))
}

// ShipmentIDEQ applies the EQ predicate on the "shipment_id" field.
func ShipmentIDEQ(v uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldShipmentID, v))
}

// ShipmentIDNEQ applies the NEQ predicate on the "shipment_id" field.
func ShipmentIDNEQ(v uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNEQ(FieldShipmentID, v))
}

// ShipmentIDIn applies the In predicate on the "shipment_id" field.
func ShipmentIDIn(vs ...uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldIn(FieldShipmentID, vs...))
}

// ShipmentIDNotIn applies the NotIn predicate on the "shipment_id" field.
func ShipmentIDNotIn(vs ...uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNotIn(FieldShipmentID, vs...))
}

// OrderItemIDEQ applies the EQ predicate on the "order_item_id" field.
func OrderItemIDEQ(v uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldOrderItemID, v))
}

// OrderItemIDNEQ applies the NEQ predicate on the "order_item_id" field.
func OrderItemIDNEQ(v uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNEQ(FieldOrderItemID, v))
}

// OrderItemIDIn applies the In predicate on the "order_item_id" field.
func OrderItemIDIn(vs ...uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldIn(FieldOrderItemID, vs...))
}

// OrderItemIDNotIn applies the NotIn predicate on the "order_item_id" field.
func OrderItemIDNotIn(vs ...uuid.UUID) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNotIn(FieldOrderItemID, vs...))
}

// QtyEQ applies the EQ predicate on the "qty" field.
func QtyEQ(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldQty, v))
}

// QtyNEQ applies the NEQ predicate on the "qty" field.
func QtyNEQ(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNEQ(FieldQty, v))
}

// QtyIn applies the In predicate on the "qty" field.
func QtyIn(vs ...decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldIn(FieldQty, vs...))
}

// QtyNotIn applies the NotIn predicate on the "qty" field.
func QtyNotIn(vs ...decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNotIn(FieldQty, vs...))
}

// QtyGT applies the GT predicate on the "qty" field.
func QtyGT(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldGT(FieldQty, v))
}

// QtyGTE applies the GTE predicate on the "qty" field.
func QtyGTE(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldGTE(FieldQty, v))
}

// QtyLT applies the LT predicate on the "qty" field.
func QtyLT(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldLT(FieldQty, v))
}

// QtyLTE applies the LTE predicate on the "qty" field.
func QtyLTE(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldLTE(FieldQty, v))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v decimal.Decimal) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.FieldLTE(FieldTotal, v))
}

// HasShipment applies the HasEdge predicate on the "shipment" edge.
func HasShipment() predicate.ShipmentItem {
	return predicate.ShipmentItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ShipmentTable, ShipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentWith applies the HasEdge predicate on the "shipment" edge with a given conditions (other predicates).
func HasShipmentWith(preds ...predicate.Shipment) predicate.ShipmentItem {
	return predicate.ShipmentItem(func(s *sql.Selector) {
		step := newShipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItem applies the HasEdge predicate on the "order_item" edge.
func HasOrderItem() predicate.ShipmentItem {
	return predicate.ShipmentItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrderItemTable, OrderItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemWith applies the HasEdge predicate on the "order_item" edge with a given conditions (other predicates).
func HasOrderItemWith(preds ...predicate.OrderItem) predicate.ShipmentItem {
	return predicate.ShipmentItem(func(s *sql.Selector) {
		step := newOrderItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShipmentItem) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShipmentItem) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShipmentItem) predicate.ShipmentItem {
	return predicate.ShipmentItem(sql.NotPredicates(p))
}
