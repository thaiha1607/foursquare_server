// Code generated by ent, DO NOT EDIT.

package shipmentitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the shipmentitem type in the database.
	Label = "shipment_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldShipmentID holds the string denoting the shipment_id field in the database.
	FieldShipmentID = "shipment_id"
	// FieldOrderItemID holds the string denoting the order_item_id field in the database.
	FieldOrderItemID = "order_item_id"
	// FieldQty holds the string denoting the qty field in the database.
	FieldQty = "qty"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// EdgeShipment holds the string denoting the shipment edge name in mutations.
	EdgeShipment = "shipment"
	// EdgeOrderItem holds the string denoting the order_item edge name in mutations.
	EdgeOrderItem = "order_item"
	// Table holds the table name of the shipmentitem in the database.
	Table = "invoice_line_items"
	// ShipmentTable is the table that holds the shipment relation/edge.
	ShipmentTable = "invoice_line_items"
	// ShipmentInverseTable is the table name for the Shipment entity.
	// It exists in this package in order to avoid circular dependency with the "shipment" package.
	ShipmentInverseTable = "shipments"
	// ShipmentColumn is the table column denoting the shipment relation/edge.
	ShipmentColumn = "shipment_id"
	// OrderItemTable is the table that holds the order_item relation/edge.
	OrderItemTable = "invoice_line_items"
	// OrderItemInverseTable is the table name for the OrderItem entity.
	// It exists in this package in order to avoid circular dependency with the "orderitem" package.
	OrderItemInverseTable = "order_items"
	// OrderItemColumn is the table column denoting the order_item relation/edge.
	OrderItemColumn = "order_item_id"
)

// Columns holds all SQL columns for shipmentitem fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldShipmentID,
	FieldOrderItemID,
	FieldQty,
	FieldTotal,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ShipmentItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByShipmentID orders the results by the shipment_id field.
func ByShipmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShipmentID, opts...).ToFunc()
}

// ByOrderItemID orders the results by the order_item_id field.
func ByOrderItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderItemID, opts...).ToFunc()
}

// ByQty orders the results by the qty field.
func ByQty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQty, opts...).ToFunc()
}

// ByTotal orders the results by the total field.
func ByTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotal, opts...).ToFunc()
}

// ByShipmentField orders the results by shipment field.
func ByShipmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderItemField orders the results by order_item field.
func ByOrderItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderItemStep(), sql.OrderByField(field, opts...))
	}
}
func newShipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ShipmentTable, ShipmentColumn),
	)
}
func newOrderItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrderItemTable, OrderItemColumn),
	)
}
