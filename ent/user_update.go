// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"net/url"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/user"
	"github.com/thaiha1607/foursquare_server/ent/userrole"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetAvatarURL sets the "avatar_url" field.
func (uu *UserUpdate) SetAvatarURL(u *url.URL) *UserUpdate {
	uu.mutation.SetAvatarURL(u)
	return uu
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (uu *UserUpdate) ClearAvatarURL() *UserUpdate {
	uu.mutation.ClearAvatarURL()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetLastReset sets the "last_reset" field.
func (uu *UserUpdate) SetLastReset(t time.Time) *UserUpdate {
	uu.mutation.SetLastReset(t)
	return uu
}

// SetNillableLastReset sets the "last_reset" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastReset(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastReset(*t)
	}
	return uu
}

// ClearLastReset clears the value of the "last_reset" field.
func (uu *UserUpdate) ClearLastReset() *UserUpdate {
	uu.mutation.ClearLastReset()
	return uu
}

// SetLastVerification sets the "last_verification" field.
func (uu *UserUpdate) SetLastVerification(t time.Time) *UserUpdate {
	uu.mutation.SetLastVerification(t)
	return uu
}

// SetNillableLastVerification sets the "last_verification" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastVerification(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastVerification(*t)
	}
	return uu
}

// ClearLastVerification clears the value of the "last_verification" field.
func (uu *UserUpdate) ClearLastVerification() *UserUpdate {
	uu.mutation.ClearLastVerification()
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetPasswordHash sets the "password_hash" field.
func (uu *UserUpdate) SetPasswordHash(s string) *UserUpdate {
	uu.mutation.SetPasswordHash(s)
	return uu
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordHash(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswordHash(*s)
	}
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetVerified sets the "verified" field.
func (uu *UserUpdate) SetVerified(b bool) *UserUpdate {
	uu.mutation.SetVerified(b)
	return uu
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetVerified(*b)
	}
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(i int) *UserUpdate {
	uu.mutation.SetRole(i)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(i *int) *UserUpdate {
	if i != nil {
		uu.SetRole(*i)
	}
	return uu
}

// SetAddress sets the "address" field.
func (uu *UserUpdate) SetAddress(s string) *UserUpdate {
	uu.mutation.SetAddress(s)
	return uu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetAddress(*s)
	}
	return uu
}

// ClearAddress clears the value of the "address" field.
func (uu *UserUpdate) ClearAddress() *UserUpdate {
	uu.mutation.ClearAddress()
	return uu
}

// SetPostalCode sets the "postal_code" field.
func (uu *UserUpdate) SetPostalCode(s string) *UserUpdate {
	uu.mutation.SetPostalCode(s)
	return uu
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePostalCode(s *string) *UserUpdate {
	if s != nil {
		uu.SetPostalCode(*s)
	}
	return uu
}

// ClearPostalCode clears the value of the "postal_code" field.
func (uu *UserUpdate) ClearPostalCode() *UserUpdate {
	uu.mutation.ClearPostalCode()
	return uu
}

// SetOtherAddressInfo sets the "other_address_info" field.
func (uu *UserUpdate) SetOtherAddressInfo(s string) *UserUpdate {
	uu.mutation.SetOtherAddressInfo(s)
	return uu
}

// SetNillableOtherAddressInfo sets the "other_address_info" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOtherAddressInfo(s *string) *UserUpdate {
	if s != nil {
		uu.SetOtherAddressInfo(*s)
	}
	return uu
}

// ClearOtherAddressInfo clears the value of the "other_address_info" field.
func (uu *UserUpdate) ClearOtherAddressInfo() *UserUpdate {
	uu.mutation.ClearOtherAddressInfo()
	return uu
}

// SetUserRoleID sets the "user_role" edge to the UserRole entity by ID.
func (uu *UserUpdate) SetUserRoleID(id int) *UserUpdate {
	uu.mutation.SetUserRoleID(id)
	return uu
}

// SetUserRole sets the "user_role" edge to the UserRole entity.
func (uu *UserUpdate) SetUserRole(u *UserRole) *UserUpdate {
	return uu.SetUserRoleID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearUserRole clears the "user_role" edge to the UserRole entity.
func (uu *UserUpdate) ClearUserRole() *UserUpdate {
	uu.mutation.ClearUserRole()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	if _, ok := uu.mutation.UserRoleID(); uu.mutation.UserRoleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "User.user_role"`)
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeJSON, value)
	}
	if uu.mutation.AvatarURLCleared() {
		_spec.ClearField(user.FieldAvatarURL, field.TypeJSON)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.LastReset(); ok {
		_spec.SetField(user.FieldLastReset, field.TypeTime, value)
	}
	if uu.mutation.LastResetCleared() {
		_spec.ClearField(user.FieldLastReset, field.TypeTime)
	}
	if value, ok := uu.mutation.LastVerification(); ok {
		_spec.SetField(user.FieldLastVerification, field.TypeTime, value)
	}
	if uu.mutation.LastVerificationCleared() {
		_spec.ClearField(user.FieldLastVerification, field.TypeTime)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Verified(); ok {
		_spec.SetField(user.FieldVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uu.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if uu.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := uu.mutation.PostalCode(); ok {
		_spec.SetField(user.FieldPostalCode, field.TypeString, value)
	}
	if uu.mutation.PostalCodeCleared() {
		_spec.ClearField(user.FieldPostalCode, field.TypeString)
	}
	if value, ok := uu.mutation.OtherAddressInfo(); ok {
		_spec.SetField(user.FieldOtherAddressInfo, field.TypeString, value)
	}
	if uu.mutation.OtherAddressInfoCleared() {
		_spec.ClearField(user.FieldOtherAddressInfo, field.TypeString)
	}
	if uu.mutation.UserRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UserRoleTable,
			Columns: []string{user.UserRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UserRoleTable,
			Columns: []string{user.UserRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetAvatarURL sets the "avatar_url" field.
func (uuo *UserUpdateOne) SetAvatarURL(u *url.URL) *UserUpdateOne {
	uuo.mutation.SetAvatarURL(u)
	return uuo
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (uuo *UserUpdateOne) ClearAvatarURL() *UserUpdateOne {
	uuo.mutation.ClearAvatarURL()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetLastReset sets the "last_reset" field.
func (uuo *UserUpdateOne) SetLastReset(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastReset(t)
	return uuo
}

// SetNillableLastReset sets the "last_reset" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastReset(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastReset(*t)
	}
	return uuo
}

// ClearLastReset clears the value of the "last_reset" field.
func (uuo *UserUpdateOne) ClearLastReset() *UserUpdateOne {
	uuo.mutation.ClearLastReset()
	return uuo
}

// SetLastVerification sets the "last_verification" field.
func (uuo *UserUpdateOne) SetLastVerification(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastVerification(t)
	return uuo
}

// SetNillableLastVerification sets the "last_verification" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastVerification(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastVerification(*t)
	}
	return uuo
}

// ClearLastVerification clears the value of the "last_verification" field.
func (uuo *UserUpdateOne) ClearLastVerification() *UserUpdateOne {
	uuo.mutation.ClearLastVerification()
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetPasswordHash sets the "password_hash" field.
func (uuo *UserUpdateOne) SetPasswordHash(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordHash(s)
	return uuo
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordHash(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswordHash(*s)
	}
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetVerified sets the "verified" field.
func (uuo *UserUpdateOne) SetVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetVerified(b)
	return uuo
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetVerified(*b)
	}
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(i int) *UserUpdateOne {
	uuo.mutation.SetRole(i)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetRole(*i)
	}
	return uuo
}

// SetAddress sets the "address" field.
func (uuo *UserUpdateOne) SetAddress(s string) *UserUpdateOne {
	uuo.mutation.SetAddress(s)
	return uuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAddress(*s)
	}
	return uuo
}

// ClearAddress clears the value of the "address" field.
func (uuo *UserUpdateOne) ClearAddress() *UserUpdateOne {
	uuo.mutation.ClearAddress()
	return uuo
}

// SetPostalCode sets the "postal_code" field.
func (uuo *UserUpdateOne) SetPostalCode(s string) *UserUpdateOne {
	uuo.mutation.SetPostalCode(s)
	return uuo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePostalCode(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPostalCode(*s)
	}
	return uuo
}

// ClearPostalCode clears the value of the "postal_code" field.
func (uuo *UserUpdateOne) ClearPostalCode() *UserUpdateOne {
	uuo.mutation.ClearPostalCode()
	return uuo
}

// SetOtherAddressInfo sets the "other_address_info" field.
func (uuo *UserUpdateOne) SetOtherAddressInfo(s string) *UserUpdateOne {
	uuo.mutation.SetOtherAddressInfo(s)
	return uuo
}

// SetNillableOtherAddressInfo sets the "other_address_info" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOtherAddressInfo(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOtherAddressInfo(*s)
	}
	return uuo
}

// ClearOtherAddressInfo clears the value of the "other_address_info" field.
func (uuo *UserUpdateOne) ClearOtherAddressInfo() *UserUpdateOne {
	uuo.mutation.ClearOtherAddressInfo()
	return uuo
}

// SetUserRoleID sets the "user_role" edge to the UserRole entity by ID.
func (uuo *UserUpdateOne) SetUserRoleID(id int) *UserUpdateOne {
	uuo.mutation.SetUserRoleID(id)
	return uuo
}

// SetUserRole sets the "user_role" edge to the UserRole entity.
func (uuo *UserUpdateOne) SetUserRole(u *UserRole) *UserUpdateOne {
	return uuo.SetUserRoleID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearUserRole clears the "user_role" edge to the UserRole entity.
func (uuo *UserUpdateOne) ClearUserRole() *UserUpdateOne {
	uuo.mutation.ClearUserRole()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	if _, ok := uuo.mutation.UserRoleID(); uuo.mutation.UserRoleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "User.user_role"`)
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeJSON, value)
	}
	if uuo.mutation.AvatarURLCleared() {
		_spec.ClearField(user.FieldAvatarURL, field.TypeJSON)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LastReset(); ok {
		_spec.SetField(user.FieldLastReset, field.TypeTime, value)
	}
	if uuo.mutation.LastResetCleared() {
		_spec.ClearField(user.FieldLastReset, field.TypeTime)
	}
	if value, ok := uuo.mutation.LastVerification(); ok {
		_spec.SetField(user.FieldLastVerification, field.TypeTime, value)
	}
	if uuo.mutation.LastVerificationCleared() {
		_spec.ClearField(user.FieldLastVerification, field.TypeTime)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Verified(); ok {
		_spec.SetField(user.FieldVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if uuo.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := uuo.mutation.PostalCode(); ok {
		_spec.SetField(user.FieldPostalCode, field.TypeString, value)
	}
	if uuo.mutation.PostalCodeCleared() {
		_spec.ClearField(user.FieldPostalCode, field.TypeString)
	}
	if value, ok := uuo.mutation.OtherAddressInfo(); ok {
		_spec.SetField(user.FieldOtherAddressInfo, field.TypeString, value)
	}
	if uuo.mutation.OtherAddressInfoCleared() {
		_spec.ClearField(user.FieldOtherAddressInfo, field.TypeString)
	}
	if uuo.mutation.UserRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UserRoleTable,
			Columns: []string{user.UserRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UserRoleTable,
			Columns: []string{user.UserRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
