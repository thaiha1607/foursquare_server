// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"github.com/thaiha1607/foursquare_server/ent/orderitem"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/workunitinfo"
)

// OrderItemUpdate is the builder for updating OrderItem entities.
type OrderItemUpdate struct {
	config
	hooks    []Hook
	mutation *OrderItemMutation
}

// Where appends a list predicates to the OrderItemUpdate builder.
func (oiu *OrderItemUpdate) Where(ps ...predicate.OrderItem) *OrderItemUpdate {
	oiu.mutation.Where(ps...)
	return oiu
}

// SetUpdatedAt sets the "updated_at" field.
func (oiu *OrderItemUpdate) SetUpdatedAt(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetUpdatedAt(t)
	return oiu
}

// SetSrcUnitID sets the "src_unit_id" field.
func (oiu *OrderItemUpdate) SetSrcUnitID(u uuid.UUID) *OrderItemUpdate {
	oiu.mutation.SetSrcUnitID(u)
	return oiu
}

// SetNillableSrcUnitID sets the "src_unit_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableSrcUnitID(u *uuid.UUID) *OrderItemUpdate {
	if u != nil {
		oiu.SetSrcUnitID(*u)
	}
	return oiu
}

// ClearSrcUnitID clears the value of the "src_unit_id" field.
func (oiu *OrderItemUpdate) ClearSrcUnitID() *OrderItemUpdate {
	oiu.mutation.ClearSrcUnitID()
	return oiu
}

// SetDstUnitID sets the "dst_unit_id" field.
func (oiu *OrderItemUpdate) SetDstUnitID(u uuid.UUID) *OrderItemUpdate {
	oiu.mutation.SetDstUnitID(u)
	return oiu
}

// SetNillableDstUnitID sets the "dst_unit_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableDstUnitID(u *uuid.UUID) *OrderItemUpdate {
	if u != nil {
		oiu.SetDstUnitID(*u)
	}
	return oiu
}

// ClearDstUnitID clears the value of the "dst_unit_id" field.
func (oiu *OrderItemUpdate) ClearDstUnitID() *OrderItemUpdate {
	oiu.mutation.ClearDstUnitID()
	return oiu
}

// SetQty sets the "qty" field.
func (oiu *OrderItemUpdate) SetQty(d decimal.Decimal) *OrderItemUpdate {
	oiu.mutation.ResetQty()
	oiu.mutation.SetQty(d)
	return oiu
}

// SetNillableQty sets the "qty" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableQty(d *decimal.Decimal) *OrderItemUpdate {
	if d != nil {
		oiu.SetQty(*d)
	}
	return oiu
}

// AddQty adds d to the "qty" field.
func (oiu *OrderItemUpdate) AddQty(d decimal.Decimal) *OrderItemUpdate {
	oiu.mutation.AddQty(d)
	return oiu
}

// SetPricePerUnit sets the "price_per_unit" field.
func (oiu *OrderItemUpdate) SetPricePerUnit(d decimal.Decimal) *OrderItemUpdate {
	oiu.mutation.ResetPricePerUnit()
	oiu.mutation.SetPricePerUnit(d)
	return oiu
}

// SetNillablePricePerUnit sets the "price_per_unit" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillablePricePerUnit(d *decimal.Decimal) *OrderItemUpdate {
	if d != nil {
		oiu.SetPricePerUnit(*d)
	}
	return oiu
}

// AddPricePerUnit adds d to the "price_per_unit" field.
func (oiu *OrderItemUpdate) AddPricePerUnit(d decimal.Decimal) *OrderItemUpdate {
	oiu.mutation.AddPricePerUnit(d)
	return oiu
}

// SetStatus sets the "status" field.
func (oiu *OrderItemUpdate) SetStatus(o orderitem.Status) *OrderItemUpdate {
	oiu.mutation.SetStatus(o)
	return oiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableStatus(o *orderitem.Status) *OrderItemUpdate {
	if o != nil {
		oiu.SetStatus(*o)
	}
	return oiu
}

// SetSourceWorkUnitID sets the "source_work_unit" edge to the WorkUnitInfo entity by ID.
func (oiu *OrderItemUpdate) SetSourceWorkUnitID(id uuid.UUID) *OrderItemUpdate {
	oiu.mutation.SetSourceWorkUnitID(id)
	return oiu
}

// SetNillableSourceWorkUnitID sets the "source_work_unit" edge to the WorkUnitInfo entity by ID if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableSourceWorkUnitID(id *uuid.UUID) *OrderItemUpdate {
	if id != nil {
		oiu = oiu.SetSourceWorkUnitID(*id)
	}
	return oiu
}

// SetSourceWorkUnit sets the "source_work_unit" edge to the WorkUnitInfo entity.
func (oiu *OrderItemUpdate) SetSourceWorkUnit(w *WorkUnitInfo) *OrderItemUpdate {
	return oiu.SetSourceWorkUnitID(w.ID)
}

// SetDestinationWorkUnitID sets the "destination_work_unit" edge to the WorkUnitInfo entity by ID.
func (oiu *OrderItemUpdate) SetDestinationWorkUnitID(id uuid.UUID) *OrderItemUpdate {
	oiu.mutation.SetDestinationWorkUnitID(id)
	return oiu
}

// SetNillableDestinationWorkUnitID sets the "destination_work_unit" edge to the WorkUnitInfo entity by ID if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableDestinationWorkUnitID(id *uuid.UUID) *OrderItemUpdate {
	if id != nil {
		oiu = oiu.SetDestinationWorkUnitID(*id)
	}
	return oiu
}

// SetDestinationWorkUnit sets the "destination_work_unit" edge to the WorkUnitInfo entity.
func (oiu *OrderItemUpdate) SetDestinationWorkUnit(w *WorkUnitInfo) *OrderItemUpdate {
	return oiu.SetDestinationWorkUnitID(w.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiu *OrderItemUpdate) Mutation() *OrderItemMutation {
	return oiu.mutation
}

// ClearSourceWorkUnit clears the "source_work_unit" edge to the WorkUnitInfo entity.
func (oiu *OrderItemUpdate) ClearSourceWorkUnit() *OrderItemUpdate {
	oiu.mutation.ClearSourceWorkUnit()
	return oiu
}

// ClearDestinationWorkUnit clears the "destination_work_unit" edge to the WorkUnitInfo entity.
func (oiu *OrderItemUpdate) ClearDestinationWorkUnit() *OrderItemUpdate {
	oiu.mutation.ClearDestinationWorkUnit()
	return oiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OrderItemUpdate) Save(ctx context.Context) (int, error) {
	oiu.defaults()
	return withHooks(ctx, oiu.sqlSave, oiu.mutation, oiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrderItemUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrderItemUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrderItemUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiu *OrderItemUpdate) defaults() {
	if _, ok := oiu.mutation.UpdatedAt(); !ok {
		v := orderitem.UpdateDefaultUpdatedAt()
		oiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiu *OrderItemUpdate) check() error {
	if v, ok := oiu.mutation.Status(); ok {
		if err := orderitem.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "OrderItem.status": %w`, err)}
		}
	}
	if _, ok := oiu.mutation.OrderID(); oiu.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderItem.order"`)
	}
	if _, ok := oiu.mutation.ProductID(); oiu.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderItem.product"`)
	}
	if _, ok := oiu.mutation.ProductColorID(); oiu.mutation.ProductColorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderItem.product_color"`)
	}
	return nil
}

func (oiu *OrderItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderitem.Table, orderitem.Columns, sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID))
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.UpdatedAt(); ok {
		_spec.SetField(orderitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oiu.mutation.Qty(); ok {
		_spec.SetField(orderitem.FieldQty, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedQty(); ok {
		_spec.AddField(orderitem.FieldQty, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.PricePerUnit(); ok {
		_spec.SetField(orderitem.FieldPricePerUnit, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedPricePerUnit(); ok {
		_spec.AddField(orderitem.FieldPricePerUnit, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.Status(); ok {
		_spec.SetField(orderitem.FieldStatus, field.TypeEnum, value)
	}
	if oiu.mutation.SourceWorkUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.SourceWorkUnitTable,
			Columns: []string{orderitem.SourceWorkUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workunitinfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.SourceWorkUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.SourceWorkUnitTable,
			Columns: []string{orderitem.SourceWorkUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workunitinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.DestinationWorkUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.DestinationWorkUnitTable,
			Columns: []string{orderitem.DestinationWorkUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workunitinfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.DestinationWorkUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.DestinationWorkUnitTable,
			Columns: []string{orderitem.DestinationWorkUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workunitinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oiu.mutation.done = true
	return n, nil
}

// OrderItemUpdateOne is the builder for updating a single OrderItem entity.
type OrderItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderItemMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (oiuo *OrderItemUpdateOne) SetUpdatedAt(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetUpdatedAt(t)
	return oiuo
}

// SetSrcUnitID sets the "src_unit_id" field.
func (oiuo *OrderItemUpdateOne) SetSrcUnitID(u uuid.UUID) *OrderItemUpdateOne {
	oiuo.mutation.SetSrcUnitID(u)
	return oiuo
}

// SetNillableSrcUnitID sets the "src_unit_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableSrcUnitID(u *uuid.UUID) *OrderItemUpdateOne {
	if u != nil {
		oiuo.SetSrcUnitID(*u)
	}
	return oiuo
}

// ClearSrcUnitID clears the value of the "src_unit_id" field.
func (oiuo *OrderItemUpdateOne) ClearSrcUnitID() *OrderItemUpdateOne {
	oiuo.mutation.ClearSrcUnitID()
	return oiuo
}

// SetDstUnitID sets the "dst_unit_id" field.
func (oiuo *OrderItemUpdateOne) SetDstUnitID(u uuid.UUID) *OrderItemUpdateOne {
	oiuo.mutation.SetDstUnitID(u)
	return oiuo
}

// SetNillableDstUnitID sets the "dst_unit_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableDstUnitID(u *uuid.UUID) *OrderItemUpdateOne {
	if u != nil {
		oiuo.SetDstUnitID(*u)
	}
	return oiuo
}

// ClearDstUnitID clears the value of the "dst_unit_id" field.
func (oiuo *OrderItemUpdateOne) ClearDstUnitID() *OrderItemUpdateOne {
	oiuo.mutation.ClearDstUnitID()
	return oiuo
}

// SetQty sets the "qty" field.
func (oiuo *OrderItemUpdateOne) SetQty(d decimal.Decimal) *OrderItemUpdateOne {
	oiuo.mutation.ResetQty()
	oiuo.mutation.SetQty(d)
	return oiuo
}

// SetNillableQty sets the "qty" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableQty(d *decimal.Decimal) *OrderItemUpdateOne {
	if d != nil {
		oiuo.SetQty(*d)
	}
	return oiuo
}

// AddQty adds d to the "qty" field.
func (oiuo *OrderItemUpdateOne) AddQty(d decimal.Decimal) *OrderItemUpdateOne {
	oiuo.mutation.AddQty(d)
	return oiuo
}

// SetPricePerUnit sets the "price_per_unit" field.
func (oiuo *OrderItemUpdateOne) SetPricePerUnit(d decimal.Decimal) *OrderItemUpdateOne {
	oiuo.mutation.ResetPricePerUnit()
	oiuo.mutation.SetPricePerUnit(d)
	return oiuo
}

// SetNillablePricePerUnit sets the "price_per_unit" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillablePricePerUnit(d *decimal.Decimal) *OrderItemUpdateOne {
	if d != nil {
		oiuo.SetPricePerUnit(*d)
	}
	return oiuo
}

// AddPricePerUnit adds d to the "price_per_unit" field.
func (oiuo *OrderItemUpdateOne) AddPricePerUnit(d decimal.Decimal) *OrderItemUpdateOne {
	oiuo.mutation.AddPricePerUnit(d)
	return oiuo
}

// SetStatus sets the "status" field.
func (oiuo *OrderItemUpdateOne) SetStatus(o orderitem.Status) *OrderItemUpdateOne {
	oiuo.mutation.SetStatus(o)
	return oiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableStatus(o *orderitem.Status) *OrderItemUpdateOne {
	if o != nil {
		oiuo.SetStatus(*o)
	}
	return oiuo
}

// SetSourceWorkUnitID sets the "source_work_unit" edge to the WorkUnitInfo entity by ID.
func (oiuo *OrderItemUpdateOne) SetSourceWorkUnitID(id uuid.UUID) *OrderItemUpdateOne {
	oiuo.mutation.SetSourceWorkUnitID(id)
	return oiuo
}

// SetNillableSourceWorkUnitID sets the "source_work_unit" edge to the WorkUnitInfo entity by ID if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableSourceWorkUnitID(id *uuid.UUID) *OrderItemUpdateOne {
	if id != nil {
		oiuo = oiuo.SetSourceWorkUnitID(*id)
	}
	return oiuo
}

// SetSourceWorkUnit sets the "source_work_unit" edge to the WorkUnitInfo entity.
func (oiuo *OrderItemUpdateOne) SetSourceWorkUnit(w *WorkUnitInfo) *OrderItemUpdateOne {
	return oiuo.SetSourceWorkUnitID(w.ID)
}

// SetDestinationWorkUnitID sets the "destination_work_unit" edge to the WorkUnitInfo entity by ID.
func (oiuo *OrderItemUpdateOne) SetDestinationWorkUnitID(id uuid.UUID) *OrderItemUpdateOne {
	oiuo.mutation.SetDestinationWorkUnitID(id)
	return oiuo
}

// SetNillableDestinationWorkUnitID sets the "destination_work_unit" edge to the WorkUnitInfo entity by ID if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableDestinationWorkUnitID(id *uuid.UUID) *OrderItemUpdateOne {
	if id != nil {
		oiuo = oiuo.SetDestinationWorkUnitID(*id)
	}
	return oiuo
}

// SetDestinationWorkUnit sets the "destination_work_unit" edge to the WorkUnitInfo entity.
func (oiuo *OrderItemUpdateOne) SetDestinationWorkUnit(w *WorkUnitInfo) *OrderItemUpdateOne {
	return oiuo.SetDestinationWorkUnitID(w.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiuo *OrderItemUpdateOne) Mutation() *OrderItemMutation {
	return oiuo.mutation
}

// ClearSourceWorkUnit clears the "source_work_unit" edge to the WorkUnitInfo entity.
func (oiuo *OrderItemUpdateOne) ClearSourceWorkUnit() *OrderItemUpdateOne {
	oiuo.mutation.ClearSourceWorkUnit()
	return oiuo
}

// ClearDestinationWorkUnit clears the "destination_work_unit" edge to the WorkUnitInfo entity.
func (oiuo *OrderItemUpdateOne) ClearDestinationWorkUnit() *OrderItemUpdateOne {
	oiuo.mutation.ClearDestinationWorkUnit()
	return oiuo
}

// Where appends a list predicates to the OrderItemUpdate builder.
func (oiuo *OrderItemUpdateOne) Where(ps ...predicate.OrderItem) *OrderItemUpdateOne {
	oiuo.mutation.Where(ps...)
	return oiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OrderItemUpdateOne) Select(field string, fields ...string) *OrderItemUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OrderItem entity.
func (oiuo *OrderItemUpdateOne) Save(ctx context.Context) (*OrderItem, error) {
	oiuo.defaults()
	return withHooks(ctx, oiuo.sqlSave, oiuo.mutation, oiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) SaveX(ctx context.Context) *OrderItem {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OrderItemUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiuo *OrderItemUpdateOne) defaults() {
	if _, ok := oiuo.mutation.UpdatedAt(); !ok {
		v := orderitem.UpdateDefaultUpdatedAt()
		oiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiuo *OrderItemUpdateOne) check() error {
	if v, ok := oiuo.mutation.Status(); ok {
		if err := orderitem.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "OrderItem.status": %w`, err)}
		}
	}
	if _, ok := oiuo.mutation.OrderID(); oiuo.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderItem.order"`)
	}
	if _, ok := oiuo.mutation.ProductID(); oiuo.mutation.ProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderItem.product"`)
	}
	if _, ok := oiuo.mutation.ProductColorID(); oiuo.mutation.ProductColorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderItem.product_color"`)
	}
	return nil
}

func (oiuo *OrderItemUpdateOne) sqlSave(ctx context.Context) (_node *OrderItem, err error) {
	if err := oiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderitem.Table, orderitem.Columns, sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeUUID))
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitem.FieldID)
		for _, f := range fields {
			if !orderitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orderitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := oiuo.mutation.Qty(); ok {
		_spec.SetField(orderitem.FieldQty, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedQty(); ok {
		_spec.AddField(orderitem.FieldQty, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.PricePerUnit(); ok {
		_spec.SetField(orderitem.FieldPricePerUnit, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedPricePerUnit(); ok {
		_spec.AddField(orderitem.FieldPricePerUnit, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.Status(); ok {
		_spec.SetField(orderitem.FieldStatus, field.TypeEnum, value)
	}
	if oiuo.mutation.SourceWorkUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.SourceWorkUnitTable,
			Columns: []string{orderitem.SourceWorkUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workunitinfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.SourceWorkUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.SourceWorkUnitTable,
			Columns: []string{orderitem.SourceWorkUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workunitinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.DestinationWorkUnitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.DestinationWorkUnitTable,
			Columns: []string{orderitem.DestinationWorkUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workunitinfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.DestinationWorkUnitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderitem.DestinationWorkUnitTable,
			Columns: []string{orderitem.DestinationWorkUnitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workunitinfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderItem{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oiuo.mutation.done = true
	return _node, nil
}
