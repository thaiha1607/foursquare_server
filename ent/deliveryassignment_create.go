// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/deliveryassignment"
	"github.com/thaiha1607/foursquare_server/ent/person"
	"github.com/thaiha1607/foursquare_server/ent/shipment"
)

// DeliveryAssignmentCreate is the builder for creating a DeliveryAssignment entity.
type DeliveryAssignmentCreate struct {
	config
	mutation *DeliveryAssignmentMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dac *DeliveryAssignmentCreate) SetCreatedAt(t time.Time) *DeliveryAssignmentCreate {
	dac.mutation.SetCreatedAt(t)
	return dac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dac *DeliveryAssignmentCreate) SetNillableCreatedAt(t *time.Time) *DeliveryAssignmentCreate {
	if t != nil {
		dac.SetCreatedAt(*t)
	}
	return dac
}

// SetUpdatedAt sets the "updated_at" field.
func (dac *DeliveryAssignmentCreate) SetUpdatedAt(t time.Time) *DeliveryAssignmentCreate {
	dac.mutation.SetUpdatedAt(t)
	return dac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dac *DeliveryAssignmentCreate) SetNillableUpdatedAt(t *time.Time) *DeliveryAssignmentCreate {
	if t != nil {
		dac.SetUpdatedAt(*t)
	}
	return dac
}

// SetShipmentID sets the "shipment_id" field.
func (dac *DeliveryAssignmentCreate) SetShipmentID(u uuid.UUID) *DeliveryAssignmentCreate {
	dac.mutation.SetShipmentID(u)
	return dac
}

// SetStaffID sets the "staff_id" field.
func (dac *DeliveryAssignmentCreate) SetStaffID(u uuid.UUID) *DeliveryAssignmentCreate {
	dac.mutation.SetStaffID(u)
	return dac
}

// SetStatus sets the "status" field.
func (dac *DeliveryAssignmentCreate) SetStatus(d deliveryassignment.Status) *DeliveryAssignmentCreate {
	dac.mutation.SetStatus(d)
	return dac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dac *DeliveryAssignmentCreate) SetNillableStatus(d *deliveryassignment.Status) *DeliveryAssignmentCreate {
	if d != nil {
		dac.SetStatus(*d)
	}
	return dac
}

// SetNote sets the "note" field.
func (dac *DeliveryAssignmentCreate) SetNote(s string) *DeliveryAssignmentCreate {
	dac.mutation.SetNote(s)
	return dac
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (dac *DeliveryAssignmentCreate) SetNillableNote(s *string) *DeliveryAssignmentCreate {
	if s != nil {
		dac.SetNote(*s)
	}
	return dac
}

// SetID sets the "id" field.
func (dac *DeliveryAssignmentCreate) SetID(u uuid.UUID) *DeliveryAssignmentCreate {
	dac.mutation.SetID(u)
	return dac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dac *DeliveryAssignmentCreate) SetNillableID(u *uuid.UUID) *DeliveryAssignmentCreate {
	if u != nil {
		dac.SetID(*u)
	}
	return dac
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (dac *DeliveryAssignmentCreate) SetShipment(s *Shipment) *DeliveryAssignmentCreate {
	return dac.SetShipmentID(s.ID)
}

// SetStaff sets the "staff" edge to the Person entity.
func (dac *DeliveryAssignmentCreate) SetStaff(p *Person) *DeliveryAssignmentCreate {
	return dac.SetStaffID(p.ID)
}

// Mutation returns the DeliveryAssignmentMutation object of the builder.
func (dac *DeliveryAssignmentCreate) Mutation() *DeliveryAssignmentMutation {
	return dac.mutation
}

// Save creates the DeliveryAssignment in the database.
func (dac *DeliveryAssignmentCreate) Save(ctx context.Context) (*DeliveryAssignment, error) {
	dac.defaults()
	return withHooks(ctx, dac.sqlSave, dac.mutation, dac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dac *DeliveryAssignmentCreate) SaveX(ctx context.Context) *DeliveryAssignment {
	v, err := dac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dac *DeliveryAssignmentCreate) Exec(ctx context.Context) error {
	_, err := dac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dac *DeliveryAssignmentCreate) ExecX(ctx context.Context) {
	if err := dac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dac *DeliveryAssignmentCreate) defaults() {
	if _, ok := dac.mutation.CreatedAt(); !ok {
		v := deliveryassignment.DefaultCreatedAt()
		dac.mutation.SetCreatedAt(v)
	}
	if _, ok := dac.mutation.UpdatedAt(); !ok {
		v := deliveryassignment.DefaultUpdatedAt()
		dac.mutation.SetUpdatedAt(v)
	}
	if _, ok := dac.mutation.Status(); !ok {
		v := deliveryassignment.DefaultStatus
		dac.mutation.SetStatus(v)
	}
	if _, ok := dac.mutation.ID(); !ok {
		v := deliveryassignment.DefaultID()
		dac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dac *DeliveryAssignmentCreate) check() error {
	if _, ok := dac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DeliveryAssignment.created_at"`)}
	}
	if _, ok := dac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DeliveryAssignment.updated_at"`)}
	}
	if _, ok := dac.mutation.ShipmentID(); !ok {
		return &ValidationError{Name: "shipment_id", err: errors.New(`ent: missing required field "DeliveryAssignment.shipment_id"`)}
	}
	if _, ok := dac.mutation.StaffID(); !ok {
		return &ValidationError{Name: "staff_id", err: errors.New(`ent: missing required field "DeliveryAssignment.staff_id"`)}
	}
	if _, ok := dac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "DeliveryAssignment.status"`)}
	}
	if v, ok := dac.mutation.Status(); ok {
		if err := deliveryassignment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DeliveryAssignment.status": %w`, err)}
		}
	}
	if _, ok := dac.mutation.ShipmentID(); !ok {
		return &ValidationError{Name: "shipment", err: errors.New(`ent: missing required edge "DeliveryAssignment.shipment"`)}
	}
	if _, ok := dac.mutation.StaffID(); !ok {
		return &ValidationError{Name: "staff", err: errors.New(`ent: missing required edge "DeliveryAssignment.staff"`)}
	}
	return nil
}

func (dac *DeliveryAssignmentCreate) sqlSave(ctx context.Context) (*DeliveryAssignment, error) {
	if err := dac.check(); err != nil {
		return nil, err
	}
	_node, _spec := dac.createSpec()
	if err := sqlgraph.CreateNode(ctx, dac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dac.mutation.id = &_node.ID
	dac.mutation.done = true
	return _node, nil
}

func (dac *DeliveryAssignmentCreate) createSpec() (*DeliveryAssignment, *sqlgraph.CreateSpec) {
	var (
		_node = &DeliveryAssignment{config: dac.config}
		_spec = sqlgraph.NewCreateSpec(deliveryassignment.Table, sqlgraph.NewFieldSpec(deliveryassignment.FieldID, field.TypeUUID))
	)
	if id, ok := dac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dac.mutation.CreatedAt(); ok {
		_spec.SetField(deliveryassignment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dac.mutation.UpdatedAt(); ok {
		_spec.SetField(deliveryassignment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dac.mutation.Status(); ok {
		_spec.SetField(deliveryassignment.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := dac.mutation.Note(); ok {
		_spec.SetField(deliveryassignment.FieldNote, field.TypeString, value)
		_node.Note = &value
	}
	if nodes := dac.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryassignment.ShipmentTable,
			Columns: []string{deliveryassignment.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ShipmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dac.mutation.StaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryassignment.StaffTable,
			Columns: []string{deliveryassignment.StaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StaffID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeliveryAssignmentCreateBulk is the builder for creating many DeliveryAssignment entities in bulk.
type DeliveryAssignmentCreateBulk struct {
	config
	err      error
	builders []*DeliveryAssignmentCreate
}

// Save creates the DeliveryAssignment entities in the database.
func (dacb *DeliveryAssignmentCreateBulk) Save(ctx context.Context) ([]*DeliveryAssignment, error) {
	if dacb.err != nil {
		return nil, dacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dacb.builders))
	nodes := make([]*DeliveryAssignment, len(dacb.builders))
	mutators := make([]Mutator, len(dacb.builders))
	for i := range dacb.builders {
		func(i int, root context.Context) {
			builder := dacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliveryAssignmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dacb *DeliveryAssignmentCreateBulk) SaveX(ctx context.Context) []*DeliveryAssignment {
	v, err := dacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dacb *DeliveryAssignmentCreateBulk) Exec(ctx context.Context) error {
	_, err := dacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dacb *DeliveryAssignmentCreateBulk) ExecX(ctx context.Context) {
	if err := dacb.Exec(ctx); err != nil {
		panic(err)
	}
}
