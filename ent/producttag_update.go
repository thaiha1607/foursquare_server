// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/producttag"
)

// ProductTagUpdate is the builder for updating ProductTag entities.
type ProductTagUpdate struct {
	config
	hooks    []Hook
	mutation *ProductTagMutation
}

// Where appends a list predicates to the ProductTagUpdate builder.
func (ptu *ProductTagUpdate) Where(ps ...predicate.ProductTag) *ProductTagUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// Mutation returns the ProductTagMutation object of the builder.
func (ptu *ProductTagUpdate) Mutation() *ProductTagMutation {
	return ptu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *ProductTagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *ProductTagUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *ProductTagUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *ProductTagUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *ProductTagUpdate) check() error {
	if _, ok := ptu.mutation.ProductsID(); ptu.mutation.ProductsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductTag.products"`)
	}
	if _, ok := ptu.mutation.TagsID(); ptu.mutation.TagsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductTag.tags"`)
	}
	return nil
}

func (ptu *ProductTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(producttag.Table, producttag.Columns, sqlgraph.NewFieldSpec(producttag.FieldProductID, field.TypeUUID), sqlgraph.NewFieldSpec(producttag.FieldTagID, field.TypeUUID))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producttag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// ProductTagUpdateOne is the builder for updating a single ProductTag entity.
type ProductTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductTagMutation
}

// Mutation returns the ProductTagMutation object of the builder.
func (ptuo *ProductTagUpdateOne) Mutation() *ProductTagMutation {
	return ptuo.mutation
}

// Where appends a list predicates to the ProductTagUpdate builder.
func (ptuo *ProductTagUpdateOne) Where(ps ...predicate.ProductTag) *ProductTagUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *ProductTagUpdateOne) Select(field string, fields ...string) *ProductTagUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated ProductTag entity.
func (ptuo *ProductTagUpdateOne) Save(ctx context.Context) (*ProductTag, error) {
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *ProductTagUpdateOne) SaveX(ctx context.Context) *ProductTag {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *ProductTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *ProductTagUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *ProductTagUpdateOne) check() error {
	if _, ok := ptuo.mutation.ProductsID(); ptuo.mutation.ProductsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductTag.products"`)
	}
	if _, ok := ptuo.mutation.TagsID(); ptuo.mutation.TagsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ProductTag.tags"`)
	}
	return nil
}

func (ptuo *ProductTagUpdateOne) sqlSave(ctx context.Context) (_node *ProductTag, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(producttag.Table, producttag.Columns, sqlgraph.NewFieldSpec(producttag.FieldProductID, field.TypeUUID), sqlgraph.NewFieldSpec(producttag.FieldTagID, field.TypeUUID))
	if id, ok := ptuo.mutation.ProductID(); !ok {
		return nil, &ValidationError{Name: "product_id", err: errors.New(`ent: missing "ProductTag.product_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := ptuo.mutation.TagID(); !ok {
		return nil, &ValidationError{Name: "tag_id", err: errors.New(`ent: missing "ProductTag.tag_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !producttag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &ProductTag{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{producttag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
