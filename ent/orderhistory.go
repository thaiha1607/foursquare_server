// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/order"
	"github.com/thaiha1607/foursquare_server/ent/orderhistory"
	"github.com/thaiha1607/foursquare_server/ent/orderstatuscode"
	"github.com/thaiha1607/foursquare_server/ent/person"
)

// OrderHistory is the model entity for the OrderHistory schema.
type OrderHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// PersonID holds the value of the "person_id" field.
	PersonID uuid.UUID `json:"person_id,omitempty"`
	// OldStatusCode holds the value of the "old_status_code" field.
	OldStatusCode *int `json:"old_status_code,omitempty"`
	// NewStatusCode holds the value of the "new_status_code" field.
	NewStatusCode *int `json:"new_status_code,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderHistoryQuery when eager-loading is set.
	Edges        OrderHistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderHistoryEdges holds the relations/edges for other nodes in the graph.
type OrderHistoryEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// Person holds the value of the person edge.
	Person *Person `json:"person,omitempty"`
	// OldStatus holds the value of the old_status edge.
	OldStatus *OrderStatusCode `json:"old_status,omitempty"`
	// NewStatus holds the value of the new_status edge.
	NewStatus *OrderStatusCode `json:"new_status,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderHistoryEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// PersonOrErr returns the Person value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderHistoryEdges) PersonOrErr() (*Person, error) {
	if e.Person != nil {
		return e.Person, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: person.Label}
	}
	return nil, &NotLoadedError{edge: "person"}
}

// OldStatusOrErr returns the OldStatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderHistoryEdges) OldStatusOrErr() (*OrderStatusCode, error) {
	if e.OldStatus != nil {
		return e.OldStatus, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: orderstatuscode.Label}
	}
	return nil, &NotLoadedError{edge: "old_status"}
}

// NewStatusOrErr returns the NewStatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderHistoryEdges) NewStatusOrErr() (*OrderStatusCode, error) {
	if e.NewStatus != nil {
		return e.NewStatus, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: orderstatuscode.Label}
	}
	return nil, &NotLoadedError{edge: "new_status"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderhistory.FieldOldStatusCode, orderhistory.FieldNewStatusCode:
			values[i] = new(sql.NullInt64)
		case orderhistory.FieldDescription:
			values[i] = new(sql.NullString)
		case orderhistory.FieldCreatedAt, orderhistory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case orderhistory.FieldID, orderhistory.FieldOrderID, orderhistory.FieldPersonID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderHistory fields.
func (oh *OrderHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderhistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oh.ID = *value
			}
		case orderhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oh.CreatedAt = value.Time
			}
		case orderhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oh.UpdatedAt = value.Time
			}
		case orderhistory.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				oh.OrderID = *value
			}
		case orderhistory.FieldPersonID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field person_id", values[i])
			} else if value != nil {
				oh.PersonID = *value
			}
		case orderhistory.FieldOldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field old_status_code", values[i])
			} else if value.Valid {
				oh.OldStatusCode = new(int)
				*oh.OldStatusCode = int(value.Int64)
			}
		case orderhistory.FieldNewStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field new_status_code", values[i])
			} else if value.Valid {
				oh.NewStatusCode = new(int)
				*oh.NewStatusCode = int(value.Int64)
			}
		case orderhistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				oh.Description = new(string)
				*oh.Description = value.String
			}
		default:
			oh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderHistory.
// This includes values selected through modifiers, order, etc.
func (oh *OrderHistory) Value(name string) (ent.Value, error) {
	return oh.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderHistory entity.
func (oh *OrderHistory) QueryOrder() *OrderQuery {
	return NewOrderHistoryClient(oh.config).QueryOrder(oh)
}

// QueryPerson queries the "person" edge of the OrderHistory entity.
func (oh *OrderHistory) QueryPerson() *PersonQuery {
	return NewOrderHistoryClient(oh.config).QueryPerson(oh)
}

// QueryOldStatus queries the "old_status" edge of the OrderHistory entity.
func (oh *OrderHistory) QueryOldStatus() *OrderStatusCodeQuery {
	return NewOrderHistoryClient(oh.config).QueryOldStatus(oh)
}

// QueryNewStatus queries the "new_status" edge of the OrderHistory entity.
func (oh *OrderHistory) QueryNewStatus() *OrderStatusCodeQuery {
	return NewOrderHistoryClient(oh.config).QueryNewStatus(oh)
}

// Update returns a builder for updating this OrderHistory.
// Note that you need to call OrderHistory.Unwrap() before calling this method if this OrderHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (oh *OrderHistory) Update() *OrderHistoryUpdateOne {
	return NewOrderHistoryClient(oh.config).UpdateOne(oh)
}

// Unwrap unwraps the OrderHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oh *OrderHistory) Unwrap() *OrderHistory {
	_tx, ok := oh.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderHistory is not a transactional entity")
	}
	oh.config.driver = _tx.drv
	return oh
}

// String implements the fmt.Stringer.
func (oh *OrderHistory) String() string {
	var builder strings.Builder
	builder.WriteString("OrderHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oh.ID))
	builder.WriteString("created_at=")
	builder.WriteString(oh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.OrderID))
	builder.WriteString(", ")
	builder.WriteString("person_id=")
	builder.WriteString(fmt.Sprintf("%v", oh.PersonID))
	builder.WriteString(", ")
	if v := oh.OldStatusCode; v != nil {
		builder.WriteString("old_status_code=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := oh.NewStatusCode; v != nil {
		builder.WriteString("new_status_code=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := oh.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// OrderHistories is a parsable slice of OrderHistory.
type OrderHistories []*OrderHistory
