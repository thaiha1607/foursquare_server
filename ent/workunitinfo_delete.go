// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/workunitinfo"
)

// WorkUnitInfoDelete is the builder for deleting a WorkUnitInfo entity.
type WorkUnitInfoDelete struct {
	config
	hooks    []Hook
	mutation *WorkUnitInfoMutation
}

// Where appends a list predicates to the WorkUnitInfoDelete builder.
func (wuid *WorkUnitInfoDelete) Where(ps ...predicate.WorkUnitInfo) *WorkUnitInfoDelete {
	wuid.mutation.Where(ps...)
	return wuid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wuid *WorkUnitInfoDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wuid.sqlExec, wuid.mutation, wuid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wuid *WorkUnitInfoDelete) ExecX(ctx context.Context) int {
	n, err := wuid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wuid *WorkUnitInfoDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workunitinfo.Table, sqlgraph.NewFieldSpec(workunitinfo.FieldID, field.TypeUUID))
	if ps := wuid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wuid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wuid.mutation.done = true
	return affected, err
}

// WorkUnitInfoDeleteOne is the builder for deleting a single WorkUnitInfo entity.
type WorkUnitInfoDeleteOne struct {
	wuid *WorkUnitInfoDelete
}

// Where appends a list predicates to the WorkUnitInfoDelete builder.
func (wuido *WorkUnitInfoDeleteOne) Where(ps ...predicate.WorkUnitInfo) *WorkUnitInfoDeleteOne {
	wuido.wuid.mutation.Where(ps...)
	return wuido
}

// Exec executes the deletion query.
func (wuido *WorkUnitInfoDeleteOne) Exec(ctx context.Context) error {
	n, err := wuido.wuid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workunitinfo.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wuido *WorkUnitInfoDeleteOne) ExecX(ctx context.Context) {
	if err := wuido.Exec(ctx); err != nil {
		panic(err)
	}
}
