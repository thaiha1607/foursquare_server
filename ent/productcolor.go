// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/thaiha1607/foursquare_server/ent/productcolor"
)

// ProductColor is the model entity for the ProductColor schema.
type ProductColor struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ColorCode holds the value of the "color_code" field.
	ColorCode    string `json:"color_code,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductColor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productcolor.FieldID, productcolor.FieldName, productcolor.FieldColorCode:
			values[i] = new(sql.NullString)
		case productcolor.FieldCreatedAt, productcolor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductColor fields.
func (pc *ProductColor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productcolor.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pc.ID = value.String
			}
		case productcolor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pc.CreatedAt = new(time.Time)
				*pc.CreatedAt = value.Time
			}
		case productcolor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pc.UpdatedAt = new(time.Time)
				*pc.UpdatedAt = value.Time
			}
		case productcolor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pc.Name = value.String
			}
		case productcolor.FieldColorCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color_code", values[i])
			} else if value.Valid {
				pc.ColorCode = value.String
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductColor.
// This includes values selected through modifiers, order, etc.
func (pc *ProductColor) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// Update returns a builder for updating this ProductColor.
// Note that you need to call ProductColor.Unwrap() before calling this method if this ProductColor
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *ProductColor) Update() *ProductColorUpdateOne {
	return NewProductColorClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the ProductColor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *ProductColor) Unwrap() *ProductColor {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductColor is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *ProductColor) String() string {
	var builder strings.Builder
	builder.WriteString("ProductColor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	if v := pc.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pc.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pc.Name)
	builder.WriteString(", ")
	builder.WriteString("color_code=")
	builder.WriteString(pc.ColorCode)
	builder.WriteByte(')')
	return builder.String()
}

// ProductColors is a parsable slice of ProductColor.
type ProductColors []*ProductColor
