// Code generated by ent, DO NOT EDIT.

package person

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the person type in the database.
	Label = "person"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldIsEmailVerified holds the string denoting the is_email_verified field in the database.
	FieldIsEmailVerified = "is_email_verified"
	// FieldIsPhoneVerified holds the string denoting the is_phone_verified field in the database.
	FieldIsPhoneVerified = "is_phone_verified"
	// FieldWorkUnitID holds the string denoting the work_unit_id field in the database.
	FieldWorkUnitID = "work_unit_id"
	// EdgeWorkUnit holds the string denoting the work_unit edge name in mutations.
	EdgeWorkUnit = "work_unit"
	// EdgeAddresses holds the string denoting the addresses edge name in mutations.
	EdgeAddresses = "addresses"
	// EdgePersonAddresses holds the string denoting the person_addresses edge name in mutations.
	EdgePersonAddresses = "person_addresses"
	// Table holds the table name of the person in the database.
	Table = "persons"
	// WorkUnitTable is the table that holds the work_unit relation/edge.
	WorkUnitTable = "persons"
	// WorkUnitInverseTable is the table name for the WorkUnitInfo entity.
	// It exists in this package in order to avoid circular dependency with the "workunitinfo" package.
	WorkUnitInverseTable = "work_unit_info"
	// WorkUnitColumn is the table column denoting the work_unit relation/edge.
	WorkUnitColumn = "work_unit_id"
	// AddressesTable is the table that holds the addresses relation/edge. The primary key declared below.
	AddressesTable = "person_addresses"
	// AddressesInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddressesInverseTable = "addresses"
	// PersonAddressesTable is the table that holds the person_addresses relation/edge.
	PersonAddressesTable = "person_addresses"
	// PersonAddressesInverseTable is the table name for the PersonAddress entity.
	// It exists in this package in order to avoid circular dependency with the "personaddress" package.
	PersonAddressesInverseTable = "person_addresses"
	// PersonAddressesColumn is the table column denoting the person_addresses relation/edge.
	PersonAddressesColumn = "person_id"
)

// Columns holds all SQL columns for person fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAvatarURL,
	FieldEmail,
	FieldName,
	FieldPhone,
	FieldRole,
	FieldPasswordHash,
	FieldIsEmailVerified,
	FieldIsPhoneVerified,
	FieldWorkUnitID,
}

var (
	// AddressesPrimaryKey and AddressesColumn2 are the table columns denoting the
	// primary key for the addresses relation (M2M).
	AddressesPrimaryKey = []string{"person_id", "address_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// AvatarURLValidator is a validator for the "avatar_url" field. It is called by the builders before save.
	AvatarURLValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	PasswordHashValidator func([]byte) error
	// DefaultIsEmailVerified holds the default value on creation for the "is_email_verified" field.
	DefaultIsEmailVerified bool
	// DefaultIsPhoneVerified holds the default value on creation for the "is_phone_verified" field.
	DefaultIsPhoneVerified bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Role defines the type for the "role" enum field.
type Role string

// RoleCustomer is the default value of the Role enum.
const DefaultRole = RoleCustomer

// Role values.
const (
	RoleSalesperson Role = "SALESPERSON"
	RoleCustomer    Role = "CUSTOMER"
	RoleWarehouse   Role = "WAREHOUSE"
	RoleDelivery    Role = "DELIVERY"
	RoleManagement  Role = "MANAGEMENT"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleSalesperson, RoleCustomer, RoleWarehouse, RoleDelivery, RoleManagement:
		return nil
	default:
		return fmt.Errorf("person: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the Person queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAvatarURL orders the results by the avatar_url field.
func ByAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarURL, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByIsEmailVerified orders the results by the is_email_verified field.
func ByIsEmailVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsEmailVerified, opts...).ToFunc()
}

// ByIsPhoneVerified orders the results by the is_phone_verified field.
func ByIsPhoneVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPhoneVerified, opts...).ToFunc()
}

// ByWorkUnitID orders the results by the work_unit_id field.
func ByWorkUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkUnitID, opts...).ToFunc()
}

// ByWorkUnitField orders the results by work_unit field.
func ByWorkUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByAddressesCount orders the results by addresses count.
func ByAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAddressesStep(), opts...)
	}
}

// ByAddresses orders the results by addresses terms.
func ByAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPersonAddressesCount orders the results by person_addresses count.
func ByPersonAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPersonAddressesStep(), opts...)
	}
}

// ByPersonAddresses orders the results by person_addresses terms.
func ByPersonAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newWorkUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, WorkUnitTable, WorkUnitColumn),
	)
}
func newAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddressesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AddressesTable, AddressesPrimaryKey...),
	)
}
func newPersonAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonAddressesInverseTable, PersonAddressesColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, PersonAddressesTable, PersonAddressesColumn),
	)
}
