// Code generated by ent, DO NOT EDIT.

package personaddress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the personaddress type in the database.
	Label = "person_address"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPersonID holds the string denoting the person_id field in the database.
	FieldPersonID = "person_id"
	// FieldAddressID holds the string denoting the address_id field in the database.
	FieldAddressID = "address_id"
	// EdgePersons holds the string denoting the persons edge name in mutations.
	EdgePersons = "persons"
	// EdgeAddresses holds the string denoting the addresses edge name in mutations.
	EdgeAddresses = "addresses"
	// PersonFieldID holds the string denoting the ID field of the Person.
	PersonFieldID = "id"
	// AddressFieldID holds the string denoting the ID field of the Address.
	AddressFieldID = "id"
	// Table holds the table name of the personaddress in the database.
	Table = "person_addresses"
	// PersonsTable is the table that holds the persons relation/edge.
	PersonsTable = "person_addresses"
	// PersonsInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PersonsInverseTable = "persons"
	// PersonsColumn is the table column denoting the persons relation/edge.
	PersonsColumn = "person_id"
	// AddressesTable is the table that holds the addresses relation/edge.
	AddressesTable = "person_addresses"
	// AddressesInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddressesInverseTable = "addresses"
	// AddressesColumn is the table column denoting the addresses relation/edge.
	AddressesColumn = "address_id"
)

// Columns holds all SQL columns for personaddress fields.
var Columns = []string{
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPersonID,
	FieldAddressID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the PersonAddress queries.
type OrderOption func(*sql.Selector)

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPersonID orders the results by the person_id field.
func ByPersonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPersonID, opts...).ToFunc()
}

// ByAddressID orders the results by the address_id field.
func ByAddressID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressID, opts...).ToFunc()
}

// ByPersonsField orders the results by persons field.
func ByPersonsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonsStep(), sql.OrderByField(field, opts...))
	}
}

// ByAddressesField orders the results by addresses field.
func ByAddressesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressesStep(), sql.OrderByField(field, opts...))
	}
}
func newPersonsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, PersonsColumn),
		sqlgraph.To(PersonsInverseTable, PersonFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PersonsTable, PersonsColumn),
	)
}
func newAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, AddressesColumn),
		sqlgraph.To(AddressesInverseTable, AddressFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AddressesTable, AddressesColumn),
	)
}
