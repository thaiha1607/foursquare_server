// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/ordertype"
)

// OrderTypeCreate is the builder for creating a OrderType entity.
type OrderTypeCreate struct {
	config
	mutation *OrderTypeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (otc *OrderTypeCreate) SetCreatedAt(t time.Time) *OrderTypeCreate {
	otc.mutation.SetCreatedAt(t)
	return otc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (otc *OrderTypeCreate) SetNillableCreatedAt(t *time.Time) *OrderTypeCreate {
	if t != nil {
		otc.SetCreatedAt(*t)
	}
	return otc
}

// SetUpdatedAt sets the "updated_at" field.
func (otc *OrderTypeCreate) SetUpdatedAt(t time.Time) *OrderTypeCreate {
	otc.mutation.SetUpdatedAt(t)
	return otc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (otc *OrderTypeCreate) SetNillableUpdatedAt(t *time.Time) *OrderTypeCreate {
	if t != nil {
		otc.SetUpdatedAt(*t)
	}
	return otc
}

// SetOrderType sets the "order_type" field.
func (otc *OrderTypeCreate) SetOrderType(s string) *OrderTypeCreate {
	otc.mutation.SetOrderType(s)
	return otc
}

// Mutation returns the OrderTypeMutation object of the builder.
func (otc *OrderTypeCreate) Mutation() *OrderTypeMutation {
	return otc.mutation
}

// Save creates the OrderType in the database.
func (otc *OrderTypeCreate) Save(ctx context.Context) (*OrderType, error) {
	otc.defaults()
	return withHooks(ctx, otc.sqlSave, otc.mutation, otc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (otc *OrderTypeCreate) SaveX(ctx context.Context) *OrderType {
	v, err := otc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otc *OrderTypeCreate) Exec(ctx context.Context) error {
	_, err := otc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otc *OrderTypeCreate) ExecX(ctx context.Context) {
	if err := otc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otc *OrderTypeCreate) defaults() {
	if _, ok := otc.mutation.CreatedAt(); !ok {
		v := ordertype.DefaultCreatedAt()
		otc.mutation.SetCreatedAt(v)
	}
	if _, ok := otc.mutation.UpdatedAt(); !ok {
		v := ordertype.DefaultUpdatedAt()
		otc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otc *OrderTypeCreate) check() error {
	if _, ok := otc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderType.created_at"`)}
	}
	if _, ok := otc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderType.updated_at"`)}
	}
	if _, ok := otc.mutation.OrderType(); !ok {
		return &ValidationError{Name: "order_type", err: errors.New(`ent: missing required field "OrderType.order_type"`)}
	}
	if v, ok := otc.mutation.OrderType(); ok {
		if err := ordertype.OrderTypeValidator(v); err != nil {
			return &ValidationError{Name: "order_type", err: fmt.Errorf(`ent: validator failed for field "OrderType.order_type": %w`, err)}
		}
	}
	return nil
}

func (otc *OrderTypeCreate) sqlSave(ctx context.Context) (*OrderType, error) {
	if err := otc.check(); err != nil {
		return nil, err
	}
	_node, _spec := otc.createSpec()
	if err := sqlgraph.CreateNode(ctx, otc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	otc.mutation.id = &_node.ID
	otc.mutation.done = true
	return _node, nil
}

func (otc *OrderTypeCreate) createSpec() (*OrderType, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderType{config: otc.config}
		_spec = sqlgraph.NewCreateSpec(ordertype.Table, sqlgraph.NewFieldSpec(ordertype.FieldID, field.TypeInt))
	)
	if value, ok := otc.mutation.CreatedAt(); ok {
		_spec.SetField(ordertype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := otc.mutation.UpdatedAt(); ok {
		_spec.SetField(ordertype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := otc.mutation.OrderType(); ok {
		_spec.SetField(ordertype.FieldOrderType, field.TypeString, value)
		_node.OrderType = value
	}
	return _node, _spec
}

// OrderTypeCreateBulk is the builder for creating many OrderType entities in bulk.
type OrderTypeCreateBulk struct {
	config
	err      error
	builders []*OrderTypeCreate
}

// Save creates the OrderType entities in the database.
func (otcb *OrderTypeCreateBulk) Save(ctx context.Context) ([]*OrderType, error) {
	if otcb.err != nil {
		return nil, otcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(otcb.builders))
	nodes := make([]*OrderType, len(otcb.builders))
	mutators := make([]Mutator, len(otcb.builders))
	for i := range otcb.builders {
		func(i int, root context.Context) {
			builder := otcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, otcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, otcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, otcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (otcb *OrderTypeCreateBulk) SaveX(ctx context.Context) []*OrderType {
	v, err := otcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (otcb *OrderTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := otcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otcb *OrderTypeCreateBulk) ExecX(ctx context.Context) {
	if err := otcb.Exec(ctx); err != nil {
		panic(err)
	}
}
