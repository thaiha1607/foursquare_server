// Code generated by ent, DO NOT EDIT.

package warehouseassignment

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the warehouseassignment type in the database.
	Label = "warehouse_assignment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldWorkUnitID holds the string denoting the work_unit_id field in the database.
	FieldWorkUnitID = "work_unit_id"
	// FieldStaffID holds the string denoting the staff_id field in the database.
	FieldStaffID = "staff_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgeWorkUnit holds the string denoting the work_unit edge name in mutations.
	EdgeWorkUnit = "work_unit"
	// EdgeStaff holds the string denoting the staff edge name in mutations.
	EdgeStaff = "staff"
	// Table holds the table name of the warehouseassignment in the database.
	Table = "warehouse_assignments"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "warehouse_assignments"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
	// WorkUnitTable is the table that holds the work_unit relation/edge.
	WorkUnitTable = "warehouse_assignments"
	// WorkUnitInverseTable is the table name for the WorkUnitInfo entity.
	// It exists in this package in order to avoid circular dependency with the "workunitinfo" package.
	WorkUnitInverseTable = "work_unit_info"
	// WorkUnitColumn is the table column denoting the work_unit relation/edge.
	WorkUnitColumn = "work_unit_id"
	// StaffTable is the table that holds the staff relation/edge.
	StaffTable = "warehouse_assignments"
	// StaffInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	StaffInverseTable = "persons"
	// StaffColumn is the table column denoting the staff relation/edge.
	StaffColumn = "staff_id"
)

// Columns holds all SQL columns for warehouseassignment fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldOrderID,
	FieldWorkUnitID,
	FieldStaffID,
	FieldStatus,
	FieldNote,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending  Status = "PENDING"
	StatusAccepted Status = "ACCEPTED"
	StatusRejected Status = "REJECTED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusAccepted, StatusRejected:
		return nil
	default:
		return fmt.Errorf("warehouseassignment: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the WarehouseAssignment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByWorkUnitID orders the results by the work_unit_id field.
func ByWorkUnitID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkUnitID, opts...).ToFunc()
}

// ByStaffID orders the results by the staff_id field.
func ByStaffID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStaffID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkUnitField orders the results by work_unit field.
func ByWorkUnitField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkUnitStep(), sql.OrderByField(field, opts...))
	}
}

// ByStaffField orders the results by staff field.
func ByStaffField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStaffStep(), sql.OrderByField(field, opts...))
	}
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrderTable, OrderColumn),
	)
}
func newWorkUnitStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkUnitInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, WorkUnitTable, WorkUnitColumn),
	)
}
func newStaffStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StaffInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StaffTable, StaffColumn),
	)
}
