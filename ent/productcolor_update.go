// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/productcolor"
)

// ProductColorUpdate is the builder for updating ProductColor entities.
type ProductColorUpdate struct {
	config
	hooks    []Hook
	mutation *ProductColorMutation
}

// Where appends a list predicates to the ProductColorUpdate builder.
func (pcu *ProductColorUpdate) Where(ps ...predicate.ProductColor) *ProductColorUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *ProductColorUpdate) SetUpdatedAt(t time.Time) *ProductColorUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetName sets the "name" field.
func (pcu *ProductColorUpdate) SetName(s string) *ProductColorUpdate {
	pcu.mutation.SetName(s)
	return pcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcu *ProductColorUpdate) SetNillableName(s *string) *ProductColorUpdate {
	if s != nil {
		pcu.SetName(*s)
	}
	return pcu
}

// SetColorCode sets the "color_code" field.
func (pcu *ProductColorUpdate) SetColorCode(s string) *ProductColorUpdate {
	pcu.mutation.SetColorCode(s)
	return pcu
}

// SetNillableColorCode sets the "color_code" field if the given value is not nil.
func (pcu *ProductColorUpdate) SetNillableColorCode(s *string) *ProductColorUpdate {
	if s != nil {
		pcu.SetColorCode(*s)
	}
	return pcu
}

// Mutation returns the ProductColorMutation object of the builder.
func (pcu *ProductColorUpdate) Mutation() *ProductColorMutation {
	return pcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *ProductColorUpdate) Save(ctx context.Context) (int, error) {
	if err := pcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *ProductColorUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *ProductColorUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *ProductColorUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *ProductColorUpdate) defaults() error {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		if productcolor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized productcolor.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := productcolor.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pcu *ProductColorUpdate) check() error {
	if v, ok := pcu.mutation.Name(); ok {
		if err := productcolor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProductColor.name": %w`, err)}
		}
	}
	if v, ok := pcu.mutation.ColorCode(); ok {
		if err := productcolor.ColorCodeValidator(v); err != nil {
			return &ValidationError{Name: "color_code", err: fmt.Errorf(`ent: validator failed for field "ProductColor.color_code": %w`, err)}
		}
	}
	return nil
}

func (pcu *ProductColorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productcolor.Table, productcolor.Columns, sqlgraph.NewFieldSpec(productcolor.FieldID, field.TypeString))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(productcolor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.Name(); ok {
		_spec.SetField(productcolor.FieldName, field.TypeString, value)
	}
	if value, ok := pcu.mutation.ColorCode(); ok {
		_spec.SetField(productcolor.FieldColorCode, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcolor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// ProductColorUpdateOne is the builder for updating a single ProductColor entity.
type ProductColorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductColorMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *ProductColorUpdateOne) SetUpdatedAt(t time.Time) *ProductColorUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetName sets the "name" field.
func (pcuo *ProductColorUpdateOne) SetName(s string) *ProductColorUpdateOne {
	pcuo.mutation.SetName(s)
	return pcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcuo *ProductColorUpdateOne) SetNillableName(s *string) *ProductColorUpdateOne {
	if s != nil {
		pcuo.SetName(*s)
	}
	return pcuo
}

// SetColorCode sets the "color_code" field.
func (pcuo *ProductColorUpdateOne) SetColorCode(s string) *ProductColorUpdateOne {
	pcuo.mutation.SetColorCode(s)
	return pcuo
}

// SetNillableColorCode sets the "color_code" field if the given value is not nil.
func (pcuo *ProductColorUpdateOne) SetNillableColorCode(s *string) *ProductColorUpdateOne {
	if s != nil {
		pcuo.SetColorCode(*s)
	}
	return pcuo
}

// Mutation returns the ProductColorMutation object of the builder.
func (pcuo *ProductColorUpdateOne) Mutation() *ProductColorMutation {
	return pcuo.mutation
}

// Where appends a list predicates to the ProductColorUpdate builder.
func (pcuo *ProductColorUpdateOne) Where(ps ...predicate.ProductColor) *ProductColorUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *ProductColorUpdateOne) Select(field string, fields ...string) *ProductColorUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated ProductColor entity.
func (pcuo *ProductColorUpdateOne) Save(ctx context.Context) (*ProductColor, error) {
	if err := pcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *ProductColorUpdateOne) SaveX(ctx context.Context) *ProductColor {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *ProductColorUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *ProductColorUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *ProductColorUpdateOne) defaults() error {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		if productcolor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized productcolor.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := productcolor.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *ProductColorUpdateOne) check() error {
	if v, ok := pcuo.mutation.Name(); ok {
		if err := productcolor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProductColor.name": %w`, err)}
		}
	}
	if v, ok := pcuo.mutation.ColorCode(); ok {
		if err := productcolor.ColorCodeValidator(v); err != nil {
			return &ValidationError{Name: "color_code", err: fmt.Errorf(`ent: validator failed for field "ProductColor.color_code": %w`, err)}
		}
	}
	return nil
}

func (pcuo *ProductColorUpdateOne) sqlSave(ctx context.Context) (_node *ProductColor, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productcolor.Table, productcolor.Columns, sqlgraph.NewFieldSpec(productcolor.FieldID, field.TypeString))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductColor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productcolor.FieldID)
		for _, f := range fields {
			if !productcolor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productcolor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productcolor.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.Name(); ok {
		_spec.SetField(productcolor.FieldName, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.ColorCode(); ok {
		_spec.SetField(productcolor.FieldColorCode, field.TypeString, value)
	}
	_node = &ProductColor{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcolor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
