// Code generated by ent, DO NOT EDIT.

package productcolor

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldEQ(FieldName, v))
}

// ColorCode applies equality check predicate on the "color_code" field. It's identical to ColorCodeEQ.
func ColorCode(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldEQ(FieldColorCode, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldContainsFold(FieldName, v))
}

// ColorCodeEQ applies the EQ predicate on the "color_code" field.
func ColorCodeEQ(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldEQ(FieldColorCode, v))
}

// ColorCodeNEQ applies the NEQ predicate on the "color_code" field.
func ColorCodeNEQ(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldNEQ(FieldColorCode, v))
}

// ColorCodeIn applies the In predicate on the "color_code" field.
func ColorCodeIn(vs ...string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldIn(FieldColorCode, vs...))
}

// ColorCodeNotIn applies the NotIn predicate on the "color_code" field.
func ColorCodeNotIn(vs ...string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldNotIn(FieldColorCode, vs...))
}

// ColorCodeGT applies the GT predicate on the "color_code" field.
func ColorCodeGT(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldGT(FieldColorCode, v))
}

// ColorCodeGTE applies the GTE predicate on the "color_code" field.
func ColorCodeGTE(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldGTE(FieldColorCode, v))
}

// ColorCodeLT applies the LT predicate on the "color_code" field.
func ColorCodeLT(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldLT(FieldColorCode, v))
}

// ColorCodeLTE applies the LTE predicate on the "color_code" field.
func ColorCodeLTE(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldLTE(FieldColorCode, v))
}

// ColorCodeContains applies the Contains predicate on the "color_code" field.
func ColorCodeContains(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldContains(FieldColorCode, v))
}

// ColorCodeHasPrefix applies the HasPrefix predicate on the "color_code" field.
func ColorCodeHasPrefix(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldHasPrefix(FieldColorCode, v))
}

// ColorCodeHasSuffix applies the HasSuffix predicate on the "color_code" field.
func ColorCodeHasSuffix(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldHasSuffix(FieldColorCode, v))
}

// ColorCodeEqualFold applies the EqualFold predicate on the "color_code" field.
func ColorCodeEqualFold(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldEqualFold(FieldColorCode, v))
}

// ColorCodeContainsFold applies the ContainsFold predicate on the "color_code" field.
func ColorCodeContainsFold(v string) predicate.ProductColor {
	return predicate.ProductColor(sql.FieldContainsFold(FieldColorCode, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductColor) predicate.ProductColor {
	return predicate.ProductColor(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductColor) predicate.ProductColor {
	return predicate.ProductColor(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductColor) predicate.ProductColor {
	return predicate.ProductColor(sql.NotPredicates(p))
}
