// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"github.com/thaiha1607/foursquare_server/ent/order"
	"github.com/thaiha1607/foursquare_server/ent/orderitem"
	"github.com/thaiha1607/foursquare_server/ent/productcolor"
	"github.com/thaiha1607/foursquare_server/ent/productinfo"
	"github.com/thaiha1607/foursquare_server/ent/workunitinfo"
)

// OrderItem is the model entity for the OrderItem schema.
type OrderItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID string `json:"product_id,omitempty"`
	// ProductColorID holds the value of the "product_color_id" field.
	ProductColorID string `json:"product_color_id,omitempty"`
	// SrcUnitID holds the value of the "src_unit_id" field.
	SrcUnitID *uuid.UUID `json:"src_unit_id,omitempty"`
	// DstUnitID holds the value of the "dst_unit_id" field.
	DstUnitID *uuid.UUID `json:"dst_unit_id,omitempty"`
	// Qty holds the value of the "qty" field.
	Qty decimal.Decimal `json:"qty,omitempty"`
	// PricePerUnit holds the value of the "price_per_unit" field.
	PricePerUnit decimal.Decimal `json:"price_per_unit,omitempty"`
	// Status holds the value of the "status" field.
	Status orderitem.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderItemQuery when eager-loading is set.
	Edges        OrderItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderItemEdges holds the relations/edges for other nodes in the graph.
type OrderItemEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// Product holds the value of the product edge.
	Product *ProductInfo `json:"product,omitempty"`
	// ProductColor holds the value of the product_color edge.
	ProductColor *ProductColor `json:"product_color,omitempty"`
	// SourceWorkUnit holds the value of the source_work_unit edge.
	SourceWorkUnit *WorkUnitInfo `json:"source_work_unit,omitempty"`
	// DestinationWorkUnit holds the value of the destination_work_unit edge.
	DestinationWorkUnit *WorkUnitInfo `json:"destination_work_unit,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderItemEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderItemEdges) ProductOrErr() (*ProductInfo, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: productinfo.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// ProductColorOrErr returns the ProductColor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderItemEdges) ProductColorOrErr() (*ProductColor, error) {
	if e.ProductColor != nil {
		return e.ProductColor, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: productcolor.Label}
	}
	return nil, &NotLoadedError{edge: "product_color"}
}

// SourceWorkUnitOrErr returns the SourceWorkUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderItemEdges) SourceWorkUnitOrErr() (*WorkUnitInfo, error) {
	if e.SourceWorkUnit != nil {
		return e.SourceWorkUnit, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: workunitinfo.Label}
	}
	return nil, &NotLoadedError{edge: "source_work_unit"}
}

// DestinationWorkUnitOrErr returns the DestinationWorkUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderItemEdges) DestinationWorkUnitOrErr() (*WorkUnitInfo, error) {
	if e.DestinationWorkUnit != nil {
		return e.DestinationWorkUnit, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: workunitinfo.Label}
	}
	return nil, &NotLoadedError{edge: "destination_work_unit"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderitem.FieldSrcUnitID, orderitem.FieldDstUnitID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case orderitem.FieldQty, orderitem.FieldPricePerUnit:
			values[i] = new(decimal.Decimal)
		case orderitem.FieldProductID, orderitem.FieldProductColorID, orderitem.FieldStatus:
			values[i] = new(sql.NullString)
		case orderitem.FieldCreatedAt, orderitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case orderitem.FieldID, orderitem.FieldOrderID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderItem fields.
func (oi *OrderItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oi.ID = *value
			}
		case orderitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oi.CreatedAt = value.Time
			}
		case orderitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oi.UpdatedAt = value.Time
			}
		case orderitem.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				oi.OrderID = *value
			}
		case orderitem.FieldProductID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				oi.ProductID = value.String
			}
		case orderitem.FieldProductColorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_color_id", values[i])
			} else if value.Valid {
				oi.ProductColorID = value.String
			}
		case orderitem.FieldSrcUnitID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field src_unit_id", values[i])
			} else if value.Valid {
				oi.SrcUnitID = new(uuid.UUID)
				*oi.SrcUnitID = *value.S.(*uuid.UUID)
			}
		case orderitem.FieldDstUnitID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field dst_unit_id", values[i])
			} else if value.Valid {
				oi.DstUnitID = new(uuid.UUID)
				*oi.DstUnitID = *value.S.(*uuid.UUID)
			}
		case orderitem.FieldQty:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[i])
			} else if value != nil {
				oi.Qty = *value
			}
		case orderitem.FieldPricePerUnit:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field price_per_unit", values[i])
			} else if value != nil {
				oi.PricePerUnit = *value
			}
		case orderitem.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				oi.Status = orderitem.Status(value.String)
			}
		default:
			oi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderItem.
// This includes values selected through modifiers, order, etc.
func (oi *OrderItem) Value(name string) (ent.Value, error) {
	return oi.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderItem entity.
func (oi *OrderItem) QueryOrder() *OrderQuery {
	return NewOrderItemClient(oi.config).QueryOrder(oi)
}

// QueryProduct queries the "product" edge of the OrderItem entity.
func (oi *OrderItem) QueryProduct() *ProductInfoQuery {
	return NewOrderItemClient(oi.config).QueryProduct(oi)
}

// QueryProductColor queries the "product_color" edge of the OrderItem entity.
func (oi *OrderItem) QueryProductColor() *ProductColorQuery {
	return NewOrderItemClient(oi.config).QueryProductColor(oi)
}

// QuerySourceWorkUnit queries the "source_work_unit" edge of the OrderItem entity.
func (oi *OrderItem) QuerySourceWorkUnit() *WorkUnitInfoQuery {
	return NewOrderItemClient(oi.config).QuerySourceWorkUnit(oi)
}

// QueryDestinationWorkUnit queries the "destination_work_unit" edge of the OrderItem entity.
func (oi *OrderItem) QueryDestinationWorkUnit() *WorkUnitInfoQuery {
	return NewOrderItemClient(oi.config).QueryDestinationWorkUnit(oi)
}

// Update returns a builder for updating this OrderItem.
// Note that you need to call OrderItem.Unwrap() before calling this method if this OrderItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (oi *OrderItem) Update() *OrderItemUpdateOne {
	return NewOrderItemClient(oi.config).UpdateOne(oi)
}

// Unwrap unwraps the OrderItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oi *OrderItem) Unwrap() *OrderItem {
	_tx, ok := oi.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderItem is not a transactional entity")
	}
	oi.config.driver = _tx.drv
	return oi
}

// String implements the fmt.Stringer.
func (oi *OrderItem) String() string {
	var builder strings.Builder
	builder.WriteString("OrderItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oi.ID))
	builder.WriteString("created_at=")
	builder.WriteString(oi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", oi.OrderID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(oi.ProductID)
	builder.WriteString(", ")
	builder.WriteString("product_color_id=")
	builder.WriteString(oi.ProductColorID)
	builder.WriteString(", ")
	if v := oi.SrcUnitID; v != nil {
		builder.WriteString("src_unit_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := oi.DstUnitID; v != nil {
		builder.WriteString("dst_unit_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("qty=")
	builder.WriteString(fmt.Sprintf("%v", oi.Qty))
	builder.WriteString(", ")
	builder.WriteString("price_per_unit=")
	builder.WriteString(fmt.Sprintf("%v", oi.PricePerUnit))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", oi.Status))
	builder.WriteByte(')')
	return builder.String()
}

// OrderItems is a parsable slice of OrderItem.
type OrderItems []*OrderItem
