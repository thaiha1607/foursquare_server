// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/shipmentstatuscode"
)

// ShipmentStatusCodeCreate is the builder for creating a ShipmentStatusCode entity.
type ShipmentStatusCodeCreate struct {
	config
	mutation *ShipmentStatusCodeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sscc *ShipmentStatusCodeCreate) SetCreatedAt(t time.Time) *ShipmentStatusCodeCreate {
	sscc.mutation.SetCreatedAt(t)
	return sscc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sscc *ShipmentStatusCodeCreate) SetNillableCreatedAt(t *time.Time) *ShipmentStatusCodeCreate {
	if t != nil {
		sscc.SetCreatedAt(*t)
	}
	return sscc
}

// SetUpdatedAt sets the "updated_at" field.
func (sscc *ShipmentStatusCodeCreate) SetUpdatedAt(t time.Time) *ShipmentStatusCodeCreate {
	sscc.mutation.SetUpdatedAt(t)
	return sscc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sscc *ShipmentStatusCodeCreate) SetNillableUpdatedAt(t *time.Time) *ShipmentStatusCodeCreate {
	if t != nil {
		sscc.SetUpdatedAt(*t)
	}
	return sscc
}

// SetShipmentStatus sets the "shipment_status" field.
func (sscc *ShipmentStatusCodeCreate) SetShipmentStatus(s string) *ShipmentStatusCodeCreate {
	sscc.mutation.SetShipmentStatus(s)
	return sscc
}

// SetID sets the "id" field.
func (sscc *ShipmentStatusCodeCreate) SetID(i int) *ShipmentStatusCodeCreate {
	sscc.mutation.SetID(i)
	return sscc
}

// Mutation returns the ShipmentStatusCodeMutation object of the builder.
func (sscc *ShipmentStatusCodeCreate) Mutation() *ShipmentStatusCodeMutation {
	return sscc.mutation
}

// Save creates the ShipmentStatusCode in the database.
func (sscc *ShipmentStatusCodeCreate) Save(ctx context.Context) (*ShipmentStatusCode, error) {
	sscc.defaults()
	return withHooks(ctx, sscc.sqlSave, sscc.mutation, sscc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sscc *ShipmentStatusCodeCreate) SaveX(ctx context.Context) *ShipmentStatusCode {
	v, err := sscc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscc *ShipmentStatusCodeCreate) Exec(ctx context.Context) error {
	_, err := sscc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscc *ShipmentStatusCodeCreate) ExecX(ctx context.Context) {
	if err := sscc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sscc *ShipmentStatusCodeCreate) defaults() {
	if _, ok := sscc.mutation.CreatedAt(); !ok {
		v := shipmentstatuscode.DefaultCreatedAt()
		sscc.mutation.SetCreatedAt(v)
	}
	if _, ok := sscc.mutation.UpdatedAt(); !ok {
		v := shipmentstatuscode.DefaultUpdatedAt()
		sscc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sscc *ShipmentStatusCodeCreate) check() error {
	if _, ok := sscc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ShipmentStatusCode.created_at"`)}
	}
	if _, ok := sscc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ShipmentStatusCode.updated_at"`)}
	}
	if _, ok := sscc.mutation.ShipmentStatus(); !ok {
		return &ValidationError{Name: "shipment_status", err: errors.New(`ent: missing required field "ShipmentStatusCode.shipment_status"`)}
	}
	if v, ok := sscc.mutation.ShipmentStatus(); ok {
		if err := shipmentstatuscode.ShipmentStatusValidator(v); err != nil {
			return &ValidationError{Name: "shipment_status", err: fmt.Errorf(`ent: validator failed for field "ShipmentStatusCode.shipment_status": %w`, err)}
		}
	}
	if v, ok := sscc.mutation.ID(); ok {
		if err := shipmentstatuscode.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ShipmentStatusCode.id": %w`, err)}
		}
	}
	return nil
}

func (sscc *ShipmentStatusCodeCreate) sqlSave(ctx context.Context) (*ShipmentStatusCode, error) {
	if err := sscc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sscc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sscc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sscc.mutation.id = &_node.ID
	sscc.mutation.done = true
	return _node, nil
}

func (sscc *ShipmentStatusCodeCreate) createSpec() (*ShipmentStatusCode, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentStatusCode{config: sscc.config}
		_spec = sqlgraph.NewCreateSpec(shipmentstatuscode.Table, sqlgraph.NewFieldSpec(shipmentstatuscode.FieldID, field.TypeInt))
	)
	if id, ok := sscc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sscc.mutation.CreatedAt(); ok {
		_spec.SetField(shipmentstatuscode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sscc.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmentstatuscode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sscc.mutation.ShipmentStatus(); ok {
		_spec.SetField(shipmentstatuscode.FieldShipmentStatus, field.TypeString, value)
		_node.ShipmentStatus = value
	}
	return _node, _spec
}

// ShipmentStatusCodeCreateBulk is the builder for creating many ShipmentStatusCode entities in bulk.
type ShipmentStatusCodeCreateBulk struct {
	config
	err      error
	builders []*ShipmentStatusCodeCreate
}

// Save creates the ShipmentStatusCode entities in the database.
func (ssccb *ShipmentStatusCodeCreateBulk) Save(ctx context.Context) ([]*ShipmentStatusCode, error) {
	if ssccb.err != nil {
		return nil, ssccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ssccb.builders))
	nodes := make([]*ShipmentStatusCode, len(ssccb.builders))
	mutators := make([]Mutator, len(ssccb.builders))
	for i := range ssccb.builders {
		func(i int, root context.Context) {
			builder := ssccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentStatusCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ssccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ssccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ssccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ssccb *ShipmentStatusCodeCreateBulk) SaveX(ctx context.Context) []*ShipmentStatusCode {
	v, err := ssccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssccb *ShipmentStatusCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := ssccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssccb *ShipmentStatusCodeCreateBulk) ExecX(ctx context.Context) {
	if err := ssccb.Exec(ctx); err != nil {
		panic(err)
	}
}
