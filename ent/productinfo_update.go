// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/productinfo"
	"github.com/thaiha1607/foursquare_server/ent/tag"
)

// ProductInfoUpdate is the builder for updating ProductInfo entities.
type ProductInfoUpdate struct {
	config
	hooks    []Hook
	mutation *ProductInfoMutation
}

// Where appends a list predicates to the ProductInfoUpdate builder.
func (piu *ProductInfoUpdate) Where(ps ...predicate.ProductInfo) *ProductInfoUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *ProductInfoUpdate) SetUpdatedAt(t time.Time) *ProductInfoUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// SetName sets the "name" field.
func (piu *ProductInfoUpdate) SetName(s string) *ProductInfoUpdate {
	piu.mutation.SetName(s)
	return piu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableName(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetName(*s)
	}
	return piu
}

// SetDescription sets the "description" field.
func (piu *ProductInfoUpdate) SetDescription(s string) *ProductInfoUpdate {
	piu.mutation.SetDescription(s)
	return piu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableDescription(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetDescription(*s)
	}
	return piu
}

// ClearDescription clears the value of the "description" field.
func (piu *ProductInfoUpdate) ClearDescription() *ProductInfoUpdate {
	piu.mutation.ClearDescription()
	return piu
}

// SetYear sets the "year" field.
func (piu *ProductInfoUpdate) SetYear(i int) *ProductInfoUpdate {
	piu.mutation.ResetYear()
	piu.mutation.SetYear(i)
	return piu
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableYear(i *int) *ProductInfoUpdate {
	if i != nil {
		piu.SetYear(*i)
	}
	return piu
}

// AddYear adds i to the "year" field.
func (piu *ProductInfoUpdate) AddYear(i int) *ProductInfoUpdate {
	piu.mutation.AddYear(i)
	return piu
}

// ClearYear clears the value of the "year" field.
func (piu *ProductInfoUpdate) ClearYear() *ProductInfoUpdate {
	piu.mutation.ClearYear()
	return piu
}

// SetProvider sets the "provider" field.
func (piu *ProductInfoUpdate) SetProvider(s string) *ProductInfoUpdate {
	piu.mutation.SetProvider(s)
	return piu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (piu *ProductInfoUpdate) SetNillableProvider(s *string) *ProductInfoUpdate {
	if s != nil {
		piu.SetProvider(*s)
	}
	return piu
}

// ClearProvider clears the value of the "provider" field.
func (piu *ProductInfoUpdate) ClearProvider() *ProductInfoUpdate {
	piu.mutation.ClearProvider()
	return piu
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (piu *ProductInfoUpdate) AddTagIDs(ids ...string) *ProductInfoUpdate {
	piu.mutation.AddTagIDs(ids...)
	return piu
}

// AddTags adds the "tags" edges to the Tag entity.
func (piu *ProductInfoUpdate) AddTags(t ...*Tag) *ProductInfoUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piu.AddTagIDs(ids...)
}

// Mutation returns the ProductInfoMutation object of the builder.
func (piu *ProductInfoUpdate) Mutation() *ProductInfoMutation {
	return piu.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (piu *ProductInfoUpdate) ClearTags() *ProductInfoUpdate {
	piu.mutation.ClearTags()
	return piu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (piu *ProductInfoUpdate) RemoveTagIDs(ids ...string) *ProductInfoUpdate {
	piu.mutation.RemoveTagIDs(ids...)
	return piu
}

// RemoveTags removes "tags" edges to Tag entities.
func (piu *ProductInfoUpdate) RemoveTags(t ...*Tag) *ProductInfoUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProductInfoUpdate) Save(ctx context.Context) (int, error) {
	if err := piu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProductInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProductInfoUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProductInfoUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *ProductInfoUpdate) defaults() error {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		if productinfo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized productinfo.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := productinfo.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (piu *ProductInfoUpdate) check() error {
	if v, ok := piu.mutation.Name(); ok {
		if err := productinfo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProductInfo.name": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Year(); ok {
		if err := productinfo.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "ProductInfo.year": %w`, err)}
		}
	}
	return nil
}

func (piu *ProductInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productinfo.Table, productinfo.Columns, sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeString))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.SetField(productinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := piu.mutation.Name(); ok {
		_spec.SetField(productinfo.FieldName, field.TypeString, value)
	}
	if value, ok := piu.mutation.Description(); ok {
		_spec.SetField(productinfo.FieldDescription, field.TypeString, value)
	}
	if piu.mutation.DescriptionCleared() {
		_spec.ClearField(productinfo.FieldDescription, field.TypeString)
	}
	if value, ok := piu.mutation.Year(); ok {
		_spec.SetField(productinfo.FieldYear, field.TypeInt, value)
	}
	if value, ok := piu.mutation.AddedYear(); ok {
		_spec.AddField(productinfo.FieldYear, field.TypeInt, value)
	}
	if piu.mutation.YearCleared() {
		_spec.ClearField(productinfo.FieldYear, field.TypeInt)
	}
	if value, ok := piu.mutation.Provider(); ok {
		_spec.SetField(productinfo.FieldProvider, field.TypeString, value)
	}
	if piu.mutation.ProviderCleared() {
		_spec.ClearField(productinfo.FieldProvider, field.TypeString)
	}
	if piu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productinfo.TagsTable,
			Columns: productinfo.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !piu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productinfo.TagsTable,
			Columns: productinfo.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productinfo.TagsTable,
			Columns: productinfo.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProductInfoUpdateOne is the builder for updating a single ProductInfo entity.
type ProductInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductInfoMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *ProductInfoUpdateOne) SetUpdatedAt(t time.Time) *ProductInfoUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// SetName sets the "name" field.
func (piuo *ProductInfoUpdateOne) SetName(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetName(s)
	return piuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableName(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetName(*s)
	}
	return piuo
}

// SetDescription sets the "description" field.
func (piuo *ProductInfoUpdateOne) SetDescription(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetDescription(s)
	return piuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableDescription(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetDescription(*s)
	}
	return piuo
}

// ClearDescription clears the value of the "description" field.
func (piuo *ProductInfoUpdateOne) ClearDescription() *ProductInfoUpdateOne {
	piuo.mutation.ClearDescription()
	return piuo
}

// SetYear sets the "year" field.
func (piuo *ProductInfoUpdateOne) SetYear(i int) *ProductInfoUpdateOne {
	piuo.mutation.ResetYear()
	piuo.mutation.SetYear(i)
	return piuo
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableYear(i *int) *ProductInfoUpdateOne {
	if i != nil {
		piuo.SetYear(*i)
	}
	return piuo
}

// AddYear adds i to the "year" field.
func (piuo *ProductInfoUpdateOne) AddYear(i int) *ProductInfoUpdateOne {
	piuo.mutation.AddYear(i)
	return piuo
}

// ClearYear clears the value of the "year" field.
func (piuo *ProductInfoUpdateOne) ClearYear() *ProductInfoUpdateOne {
	piuo.mutation.ClearYear()
	return piuo
}

// SetProvider sets the "provider" field.
func (piuo *ProductInfoUpdateOne) SetProvider(s string) *ProductInfoUpdateOne {
	piuo.mutation.SetProvider(s)
	return piuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (piuo *ProductInfoUpdateOne) SetNillableProvider(s *string) *ProductInfoUpdateOne {
	if s != nil {
		piuo.SetProvider(*s)
	}
	return piuo
}

// ClearProvider clears the value of the "provider" field.
func (piuo *ProductInfoUpdateOne) ClearProvider() *ProductInfoUpdateOne {
	piuo.mutation.ClearProvider()
	return piuo
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (piuo *ProductInfoUpdateOne) AddTagIDs(ids ...string) *ProductInfoUpdateOne {
	piuo.mutation.AddTagIDs(ids...)
	return piuo
}

// AddTags adds the "tags" edges to the Tag entity.
func (piuo *ProductInfoUpdateOne) AddTags(t ...*Tag) *ProductInfoUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piuo.AddTagIDs(ids...)
}

// Mutation returns the ProductInfoMutation object of the builder.
func (piuo *ProductInfoUpdateOne) Mutation() *ProductInfoMutation {
	return piuo.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (piuo *ProductInfoUpdateOne) ClearTags() *ProductInfoUpdateOne {
	piuo.mutation.ClearTags()
	return piuo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (piuo *ProductInfoUpdateOne) RemoveTagIDs(ids ...string) *ProductInfoUpdateOne {
	piuo.mutation.RemoveTagIDs(ids...)
	return piuo
}

// RemoveTags removes "tags" edges to Tag entities.
func (piuo *ProductInfoUpdateOne) RemoveTags(t ...*Tag) *ProductInfoUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piuo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the ProductInfoUpdate builder.
func (piuo *ProductInfoUpdateOne) Where(ps ...predicate.ProductInfo) *ProductInfoUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProductInfoUpdateOne) Select(field string, fields ...string) *ProductInfoUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProductInfo entity.
func (piuo *ProductInfoUpdateOne) Save(ctx context.Context) (*ProductInfo, error) {
	if err := piuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProductInfoUpdateOne) SaveX(ctx context.Context) *ProductInfo {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProductInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProductInfoUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *ProductInfoUpdateOne) defaults() error {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		if productinfo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized productinfo.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := productinfo.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (piuo *ProductInfoUpdateOne) check() error {
	if v, ok := piuo.mutation.Name(); ok {
		if err := productinfo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProductInfo.name": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Year(); ok {
		if err := productinfo.YearValidator(v); err != nil {
			return &ValidationError{Name: "year", err: fmt.Errorf(`ent: validator failed for field "ProductInfo.year": %w`, err)}
		}
	}
	return nil
}

func (piuo *ProductInfoUpdateOne) sqlSave(ctx context.Context) (_node *ProductInfo, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productinfo.Table, productinfo.Columns, sqlgraph.NewFieldSpec(productinfo.FieldID, field.TypeString))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productinfo.FieldID)
		for _, f := range fields {
			if !productinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productinfo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := piuo.mutation.Name(); ok {
		_spec.SetField(productinfo.FieldName, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Description(); ok {
		_spec.SetField(productinfo.FieldDescription, field.TypeString, value)
	}
	if piuo.mutation.DescriptionCleared() {
		_spec.ClearField(productinfo.FieldDescription, field.TypeString)
	}
	if value, ok := piuo.mutation.Year(); ok {
		_spec.SetField(productinfo.FieldYear, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.AddedYear(); ok {
		_spec.AddField(productinfo.FieldYear, field.TypeInt, value)
	}
	if piuo.mutation.YearCleared() {
		_spec.ClearField(productinfo.FieldYear, field.TypeInt)
	}
	if value, ok := piuo.mutation.Provider(); ok {
		_spec.SetField(productinfo.FieldProvider, field.TypeString, value)
	}
	if piuo.mutation.ProviderCleared() {
		_spec.ClearField(productinfo.FieldProvider, field.TypeString)
	}
	if piuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productinfo.TagsTable,
			Columns: productinfo.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !piuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productinfo.TagsTable,
			Columns: productinfo.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productinfo.TagsTable,
			Columns: productinfo.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductInfo{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
