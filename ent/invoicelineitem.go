// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"github.com/thaiha1607/foursquare_server/ent/invoice"
	"github.com/thaiha1607/foursquare_server/ent/invoicelineitem"
	"github.com/thaiha1607/foursquare_server/ent/orderlineitem"
)

// InvoiceLineItem is the model entity for the InvoiceLineItem schema.
type InvoiceLineItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID uuid.UUID `json:"invoice_id,omitempty"`
	// OrderLineItemID holds the value of the "order_line_item_id" field.
	OrderLineItemID uuid.UUID `json:"order_line_item_id,omitempty"`
	// Qty holds the value of the "qty" field.
	Qty decimal.Decimal `json:"qty,omitempty"`
	// Total holds the value of the "total" field.
	Total decimal.Decimal `json:"total,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvoiceLineItemQuery when eager-loading is set.
	Edges        InvoiceLineItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InvoiceLineItemEdges holds the relations/edges for other nodes in the graph.
type InvoiceLineItemEdges struct {
	// Invoice holds the value of the invoice edge.
	Invoice *Invoice `json:"invoice,omitempty"`
	// OrderLineItem holds the value of the order_line_item edge.
	OrderLineItem *OrderLineItem `json:"order_line_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// InvoiceOrErr returns the Invoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvoiceLineItemEdges) InvoiceOrErr() (*Invoice, error) {
	if e.loadedTypes[0] {
		if e.Invoice == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: invoice.Label}
		}
		return e.Invoice, nil
	}
	return nil, &NotLoadedError{edge: "invoice"}
}

// OrderLineItemOrErr returns the OrderLineItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvoiceLineItemEdges) OrderLineItemOrErr() (*OrderLineItem, error) {
	if e.loadedTypes[1] {
		if e.OrderLineItem == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: orderlineitem.Label}
		}
		return e.OrderLineItem, nil
	}
	return nil, &NotLoadedError{edge: "order_line_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InvoiceLineItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invoicelineitem.FieldQty, invoicelineitem.FieldTotal:
			values[i] = new(decimal.Decimal)
		case invoicelineitem.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case invoicelineitem.FieldID, invoicelineitem.FieldInvoiceID, invoicelineitem.FieldOrderLineItemID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InvoiceLineItem fields.
func (ili *InvoiceLineItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case invoicelineitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ili.ID = *value
			}
		case invoicelineitem.FieldInvoiceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value != nil {
				ili.InvoiceID = *value
			}
		case invoicelineitem.FieldOrderLineItemID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_line_item_id", values[i])
			} else if value != nil {
				ili.OrderLineItemID = *value
			}
		case invoicelineitem.FieldQty:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[i])
			} else if value != nil {
				ili.Qty = *value
			}
		case invoicelineitem.FieldTotal:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value != nil {
				ili.Total = *value
			}
		case invoicelineitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ili.CreatedAt = value.Time
			}
		default:
			ili.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InvoiceLineItem.
// This includes values selected through modifiers, order, etc.
func (ili *InvoiceLineItem) Value(name string) (ent.Value, error) {
	return ili.selectValues.Get(name)
}

// QueryInvoice queries the "invoice" edge of the InvoiceLineItem entity.
func (ili *InvoiceLineItem) QueryInvoice() *InvoiceQuery {
	return NewInvoiceLineItemClient(ili.config).QueryInvoice(ili)
}

// QueryOrderLineItem queries the "order_line_item" edge of the InvoiceLineItem entity.
func (ili *InvoiceLineItem) QueryOrderLineItem() *OrderLineItemQuery {
	return NewInvoiceLineItemClient(ili.config).QueryOrderLineItem(ili)
}

// Update returns a builder for updating this InvoiceLineItem.
// Note that you need to call InvoiceLineItem.Unwrap() before calling this method if this InvoiceLineItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ili *InvoiceLineItem) Update() *InvoiceLineItemUpdateOne {
	return NewInvoiceLineItemClient(ili.config).UpdateOne(ili)
}

// Unwrap unwraps the InvoiceLineItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ili *InvoiceLineItem) Unwrap() *InvoiceLineItem {
	_tx, ok := ili.config.driver.(*txDriver)
	if !ok {
		panic("ent: InvoiceLineItem is not a transactional entity")
	}
	ili.config.driver = _tx.drv
	return ili
}

// String implements the fmt.Stringer.
func (ili *InvoiceLineItem) String() string {
	var builder strings.Builder
	builder.WriteString("InvoiceLineItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ili.ID))
	builder.WriteString("invoice_id=")
	builder.WriteString(fmt.Sprintf("%v", ili.InvoiceID))
	builder.WriteString(", ")
	builder.WriteString("order_line_item_id=")
	builder.WriteString(fmt.Sprintf("%v", ili.OrderLineItemID))
	builder.WriteString(", ")
	builder.WriteString("qty=")
	builder.WriteString(fmt.Sprintf("%v", ili.Qty))
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", ili.Total))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ili.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// InvoiceLineItems is a parsable slice of InvoiceLineItem.
type InvoiceLineItems []*InvoiceLineItem
