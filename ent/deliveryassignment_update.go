// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/deliveryassignment"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// DeliveryAssignmentUpdate is the builder for updating DeliveryAssignment entities.
type DeliveryAssignmentUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryAssignmentMutation
}

// Where appends a list predicates to the DeliveryAssignmentUpdate builder.
func (dau *DeliveryAssignmentUpdate) Where(ps ...predicate.DeliveryAssignment) *DeliveryAssignmentUpdate {
	dau.mutation.Where(ps...)
	return dau
}

// SetUpdatedAt sets the "updated_at" field.
func (dau *DeliveryAssignmentUpdate) SetUpdatedAt(t time.Time) *DeliveryAssignmentUpdate {
	dau.mutation.SetUpdatedAt(t)
	return dau
}

// SetStatus sets the "status" field.
func (dau *DeliveryAssignmentUpdate) SetStatus(d deliveryassignment.Status) *DeliveryAssignmentUpdate {
	dau.mutation.SetStatus(d)
	return dau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dau *DeliveryAssignmentUpdate) SetNillableStatus(d *deliveryassignment.Status) *DeliveryAssignmentUpdate {
	if d != nil {
		dau.SetStatus(*d)
	}
	return dau
}

// SetNote sets the "note" field.
func (dau *DeliveryAssignmentUpdate) SetNote(s string) *DeliveryAssignmentUpdate {
	dau.mutation.SetNote(s)
	return dau
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (dau *DeliveryAssignmentUpdate) SetNillableNote(s *string) *DeliveryAssignmentUpdate {
	if s != nil {
		dau.SetNote(*s)
	}
	return dau
}

// ClearNote clears the value of the "note" field.
func (dau *DeliveryAssignmentUpdate) ClearNote() *DeliveryAssignmentUpdate {
	dau.mutation.ClearNote()
	return dau
}

// Mutation returns the DeliveryAssignmentMutation object of the builder.
func (dau *DeliveryAssignmentUpdate) Mutation() *DeliveryAssignmentMutation {
	return dau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dau *DeliveryAssignmentUpdate) Save(ctx context.Context) (int, error) {
	dau.defaults()
	return withHooks(ctx, dau.sqlSave, dau.mutation, dau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dau *DeliveryAssignmentUpdate) SaveX(ctx context.Context) int {
	affected, err := dau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dau *DeliveryAssignmentUpdate) Exec(ctx context.Context) error {
	_, err := dau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dau *DeliveryAssignmentUpdate) ExecX(ctx context.Context) {
	if err := dau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dau *DeliveryAssignmentUpdate) defaults() {
	if _, ok := dau.mutation.UpdatedAt(); !ok {
		v := deliveryassignment.UpdateDefaultUpdatedAt()
		dau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dau *DeliveryAssignmentUpdate) check() error {
	if v, ok := dau.mutation.Status(); ok {
		if err := deliveryassignment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DeliveryAssignment.status": %w`, err)}
		}
	}
	if _, ok := dau.mutation.ShipmentID(); dau.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeliveryAssignment.shipment"`)
	}
	if _, ok := dau.mutation.StaffID(); dau.mutation.StaffCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeliveryAssignment.staff"`)
	}
	return nil
}

func (dau *DeliveryAssignmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryassignment.Table, deliveryassignment.Columns, sqlgraph.NewFieldSpec(deliveryassignment.FieldID, field.TypeUUID))
	if ps := dau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dau.mutation.UpdatedAt(); ok {
		_spec.SetField(deliveryassignment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dau.mutation.Status(); ok {
		_spec.SetField(deliveryassignment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := dau.mutation.Note(); ok {
		_spec.SetField(deliveryassignment.FieldNote, field.TypeString, value)
	}
	if dau.mutation.NoteCleared() {
		_spec.ClearField(deliveryassignment.FieldNote, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dau.mutation.done = true
	return n, nil
}

// DeliveryAssignmentUpdateOne is the builder for updating a single DeliveryAssignment entity.
type DeliveryAssignmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryAssignmentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (dauo *DeliveryAssignmentUpdateOne) SetUpdatedAt(t time.Time) *DeliveryAssignmentUpdateOne {
	dauo.mutation.SetUpdatedAt(t)
	return dauo
}

// SetStatus sets the "status" field.
func (dauo *DeliveryAssignmentUpdateOne) SetStatus(d deliveryassignment.Status) *DeliveryAssignmentUpdateOne {
	dauo.mutation.SetStatus(d)
	return dauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dauo *DeliveryAssignmentUpdateOne) SetNillableStatus(d *deliveryassignment.Status) *DeliveryAssignmentUpdateOne {
	if d != nil {
		dauo.SetStatus(*d)
	}
	return dauo
}

// SetNote sets the "note" field.
func (dauo *DeliveryAssignmentUpdateOne) SetNote(s string) *DeliveryAssignmentUpdateOne {
	dauo.mutation.SetNote(s)
	return dauo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (dauo *DeliveryAssignmentUpdateOne) SetNillableNote(s *string) *DeliveryAssignmentUpdateOne {
	if s != nil {
		dauo.SetNote(*s)
	}
	return dauo
}

// ClearNote clears the value of the "note" field.
func (dauo *DeliveryAssignmentUpdateOne) ClearNote() *DeliveryAssignmentUpdateOne {
	dauo.mutation.ClearNote()
	return dauo
}

// Mutation returns the DeliveryAssignmentMutation object of the builder.
func (dauo *DeliveryAssignmentUpdateOne) Mutation() *DeliveryAssignmentMutation {
	return dauo.mutation
}

// Where appends a list predicates to the DeliveryAssignmentUpdate builder.
func (dauo *DeliveryAssignmentUpdateOne) Where(ps ...predicate.DeliveryAssignment) *DeliveryAssignmentUpdateOne {
	dauo.mutation.Where(ps...)
	return dauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dauo *DeliveryAssignmentUpdateOne) Select(field string, fields ...string) *DeliveryAssignmentUpdateOne {
	dauo.fields = append([]string{field}, fields...)
	return dauo
}

// Save executes the query and returns the updated DeliveryAssignment entity.
func (dauo *DeliveryAssignmentUpdateOne) Save(ctx context.Context) (*DeliveryAssignment, error) {
	dauo.defaults()
	return withHooks(ctx, dauo.sqlSave, dauo.mutation, dauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dauo *DeliveryAssignmentUpdateOne) SaveX(ctx context.Context) *DeliveryAssignment {
	node, err := dauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dauo *DeliveryAssignmentUpdateOne) Exec(ctx context.Context) error {
	_, err := dauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dauo *DeliveryAssignmentUpdateOne) ExecX(ctx context.Context) {
	if err := dauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dauo *DeliveryAssignmentUpdateOne) defaults() {
	if _, ok := dauo.mutation.UpdatedAt(); !ok {
		v := deliveryassignment.UpdateDefaultUpdatedAt()
		dauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dauo *DeliveryAssignmentUpdateOne) check() error {
	if v, ok := dauo.mutation.Status(); ok {
		if err := deliveryassignment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DeliveryAssignment.status": %w`, err)}
		}
	}
	if _, ok := dauo.mutation.ShipmentID(); dauo.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeliveryAssignment.shipment"`)
	}
	if _, ok := dauo.mutation.StaffID(); dauo.mutation.StaffCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeliveryAssignment.staff"`)
	}
	return nil
}

func (dauo *DeliveryAssignmentUpdateOne) sqlSave(ctx context.Context) (_node *DeliveryAssignment, err error) {
	if err := dauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryassignment.Table, deliveryassignment.Columns, sqlgraph.NewFieldSpec(deliveryassignment.FieldID, field.TypeUUID))
	id, ok := dauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeliveryAssignment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryassignment.FieldID)
		for _, f := range fields {
			if !deliveryassignment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deliveryassignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dauo.mutation.UpdatedAt(); ok {
		_spec.SetField(deliveryassignment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dauo.mutation.Status(); ok {
		_spec.SetField(deliveryassignment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := dauo.mutation.Note(); ok {
		_spec.SetField(deliveryassignment.FieldNote, field.TypeString, value)
	}
	if dauo.mutation.NoteCleared() {
		_spec.ClearField(deliveryassignment.FieldNote, field.TypeString)
	}
	_node = &DeliveryAssignment{config: dauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dauo.mutation.done = true
	return _node, nil
}
