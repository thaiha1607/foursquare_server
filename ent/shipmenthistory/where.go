// Code generated by ent, DO NOT EDIT.

package shipmenthistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// ShipmentID applies equality check predicate on the "shipment_id" field. It's identical to ShipmentIDEQ.
func ShipmentID(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldShipmentID, v))
}

// PersonID applies equality check predicate on the "person_id" field. It's identical to PersonIDEQ.
func PersonID(v uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldPersonID, v))
}

// OldStatusCode applies equality check predicate on the "old_status_code" field. It's identical to OldStatusCodeEQ.
func OldStatusCode(v int) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldOldStatusCode, v))
}

// NewStatusCode applies equality check predicate on the "new_status_code" field. It's identical to NewStatusCodeEQ.
func NewStatusCode(v int) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldNewStatusCode, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// ShipmentIDEQ applies the EQ predicate on the "shipment_id" field.
func ShipmentIDEQ(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldShipmentID, v))
}

// ShipmentIDNEQ applies the NEQ predicate on the "shipment_id" field.
func ShipmentIDNEQ(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNEQ(FieldShipmentID, v))
}

// ShipmentIDIn applies the In predicate on the "shipment_id" field.
func ShipmentIDIn(vs ...string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldIn(FieldShipmentID, vs...))
}

// ShipmentIDNotIn applies the NotIn predicate on the "shipment_id" field.
func ShipmentIDNotIn(vs ...string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNotIn(FieldShipmentID, vs...))
}

// ShipmentIDGT applies the GT predicate on the "shipment_id" field.
func ShipmentIDGT(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldGT(FieldShipmentID, v))
}

// ShipmentIDGTE applies the GTE predicate on the "shipment_id" field.
func ShipmentIDGTE(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldGTE(FieldShipmentID, v))
}

// ShipmentIDLT applies the LT predicate on the "shipment_id" field.
func ShipmentIDLT(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldLT(FieldShipmentID, v))
}

// ShipmentIDLTE applies the LTE predicate on the "shipment_id" field.
func ShipmentIDLTE(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldLTE(FieldShipmentID, v))
}

// ShipmentIDContains applies the Contains predicate on the "shipment_id" field.
func ShipmentIDContains(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldContains(FieldShipmentID, v))
}

// ShipmentIDHasPrefix applies the HasPrefix predicate on the "shipment_id" field.
func ShipmentIDHasPrefix(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldHasPrefix(FieldShipmentID, v))
}

// ShipmentIDHasSuffix applies the HasSuffix predicate on the "shipment_id" field.
func ShipmentIDHasSuffix(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldHasSuffix(FieldShipmentID, v))
}

// ShipmentIDEqualFold applies the EqualFold predicate on the "shipment_id" field.
func ShipmentIDEqualFold(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEqualFold(FieldShipmentID, v))
}

// ShipmentIDContainsFold applies the ContainsFold predicate on the "shipment_id" field.
func ShipmentIDContainsFold(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldContainsFold(FieldShipmentID, v))
}

// PersonIDEQ applies the EQ predicate on the "person_id" field.
func PersonIDEQ(v uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldPersonID, v))
}

// PersonIDNEQ applies the NEQ predicate on the "person_id" field.
func PersonIDNEQ(v uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNEQ(FieldPersonID, v))
}

// PersonIDIn applies the In predicate on the "person_id" field.
func PersonIDIn(vs ...uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldIn(FieldPersonID, vs...))
}

// PersonIDNotIn applies the NotIn predicate on the "person_id" field.
func PersonIDNotIn(vs ...uuid.UUID) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNotIn(FieldPersonID, vs...))
}

// OldStatusCodeEQ applies the EQ predicate on the "old_status_code" field.
func OldStatusCodeEQ(v int) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldOldStatusCode, v))
}

// OldStatusCodeNEQ applies the NEQ predicate on the "old_status_code" field.
func OldStatusCodeNEQ(v int) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNEQ(FieldOldStatusCode, v))
}

// OldStatusCodeIn applies the In predicate on the "old_status_code" field.
func OldStatusCodeIn(vs ...int) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldIn(FieldOldStatusCode, vs...))
}

// OldStatusCodeNotIn applies the NotIn predicate on the "old_status_code" field.
func OldStatusCodeNotIn(vs ...int) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNotIn(FieldOldStatusCode, vs...))
}

// OldStatusCodeIsNil applies the IsNil predicate on the "old_status_code" field.
func OldStatusCodeIsNil() predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldIsNull(FieldOldStatusCode))
}

// OldStatusCodeNotNil applies the NotNil predicate on the "old_status_code" field.
func OldStatusCodeNotNil() predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNotNull(FieldOldStatusCode))
}

// NewStatusCodeEQ applies the EQ predicate on the "new_status_code" field.
func NewStatusCodeEQ(v int) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldNewStatusCode, v))
}

// NewStatusCodeNEQ applies the NEQ predicate on the "new_status_code" field.
func NewStatusCodeNEQ(v int) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNEQ(FieldNewStatusCode, v))
}

// NewStatusCodeIn applies the In predicate on the "new_status_code" field.
func NewStatusCodeIn(vs ...int) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldIn(FieldNewStatusCode, vs...))
}

// NewStatusCodeNotIn applies the NotIn predicate on the "new_status_code" field.
func NewStatusCodeNotIn(vs ...int) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNotIn(FieldNewStatusCode, vs...))
}

// NewStatusCodeIsNil applies the IsNil predicate on the "new_status_code" field.
func NewStatusCodeIsNil() predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldIsNull(FieldNewStatusCode))
}

// NewStatusCodeNotNil applies the NotNil predicate on the "new_status_code" field.
func NewStatusCodeNotNil() predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNotNull(FieldNewStatusCode))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.FieldContainsFold(FieldDescription, v))
}

// HasShipment applies the HasEdge predicate on the "shipment" edge.
func HasShipment() predicate.ShipmentHistory {
	return predicate.ShipmentHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ShipmentTable, ShipmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentWith applies the HasEdge predicate on the "shipment" edge with a given conditions (other predicates).
func HasShipmentWith(preds ...predicate.Shipment) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(func(s *sql.Selector) {
		step := newShipmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPerson applies the HasEdge predicate on the "person" edge.
func HasPerson() predicate.ShipmentHistory {
	return predicate.ShipmentHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PersonTable, PersonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonWith applies the HasEdge predicate on the "person" edge with a given conditions (other predicates).
func HasPersonWith(preds ...predicate.Person) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(func(s *sql.Selector) {
		step := newPersonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOldStatus applies the HasEdge predicate on the "old_status" edge.
func HasOldStatus() predicate.ShipmentHistory {
	return predicate.ShipmentHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OldStatusTable, OldStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOldStatusWith applies the HasEdge predicate on the "old_status" edge with a given conditions (other predicates).
func HasOldStatusWith(preds ...predicate.ShipmentStatusCode) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(func(s *sql.Selector) {
		step := newOldStatusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNewStatus applies the HasEdge predicate on the "new_status" edge.
func HasNewStatus() predicate.ShipmentHistory {
	return predicate.ShipmentHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, NewStatusTable, NewStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNewStatusWith applies the HasEdge predicate on the "new_status" edge with a given conditions (other predicates).
func HasNewStatusWith(preds ...predicate.ShipmentStatusCode) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(func(s *sql.Selector) {
		step := newNewStatusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShipmentHistory) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShipmentHistory) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShipmentHistory) predicate.ShipmentHistory {
	return predicate.ShipmentHistory(sql.NotPredicates(p))
}
