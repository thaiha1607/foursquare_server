// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/personaddress"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// PersonAddressUpdate is the builder for updating PersonAddress entities.
type PersonAddressUpdate struct {
	config
	hooks    []Hook
	mutation *PersonAddressMutation
}

// Where appends a list predicates to the PersonAddressUpdate builder.
func (pau *PersonAddressUpdate) Where(ps ...predicate.PersonAddress) *PersonAddressUpdate {
	pau.mutation.Where(ps...)
	return pau
}

// SetUpdatedAt sets the "updated_at" field.
func (pau *PersonAddressUpdate) SetUpdatedAt(t time.Time) *PersonAddressUpdate {
	pau.mutation.SetUpdatedAt(t)
	return pau
}

// Mutation returns the PersonAddressMutation object of the builder.
func (pau *PersonAddressUpdate) Mutation() *PersonAddressMutation {
	return pau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *PersonAddressUpdate) Save(ctx context.Context) (int, error) {
	pau.defaults()
	return withHooks(ctx, pau.sqlSave, pau.mutation, pau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PersonAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PersonAddressUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PersonAddressUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pau *PersonAddressUpdate) defaults() {
	if _, ok := pau.mutation.UpdatedAt(); !ok {
		v := personaddress.UpdateDefaultUpdatedAt()
		pau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pau *PersonAddressUpdate) check() error {
	if _, ok := pau.mutation.PersonsID(); pau.mutation.PersonsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PersonAddress.persons"`)
	}
	if _, ok := pau.mutation.AddressesID(); pau.mutation.AddressesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PersonAddress.addresses"`)
	}
	return nil
}

func (pau *PersonAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(personaddress.Table, personaddress.Columns, sqlgraph.NewFieldSpec(personaddress.FieldPersonID, field.TypeUUID), sqlgraph.NewFieldSpec(personaddress.FieldAddressID, field.TypeString))
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.UpdatedAt(); ok {
		_spec.SetField(personaddress.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pau.mutation.done = true
	return n, nil
}

// PersonAddressUpdateOne is the builder for updating a single PersonAddress entity.
type PersonAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonAddressMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pauo *PersonAddressUpdateOne) SetUpdatedAt(t time.Time) *PersonAddressUpdateOne {
	pauo.mutation.SetUpdatedAt(t)
	return pauo
}

// Mutation returns the PersonAddressMutation object of the builder.
func (pauo *PersonAddressUpdateOne) Mutation() *PersonAddressMutation {
	return pauo.mutation
}

// Where appends a list predicates to the PersonAddressUpdate builder.
func (pauo *PersonAddressUpdateOne) Where(ps ...predicate.PersonAddress) *PersonAddressUpdateOne {
	pauo.mutation.Where(ps...)
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *PersonAddressUpdateOne) Select(field string, fields ...string) *PersonAddressUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated PersonAddress entity.
func (pauo *PersonAddressUpdateOne) Save(ctx context.Context) (*PersonAddress, error) {
	pauo.defaults()
	return withHooks(ctx, pauo.sqlSave, pauo.mutation, pauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PersonAddressUpdateOne) SaveX(ctx context.Context) *PersonAddress {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PersonAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PersonAddressUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pauo *PersonAddressUpdateOne) defaults() {
	if _, ok := pauo.mutation.UpdatedAt(); !ok {
		v := personaddress.UpdateDefaultUpdatedAt()
		pauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pauo *PersonAddressUpdateOne) check() error {
	if _, ok := pauo.mutation.PersonsID(); pauo.mutation.PersonsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PersonAddress.persons"`)
	}
	if _, ok := pauo.mutation.AddressesID(); pauo.mutation.AddressesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PersonAddress.addresses"`)
	}
	return nil
}

func (pauo *PersonAddressUpdateOne) sqlSave(ctx context.Context) (_node *PersonAddress, err error) {
	if err := pauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(personaddress.Table, personaddress.Columns, sqlgraph.NewFieldSpec(personaddress.FieldPersonID, field.TypeUUID), sqlgraph.NewFieldSpec(personaddress.FieldAddressID, field.TypeString))
	if id, ok := pauo.mutation.PersonID(); !ok {
		return nil, &ValidationError{Name: "person_id", err: errors.New(`ent: missing "PersonAddress.person_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := pauo.mutation.AddressID(); !ok {
		return nil, &ValidationError{Name: "address_id", err: errors.New(`ent: missing "PersonAddress.address_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !personaddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pauo.mutation.UpdatedAt(); ok {
		_spec.SetField(personaddress.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &PersonAddress{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pauo.mutation.done = true
	return _node, nil
}
