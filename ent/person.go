// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/person"
	"github.com/thaiha1607/foursquare_server/ent/workunitinfo"
)

// Person is the model entity for the Person schema.
type Person struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	AvatarURL *string `json:"avatar_url,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone *string `json:"phone,omitempty"`
	// Role holds the value of the "role" field.
	Role person.Role `json:"role,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash *[]byte `json:"-"`
	// IsEmailVerified holds the value of the "is_email_verified" field.
	IsEmailVerified bool `json:"is_email_verified,omitempty"`
	// IsPhoneVerified holds the value of the "is_phone_verified" field.
	IsPhoneVerified bool `json:"is_phone_verified,omitempty"`
	// WorkUnitID holds the value of the "work_unit_id" field.
	WorkUnitID *uuid.UUID `json:"work_unit_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonQuery when eager-loading is set.
	Edges        PersonEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PersonEdges holds the relations/edges for other nodes in the graph.
type PersonEdges struct {
	// WorkUnit holds the value of the work_unit edge.
	WorkUnit *WorkUnitInfo `json:"work_unit,omitempty"`
	// Addresses holds the value of the addresses edge.
	Addresses []*Address `json:"addresses,omitempty"`
	// PersonAddresses holds the value of the person_addresses edge.
	PersonAddresses []*PersonAddress `json:"person_addresses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// WorkUnitOrErr returns the WorkUnit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PersonEdges) WorkUnitOrErr() (*WorkUnitInfo, error) {
	if e.WorkUnit != nil {
		return e.WorkUnit, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workunitinfo.Label}
	}
	return nil, &NotLoadedError{edge: "work_unit"}
}

// AddressesOrErr returns the Addresses value or an error if the edge
// was not loaded in eager-loading.
func (e PersonEdges) AddressesOrErr() ([]*Address, error) {
	if e.loadedTypes[1] {
		return e.Addresses, nil
	}
	return nil, &NotLoadedError{edge: "addresses"}
}

// PersonAddressesOrErr returns the PersonAddresses value or an error if the edge
// was not loaded in eager-loading.
func (e PersonEdges) PersonAddressesOrErr() ([]*PersonAddress, error) {
	if e.loadedTypes[2] {
		return e.PersonAddresses, nil
	}
	return nil, &NotLoadedError{edge: "person_addresses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Person) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case person.FieldWorkUnitID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case person.FieldPasswordHash:
			values[i] = new([]byte)
		case person.FieldIsEmailVerified, person.FieldIsPhoneVerified:
			values[i] = new(sql.NullBool)
		case person.FieldAvatarURL, person.FieldEmail, person.FieldName, person.FieldPhone, person.FieldRole:
			values[i] = new(sql.NullString)
		case person.FieldCreatedAt, person.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case person.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Person fields.
func (pe *Person) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case person.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pe.ID = *value
			}
		case person.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pe.CreatedAt = value.Time
			}
		case person.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pe.UpdatedAt = value.Time
			}
		case person.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				pe.AvatarURL = new(string)
				*pe.AvatarURL = value.String
			}
		case person.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pe.Email = value.String
			}
		case person.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case person.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				pe.Phone = new(string)
				*pe.Phone = value.String
			}
		case person.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				pe.Role = person.Role(value.String)
			}
		case person.FieldPasswordHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value != nil {
				pe.PasswordHash = value
			}
		case person.FieldIsEmailVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_email_verified", values[i])
			} else if value.Valid {
				pe.IsEmailVerified = value.Bool
			}
		case person.FieldIsPhoneVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_phone_verified", values[i])
			} else if value.Valid {
				pe.IsPhoneVerified = value.Bool
			}
		case person.FieldWorkUnitID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field work_unit_id", values[i])
			} else if value.Valid {
				pe.WorkUnitID = new(uuid.UUID)
				*pe.WorkUnitID = *value.S.(*uuid.UUID)
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Person.
// This includes values selected through modifiers, order, etc.
func (pe *Person) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryWorkUnit queries the "work_unit" edge of the Person entity.
func (pe *Person) QueryWorkUnit() *WorkUnitInfoQuery {
	return NewPersonClient(pe.config).QueryWorkUnit(pe)
}

// QueryAddresses queries the "addresses" edge of the Person entity.
func (pe *Person) QueryAddresses() *AddressQuery {
	return NewPersonClient(pe.config).QueryAddresses(pe)
}

// QueryPersonAddresses queries the "person_addresses" edge of the Person entity.
func (pe *Person) QueryPersonAddresses() *PersonAddressQuery {
	return NewPersonClient(pe.config).QueryPersonAddresses(pe)
}

// Update returns a builder for updating this Person.
// Note that you need to call Person.Unwrap() before calling this method if this Person
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Person) Update() *PersonUpdateOne {
	return NewPersonClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Person entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Person) Unwrap() *Person {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Person is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Person) String() string {
	var builder strings.Builder
	builder.WriteString("Person(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pe.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pe.AvatarURL; v != nil {
		builder.WriteString("avatar_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(pe.Email)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", ")
	if v := pe.Phone; v != nil {
		builder.WriteString("phone=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", pe.Role))
	builder.WriteString(", ")
	builder.WriteString("password_hash=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("is_email_verified=")
	builder.WriteString(fmt.Sprintf("%v", pe.IsEmailVerified))
	builder.WriteString(", ")
	builder.WriteString("is_phone_verified=")
	builder.WriteString(fmt.Sprintf("%v", pe.IsPhoneVerified))
	builder.WriteString(", ")
	if v := pe.WorkUnitID; v != nil {
		builder.WriteString("work_unit_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Persons is a parsable slice of Person.
type Persons []*Person
