// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/invoicelineitem"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// InvoiceLineItemDelete is the builder for deleting a InvoiceLineItem entity.
type InvoiceLineItemDelete struct {
	config
	hooks    []Hook
	mutation *InvoiceLineItemMutation
}

// Where appends a list predicates to the InvoiceLineItemDelete builder.
func (ilid *InvoiceLineItemDelete) Where(ps ...predicate.InvoiceLineItem) *InvoiceLineItemDelete {
	ilid.mutation.Where(ps...)
	return ilid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ilid *InvoiceLineItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ilid.sqlExec, ilid.mutation, ilid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ilid *InvoiceLineItemDelete) ExecX(ctx context.Context) int {
	n, err := ilid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ilid *InvoiceLineItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(invoicelineitem.Table, sqlgraph.NewFieldSpec(invoicelineitem.FieldID, field.TypeUUID))
	if ps := ilid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ilid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ilid.mutation.done = true
	return affected, err
}

// InvoiceLineItemDeleteOne is the builder for deleting a single InvoiceLineItem entity.
type InvoiceLineItemDeleteOne struct {
	ilid *InvoiceLineItemDelete
}

// Where appends a list predicates to the InvoiceLineItemDelete builder.
func (ilido *InvoiceLineItemDeleteOne) Where(ps ...predicate.InvoiceLineItem) *InvoiceLineItemDeleteOne {
	ilido.ilid.mutation.Where(ps...)
	return ilido
}

// Exec executes the deletion query.
func (ilido *InvoiceLineItemDeleteOne) Exec(ctx context.Context) error {
	n, err := ilido.ilid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{invoicelineitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ilido *InvoiceLineItemDeleteOne) ExecX(ctx context.Context) {
	if err := ilido.Exec(ctx); err != nil {
		panic(err)
	}
}
