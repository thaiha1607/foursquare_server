// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/shipment"
)

// ShipmentUpdate is the builder for updating Shipment entities.
type ShipmentUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentMutation
}

// Where appends a list predicates to the ShipmentUpdate builder.
func (su *ShipmentUpdate) Where(ps ...predicate.Shipment) *ShipmentUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ShipmentUpdate) SetUpdatedAt(t time.Time) *ShipmentUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetShipmentDate sets the "shipment_date" field.
func (su *ShipmentUpdate) SetShipmentDate(t time.Time) *ShipmentUpdate {
	su.mutation.SetShipmentDate(t)
	return su
}

// SetNillableShipmentDate sets the "shipment_date" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableShipmentDate(t *time.Time) *ShipmentUpdate {
	if t != nil {
		su.SetShipmentDate(*t)
	}
	return su
}

// SetNote sets the "note" field.
func (su *ShipmentUpdate) SetNote(s string) *ShipmentUpdate {
	su.mutation.SetNote(s)
	return su
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableNote(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetNote(*s)
	}
	return su
}

// ClearNote clears the value of the "note" field.
func (su *ShipmentUpdate) ClearNote() *ShipmentUpdate {
	su.mutation.ClearNote()
	return su
}

// SetStatus sets the "status" field.
func (su *ShipmentUpdate) SetStatus(s shipment.Status) *ShipmentUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableStatus(s *shipment.Status) *ShipmentUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// Mutation returns the ShipmentMutation object of the builder.
func (su *ShipmentUpdate) Mutation() *ShipmentMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShipmentUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShipmentUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShipmentUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ShipmentUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if shipment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized shipment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := shipment.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *ShipmentUpdate) check() error {
	if v, ok := su.mutation.Status(); ok {
		if err := shipment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Shipment.status": %w`, err)}
		}
	}
	if _, ok := su.mutation.OrderID(); su.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.order"`)
	}
	if _, ok := su.mutation.InvoiceID(); su.mutation.InvoiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.invoice"`)
	}
	if _, ok := su.mutation.StaffID(); su.mutation.StaffCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.staff"`)
	}
	return nil
}

func (su *ShipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipment.Table, shipment.Columns, sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(shipment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.ShipmentDate(); ok {
		_spec.SetField(shipment.FieldShipmentDate, field.TypeTime, value)
	}
	if value, ok := su.mutation.Note(); ok {
		_spec.SetField(shipment.FieldNote, field.TypeString, value)
	}
	if su.mutation.NoteCleared() {
		_spec.ClearField(shipment.FieldNote, field.TypeString)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(shipment.FieldStatus, field.TypeEnum, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShipmentUpdateOne is the builder for updating a single Shipment entity.
type ShipmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ShipmentUpdateOne) SetUpdatedAt(t time.Time) *ShipmentUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetShipmentDate sets the "shipment_date" field.
func (suo *ShipmentUpdateOne) SetShipmentDate(t time.Time) *ShipmentUpdateOne {
	suo.mutation.SetShipmentDate(t)
	return suo
}

// SetNillableShipmentDate sets the "shipment_date" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableShipmentDate(t *time.Time) *ShipmentUpdateOne {
	if t != nil {
		suo.SetShipmentDate(*t)
	}
	return suo
}

// SetNote sets the "note" field.
func (suo *ShipmentUpdateOne) SetNote(s string) *ShipmentUpdateOne {
	suo.mutation.SetNote(s)
	return suo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableNote(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetNote(*s)
	}
	return suo
}

// ClearNote clears the value of the "note" field.
func (suo *ShipmentUpdateOne) ClearNote() *ShipmentUpdateOne {
	suo.mutation.ClearNote()
	return suo
}

// SetStatus sets the "status" field.
func (suo *ShipmentUpdateOne) SetStatus(s shipment.Status) *ShipmentUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableStatus(s *shipment.Status) *ShipmentUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// Mutation returns the ShipmentMutation object of the builder.
func (suo *ShipmentUpdateOne) Mutation() *ShipmentMutation {
	return suo.mutation
}

// Where appends a list predicates to the ShipmentUpdate builder.
func (suo *ShipmentUpdateOne) Where(ps ...predicate.Shipment) *ShipmentUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShipmentUpdateOne) Select(field string, fields ...string) *ShipmentUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shipment entity.
func (suo *ShipmentUpdateOne) Save(ctx context.Context) (*Shipment, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShipmentUpdateOne) SaveX(ctx context.Context) *Shipment {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShipmentUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ShipmentUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if shipment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized shipment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := shipment.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *ShipmentUpdateOne) check() error {
	if v, ok := suo.mutation.Status(); ok {
		if err := shipment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Shipment.status": %w`, err)}
		}
	}
	if _, ok := suo.mutation.OrderID(); suo.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.order"`)
	}
	if _, ok := suo.mutation.InvoiceID(); suo.mutation.InvoiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.invoice"`)
	}
	if _, ok := suo.mutation.StaffID(); suo.mutation.StaffCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Shipment.staff"`)
	}
	return nil
}

func (suo *ShipmentUpdateOne) sqlSave(ctx context.Context) (_node *Shipment, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipment.Table, shipment.Columns, sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shipment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipment.FieldID)
		for _, f := range fields {
			if !shipment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(shipment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.ShipmentDate(); ok {
		_spec.SetField(shipment.FieldShipmentDate, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Note(); ok {
		_spec.SetField(shipment.FieldNote, field.TypeString, value)
	}
	if suo.mutation.NoteCleared() {
		_spec.ClearField(shipment.FieldNote, field.TypeString)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(shipment.FieldStatus, field.TypeEnum, value)
	}
	_node = &Shipment{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
