// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/order"
	"github.com/thaiha1607/foursquare_server/ent/orderstatuscode"
	"github.com/thaiha1607/foursquare_server/ent/ordertype"
	"github.com/thaiha1607/foursquare_server/ent/user"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetCustomerID sets the "customer_id" field.
func (oc *OrderCreate) SetCustomerID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetCustomerID(u)
	return oc
}

// SetNote sets the "note" field.
func (oc *OrderCreate) SetNote(s string) *OrderCreate {
	oc.mutation.SetNote(s)
	return oc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (oc *OrderCreate) SetNillableNote(s *string) *OrderCreate {
	if s != nil {
		oc.SetNote(*s)
	}
	return oc
}

// SetCreatedBy sets the "created_by" field.
func (oc *OrderCreate) SetCreatedBy(u uuid.UUID) *OrderCreate {
	oc.mutation.SetCreatedBy(u)
	return oc
}

// SetParentOrderID sets the "parent_order_id" field.
func (oc *OrderCreate) SetParentOrderID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetParentOrderID(u)
	return oc
}

// SetNillableParentOrderID sets the "parent_order_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableParentOrderID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetParentOrderID(*u)
	}
	return oc
}

// SetPriority sets the "priority" field.
func (oc *OrderCreate) SetPriority(i int) *OrderCreate {
	oc.mutation.SetPriority(i)
	return oc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (oc *OrderCreate) SetNillablePriority(i *int) *OrderCreate {
	if i != nil {
		oc.SetPriority(*i)
	}
	return oc
}

// SetType sets the "type" field.
func (oc *OrderCreate) SetType(i int) *OrderCreate {
	oc.mutation.SetType(i)
	return oc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (oc *OrderCreate) SetNillableType(i *int) *OrderCreate {
	if i != nil {
		oc.SetType(*i)
	}
	return oc
}

// SetStatusCode sets the "status_code" field.
func (oc *OrderCreate) SetStatusCode(i int) *OrderCreate {
	oc.mutation.SetStatusCode(i)
	return oc
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (oc *OrderCreate) SetNillableStatusCode(i *int) *OrderCreate {
	if i != nil {
		oc.SetStatusCode(*i)
	}
	return oc
}

// SetManaagmentStaffID sets the "manaagment_staff_id" field.
func (oc *OrderCreate) SetManaagmentStaffID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetManaagmentStaffID(u)
	return oc
}

// SetWarehouseStaffID sets the "warehouse_staff_id" field.
func (oc *OrderCreate) SetWarehouseStaffID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetWarehouseStaffID(u)
	return oc
}

// SetNillableWarehouseStaffID sets the "warehouse_staff_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableWarehouseStaffID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetWarehouseStaffID(*u)
	}
	return oc
}

// SetDeliveryStaffID sets the "delivery_staff_id" field.
func (oc *OrderCreate) SetDeliveryStaffID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetDeliveryStaffID(u)
	return oc
}

// SetNillableDeliveryStaffID sets the "delivery_staff_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDeliveryStaffID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetDeliveryStaffID(*u)
	}
	return oc
}

// SetInternalNote sets the "internal_note" field.
func (oc *OrderCreate) SetInternalNote(s string) *OrderCreate {
	oc.mutation.SetInternalNote(s)
	return oc
}

// SetNillableInternalNote sets the "internal_note" field if the given value is not nil.
func (oc *OrderCreate) SetNillableInternalNote(s *string) *OrderCreate {
	if s != nil {
		oc.SetInternalNote(*s)
	}
	return oc
}

// SetIsInternal sets the "is_internal" field.
func (oc *OrderCreate) SetIsInternal(b bool) *OrderCreate {
	oc.mutation.SetIsInternal(b)
	return oc
}

// SetNillableIsInternal sets the "is_internal" field if the given value is not nil.
func (oc *OrderCreate) SetNillableIsInternal(b *bool) *OrderCreate {
	if b != nil {
		oc.SetIsInternal(*b)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetCustomer sets the "customer" edge to the User entity.
func (oc *OrderCreate) SetCustomer(u *User) *OrderCreate {
	return oc.SetCustomerID(u.ID)
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (oc *OrderCreate) SetCreatorID(id uuid.UUID) *OrderCreate {
	oc.mutation.SetCreatorID(id)
	return oc
}

// SetCreator sets the "creator" edge to the User entity.
func (oc *OrderCreate) SetCreator(u *User) *OrderCreate {
	return oc.SetCreatorID(u.ID)
}

// SetParentOrder sets the "parent_order" edge to the Order entity.
func (oc *OrderCreate) SetParentOrder(o *Order) *OrderCreate {
	return oc.SetParentOrderID(o.ID)
}

// SetOrderStatusID sets the "order_status" edge to the OrderStatusCode entity by ID.
func (oc *OrderCreate) SetOrderStatusID(id int) *OrderCreate {
	oc.mutation.SetOrderStatusID(id)
	return oc
}

// SetOrderStatus sets the "order_status" edge to the OrderStatusCode entity.
func (oc *OrderCreate) SetOrderStatus(o *OrderStatusCode) *OrderCreate {
	return oc.SetOrderStatusID(o.ID)
}

// SetOrderTypeID sets the "order_type" edge to the OrderType entity by ID.
func (oc *OrderCreate) SetOrderTypeID(id int) *OrderCreate {
	oc.mutation.SetOrderTypeID(id)
	return oc
}

// SetOrderType sets the "order_type" edge to the OrderType entity.
func (oc *OrderCreate) SetOrderType(o *OrderType) *OrderCreate {
	return oc.SetOrderTypeID(o.ID)
}

// SetManagementStaffID sets the "management_staff" edge to the User entity by ID.
func (oc *OrderCreate) SetManagementStaffID(id uuid.UUID) *OrderCreate {
	oc.mutation.SetManagementStaffID(id)
	return oc
}

// SetManagementStaff sets the "management_staff" edge to the User entity.
func (oc *OrderCreate) SetManagementStaff(u *User) *OrderCreate {
	return oc.SetManagementStaffID(u.ID)
}

// SetWarehouseStaff sets the "warehouse_staff" edge to the User entity.
func (oc *OrderCreate) SetWarehouseStaff(u *User) *OrderCreate {
	return oc.SetWarehouseStaffID(u.ID)
}

// SetDeliveryStaff sets the "delivery_staff" edge to the User entity.
func (oc *OrderCreate) SetDeliveryStaff(u *User) *OrderCreate {
	return oc.SetDeliveryStaffID(u.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.Priority(); !ok {
		v := order.DefaultPriority
		oc.mutation.SetPriority(v)
	}
	if _, ok := oc.mutation.GetType(); !ok {
		v := order.DefaultType
		oc.mutation.SetType(v)
	}
	if _, ok := oc.mutation.StatusCode(); !ok {
		v := order.DefaultStatusCode
		oc.mutation.SetStatusCode(v)
	}
	if _, ok := oc.mutation.IsInternal(); !ok {
		v := order.DefaultIsInternal
		oc.mutation.SetIsInternal(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Order.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Order.updated_at"`)}
	}
	if _, ok := oc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer_id", err: errors.New(`ent: missing required field "Order.customer_id"`)}
	}
	if _, ok := oc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Order.created_by"`)}
	}
	if _, ok := oc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Order.priority"`)}
	}
	if v, ok := oc.mutation.Priority(); ok {
		if err := order.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Order.priority": %w`, err)}
		}
	}
	if _, ok := oc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Order.type"`)}
	}
	if _, ok := oc.mutation.StatusCode(); !ok {
		return &ValidationError{Name: "status_code", err: errors.New(`ent: missing required field "Order.status_code"`)}
	}
	if _, ok := oc.mutation.ManaagmentStaffID(); !ok {
		return &ValidationError{Name: "manaagment_staff_id", err: errors.New(`ent: missing required field "Order.manaagment_staff_id"`)}
	}
	if _, ok := oc.mutation.IsInternal(); !ok {
		return &ValidationError{Name: "is_internal", err: errors.New(`ent: missing required field "Order.is_internal"`)}
	}
	if _, ok := oc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "Order.customer"`)}
	}
	if _, ok := oc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required edge "Order.creator"`)}
	}
	if _, ok := oc.mutation.OrderStatusID(); !ok {
		return &ValidationError{Name: "order_status", err: errors.New(`ent: missing required edge "Order.order_status"`)}
	}
	if _, ok := oc.mutation.OrderTypeID(); !ok {
		return &ValidationError{Name: "order_type", err: errors.New(`ent: missing required edge "Order.order_type"`)}
	}
	if _, ok := oc.mutation.ManagementStaffID(); !ok {
		return &ValidationError{Name: "management_staff", err: errors.New(`ent: missing required edge "Order.management_staff"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.Note(); ok {
		_spec.SetField(order.FieldNote, field.TypeString, value)
		_node.Note = &value
	}
	if value, ok := oc.mutation.Priority(); ok {
		_spec.SetField(order.FieldPriority, field.TypeInt, value)
		_node.Priority = value
	}
	if value, ok := oc.mutation.InternalNote(); ok {
		_spec.SetField(order.FieldInternalNote, field.TypeString, value)
		_node.InternalNote = &value
	}
	if value, ok := oc.mutation.IsInternal(); ok {
		_spec.SetField(order.FieldIsInternal, field.TypeBool, value)
		_node.IsInternal = value
	}
	if nodes := oc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CustomerTable,
			Columns: []string{order.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CustomerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CreatorTable,
			Columns: []string{order.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ParentOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.ParentOrderTable,
			Columns: []string{order.ParentOrderColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentOrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrderStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.OrderStatusTable,
			Columns: []string{order.OrderStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StatusCode = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrderTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.OrderTypeTable,
			Columns: []string{order.OrderTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ordertype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Type = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ManagementStaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.ManagementStaffTable,
			Columns: []string{order.ManagementStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ManaagmentStaffID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.WarehouseStaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.WarehouseStaffTable,
			Columns: []string{order.WarehouseStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WarehouseStaffID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.DeliveryStaffIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.DeliveryStaffTable,
			Columns: []string{order.DeliveryStaffColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeliveryStaffID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
