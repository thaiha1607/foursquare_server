// Code generated by ent, DO NOT EDIT.

package producttag

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the producttag type in the database.
	Label = "product_tag"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldTagID holds the string denoting the tag_id field in the database.
	FieldTagID = "tag_id"
	// EdgeProducts holds the string denoting the products edge name in mutations.
	EdgeProducts = "products"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// ProductInfoFieldID holds the string denoting the ID field of the ProductInfo.
	ProductInfoFieldID = "id"
	// TagFieldID holds the string denoting the ID field of the Tag.
	TagFieldID = "id"
	// Table holds the table name of the producttag in the database.
	Table = "product_tags"
	// ProductsTable is the table that holds the products relation/edge.
	ProductsTable = "product_tags"
	// ProductsInverseTable is the table name for the ProductInfo entity.
	// It exists in this package in order to avoid circular dependency with the "productinfo" package.
	ProductsInverseTable = "product_info"
	// ProductsColumn is the table column denoting the products relation/edge.
	ProductsColumn = "product_id"
	// TagsTable is the table that holds the tags relation/edge.
	TagsTable = "product_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// TagsColumn is the table column denoting the tags relation/edge.
	TagsColumn = "tag_id"
)

// Columns holds all SQL columns for producttag fields.
var Columns = []string{
	FieldProductID,
	FieldTagID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ProductTag queries.
type OrderOption func(*sql.Selector)

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByTagID orders the results by the tag_id field.
func ByTagID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTagID, opts...).ToFunc()
}

// ByProductsField orders the results by products field.
func ByProductsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductsStep(), sql.OrderByField(field, opts...))
	}
}

// ByTagsField orders the results by tags field.
func ByTagsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), sql.OrderByField(field, opts...))
	}
}
func newProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, ProductsColumn),
		sqlgraph.To(ProductsInverseTable, ProductInfoFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProductsTable, ProductsColumn),
	)
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, TagsColumn),
		sqlgraph.To(TagsInverseTable, TagFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TagsTable, TagsColumn),
	)
}
