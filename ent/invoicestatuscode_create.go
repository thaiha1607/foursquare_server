// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/invoicestatuscode"
)

// InvoiceStatusCodeCreate is the builder for creating a InvoiceStatusCode entity.
type InvoiceStatusCodeCreate struct {
	config
	mutation *InvoiceStatusCodeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (iscc *InvoiceStatusCodeCreate) SetCreatedAt(t time.Time) *InvoiceStatusCodeCreate {
	iscc.mutation.SetCreatedAt(t)
	return iscc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iscc *InvoiceStatusCodeCreate) SetNillableCreatedAt(t *time.Time) *InvoiceStatusCodeCreate {
	if t != nil {
		iscc.SetCreatedAt(*t)
	}
	return iscc
}

// SetUpdatedAt sets the "updated_at" field.
func (iscc *InvoiceStatusCodeCreate) SetUpdatedAt(t time.Time) *InvoiceStatusCodeCreate {
	iscc.mutation.SetUpdatedAt(t)
	return iscc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iscc *InvoiceStatusCodeCreate) SetNillableUpdatedAt(t *time.Time) *InvoiceStatusCodeCreate {
	if t != nil {
		iscc.SetUpdatedAt(*t)
	}
	return iscc
}

// SetInvoiceStatus sets the "invoice_status" field.
func (iscc *InvoiceStatusCodeCreate) SetInvoiceStatus(s string) *InvoiceStatusCodeCreate {
	iscc.mutation.SetInvoiceStatus(s)
	return iscc
}

// SetID sets the "id" field.
func (iscc *InvoiceStatusCodeCreate) SetID(i int) *InvoiceStatusCodeCreate {
	iscc.mutation.SetID(i)
	return iscc
}

// Mutation returns the InvoiceStatusCodeMutation object of the builder.
func (iscc *InvoiceStatusCodeCreate) Mutation() *InvoiceStatusCodeMutation {
	return iscc.mutation
}

// Save creates the InvoiceStatusCode in the database.
func (iscc *InvoiceStatusCodeCreate) Save(ctx context.Context) (*InvoiceStatusCode, error) {
	iscc.defaults()
	return withHooks(ctx, iscc.sqlSave, iscc.mutation, iscc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iscc *InvoiceStatusCodeCreate) SaveX(ctx context.Context) *InvoiceStatusCode {
	v, err := iscc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iscc *InvoiceStatusCodeCreate) Exec(ctx context.Context) error {
	_, err := iscc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscc *InvoiceStatusCodeCreate) ExecX(ctx context.Context) {
	if err := iscc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iscc *InvoiceStatusCodeCreate) defaults() {
	if _, ok := iscc.mutation.CreatedAt(); !ok {
		v := invoicestatuscode.DefaultCreatedAt()
		iscc.mutation.SetCreatedAt(v)
	}
	if _, ok := iscc.mutation.UpdatedAt(); !ok {
		v := invoicestatuscode.DefaultUpdatedAt()
		iscc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iscc *InvoiceStatusCodeCreate) check() error {
	if _, ok := iscc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InvoiceStatusCode.created_at"`)}
	}
	if _, ok := iscc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "InvoiceStatusCode.updated_at"`)}
	}
	if _, ok := iscc.mutation.InvoiceStatus(); !ok {
		return &ValidationError{Name: "invoice_status", err: errors.New(`ent: missing required field "InvoiceStatusCode.invoice_status"`)}
	}
	if v, ok := iscc.mutation.InvoiceStatus(); ok {
		if err := invoicestatuscode.InvoiceStatusValidator(v); err != nil {
			return &ValidationError{Name: "invoice_status", err: fmt.Errorf(`ent: validator failed for field "InvoiceStatusCode.invoice_status": %w`, err)}
		}
	}
	if v, ok := iscc.mutation.ID(); ok {
		if err := invoicestatuscode.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "InvoiceStatusCode.id": %w`, err)}
		}
	}
	return nil
}

func (iscc *InvoiceStatusCodeCreate) sqlSave(ctx context.Context) (*InvoiceStatusCode, error) {
	if err := iscc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iscc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iscc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	iscc.mutation.id = &_node.ID
	iscc.mutation.done = true
	return _node, nil
}

func (iscc *InvoiceStatusCodeCreate) createSpec() (*InvoiceStatusCode, *sqlgraph.CreateSpec) {
	var (
		_node = &InvoiceStatusCode{config: iscc.config}
		_spec = sqlgraph.NewCreateSpec(invoicestatuscode.Table, sqlgraph.NewFieldSpec(invoicestatuscode.FieldID, field.TypeInt))
	)
	if id, ok := iscc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := iscc.mutation.CreatedAt(); ok {
		_spec.SetField(invoicestatuscode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := iscc.mutation.UpdatedAt(); ok {
		_spec.SetField(invoicestatuscode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := iscc.mutation.InvoiceStatus(); ok {
		_spec.SetField(invoicestatuscode.FieldInvoiceStatus, field.TypeString, value)
		_node.InvoiceStatus = value
	}
	return _node, _spec
}

// InvoiceStatusCodeCreateBulk is the builder for creating many InvoiceStatusCode entities in bulk.
type InvoiceStatusCodeCreateBulk struct {
	config
	err      error
	builders []*InvoiceStatusCodeCreate
}

// Save creates the InvoiceStatusCode entities in the database.
func (isccb *InvoiceStatusCodeCreateBulk) Save(ctx context.Context) ([]*InvoiceStatusCode, error) {
	if isccb.err != nil {
		return nil, isccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(isccb.builders))
	nodes := make([]*InvoiceStatusCode, len(isccb.builders))
	mutators := make([]Mutator, len(isccb.builders))
	for i := range isccb.builders {
		func(i int, root context.Context) {
			builder := isccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvoiceStatusCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, isccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, isccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, isccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (isccb *InvoiceStatusCodeCreateBulk) SaveX(ctx context.Context) []*InvoiceStatusCode {
	v, err := isccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (isccb *InvoiceStatusCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := isccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isccb *InvoiceStatusCodeCreateBulk) ExecX(ctx context.Context) {
	if err := isccb.Exec(ctx); err != nil {
		panic(err)
	}
}
