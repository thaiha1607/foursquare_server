// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/invoicehistory"
	"github.com/thaiha1607/foursquare_server/ent/orderstatuscode"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// InvoiceHistoryUpdate is the builder for updating InvoiceHistory entities.
type InvoiceHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceHistoryMutation
}

// Where appends a list predicates to the InvoiceHistoryUpdate builder.
func (ihu *InvoiceHistoryUpdate) Where(ps ...predicate.InvoiceHistory) *InvoiceHistoryUpdate {
	ihu.mutation.Where(ps...)
	return ihu
}

// SetUpdatedAt sets the "updated_at" field.
func (ihu *InvoiceHistoryUpdate) SetUpdatedAt(t time.Time) *InvoiceHistoryUpdate {
	ihu.mutation.SetUpdatedAt(t)
	return ihu
}

// SetPrevStatusCode sets the "prev_status_code" field.
func (ihu *InvoiceHistoryUpdate) SetPrevStatusCode(i int) *InvoiceHistoryUpdate {
	ihu.mutation.SetPrevStatusCode(i)
	return ihu
}

// SetNillablePrevStatusCode sets the "prev_status_code" field if the given value is not nil.
func (ihu *InvoiceHistoryUpdate) SetNillablePrevStatusCode(i *int) *InvoiceHistoryUpdate {
	if i != nil {
		ihu.SetPrevStatusCode(*i)
	}
	return ihu
}

// ClearPrevStatusCode clears the value of the "prev_status_code" field.
func (ihu *InvoiceHistoryUpdate) ClearPrevStatusCode() *InvoiceHistoryUpdate {
	ihu.mutation.ClearPrevStatusCode()
	return ihu
}

// SetNewStatusCode sets the "new_status_code" field.
func (ihu *InvoiceHistoryUpdate) SetNewStatusCode(i int) *InvoiceHistoryUpdate {
	ihu.mutation.SetNewStatusCode(i)
	return ihu
}

// SetNillableNewStatusCode sets the "new_status_code" field if the given value is not nil.
func (ihu *InvoiceHistoryUpdate) SetNillableNewStatusCode(i *int) *InvoiceHistoryUpdate {
	if i != nil {
		ihu.SetNewStatusCode(*i)
	}
	return ihu
}

// ClearNewStatusCode clears the value of the "new_status_code" field.
func (ihu *InvoiceHistoryUpdate) ClearNewStatusCode() *InvoiceHistoryUpdate {
	ihu.mutation.ClearNewStatusCode()
	return ihu
}

// SetDescription sets the "description" field.
func (ihu *InvoiceHistoryUpdate) SetDescription(s string) *InvoiceHistoryUpdate {
	ihu.mutation.SetDescription(s)
	return ihu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ihu *InvoiceHistoryUpdate) SetNillableDescription(s *string) *InvoiceHistoryUpdate {
	if s != nil {
		ihu.SetDescription(*s)
	}
	return ihu
}

// ClearDescription clears the value of the "description" field.
func (ihu *InvoiceHistoryUpdate) ClearDescription() *InvoiceHistoryUpdate {
	ihu.mutation.ClearDescription()
	return ihu
}

// SetPrevStatusID sets the "prev_status" edge to the OrderStatusCode entity by ID.
func (ihu *InvoiceHistoryUpdate) SetPrevStatusID(id int) *InvoiceHistoryUpdate {
	ihu.mutation.SetPrevStatusID(id)
	return ihu
}

// SetNillablePrevStatusID sets the "prev_status" edge to the OrderStatusCode entity by ID if the given value is not nil.
func (ihu *InvoiceHistoryUpdate) SetNillablePrevStatusID(id *int) *InvoiceHistoryUpdate {
	if id != nil {
		ihu = ihu.SetPrevStatusID(*id)
	}
	return ihu
}

// SetPrevStatus sets the "prev_status" edge to the OrderStatusCode entity.
func (ihu *InvoiceHistoryUpdate) SetPrevStatus(o *OrderStatusCode) *InvoiceHistoryUpdate {
	return ihu.SetPrevStatusID(o.ID)
}

// SetNewStatusID sets the "new_status" edge to the OrderStatusCode entity by ID.
func (ihu *InvoiceHistoryUpdate) SetNewStatusID(id int) *InvoiceHistoryUpdate {
	ihu.mutation.SetNewStatusID(id)
	return ihu
}

// SetNillableNewStatusID sets the "new_status" edge to the OrderStatusCode entity by ID if the given value is not nil.
func (ihu *InvoiceHistoryUpdate) SetNillableNewStatusID(id *int) *InvoiceHistoryUpdate {
	if id != nil {
		ihu = ihu.SetNewStatusID(*id)
	}
	return ihu
}

// SetNewStatus sets the "new_status" edge to the OrderStatusCode entity.
func (ihu *InvoiceHistoryUpdate) SetNewStatus(o *OrderStatusCode) *InvoiceHistoryUpdate {
	return ihu.SetNewStatusID(o.ID)
}

// Mutation returns the InvoiceHistoryMutation object of the builder.
func (ihu *InvoiceHistoryUpdate) Mutation() *InvoiceHistoryMutation {
	return ihu.mutation
}

// ClearPrevStatus clears the "prev_status" edge to the OrderStatusCode entity.
func (ihu *InvoiceHistoryUpdate) ClearPrevStatus() *InvoiceHistoryUpdate {
	ihu.mutation.ClearPrevStatus()
	return ihu
}

// ClearNewStatus clears the "new_status" edge to the OrderStatusCode entity.
func (ihu *InvoiceHistoryUpdate) ClearNewStatus() *InvoiceHistoryUpdate {
	ihu.mutation.ClearNewStatus()
	return ihu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ihu *InvoiceHistoryUpdate) Save(ctx context.Context) (int, error) {
	ihu.defaults()
	return withHooks(ctx, ihu.sqlSave, ihu.mutation, ihu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ihu *InvoiceHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ihu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ihu *InvoiceHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ihu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ihu *InvoiceHistoryUpdate) ExecX(ctx context.Context) {
	if err := ihu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ihu *InvoiceHistoryUpdate) defaults() {
	if _, ok := ihu.mutation.UpdatedAt(); !ok {
		v := invoicehistory.UpdateDefaultUpdatedAt()
		ihu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ihu *InvoiceHistoryUpdate) check() error {
	if _, ok := ihu.mutation.InvoiceID(); ihu.mutation.InvoiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvoiceHistory.invoice"`)
	}
	if _, ok := ihu.mutation.PersonID(); ihu.mutation.PersonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvoiceHistory.person"`)
	}
	return nil
}

func (ihu *InvoiceHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ihu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoicehistory.Table, invoicehistory.Columns, sqlgraph.NewFieldSpec(invoicehistory.FieldID, field.TypeUUID))
	if ps := ihu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ihu.mutation.UpdatedAt(); ok {
		_spec.SetField(invoicehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ihu.mutation.Description(); ok {
		_spec.SetField(invoicehistory.FieldDescription, field.TypeString, value)
	}
	if ihu.mutation.DescriptionCleared() {
		_spec.ClearField(invoicehistory.FieldDescription, field.TypeString)
	}
	if ihu.mutation.PrevStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoicehistory.PrevStatusTable,
			Columns: []string{invoicehistory.PrevStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ihu.mutation.PrevStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoicehistory.PrevStatusTable,
			Columns: []string{invoicehistory.PrevStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ihu.mutation.NewStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoicehistory.NewStatusTable,
			Columns: []string{invoicehistory.NewStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ihu.mutation.NewStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoicehistory.NewStatusTable,
			Columns: []string{invoicehistory.NewStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ihu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoicehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ihu.mutation.done = true
	return n, nil
}

// InvoiceHistoryUpdateOne is the builder for updating a single InvoiceHistory entity.
type InvoiceHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ihuo *InvoiceHistoryUpdateOne) SetUpdatedAt(t time.Time) *InvoiceHistoryUpdateOne {
	ihuo.mutation.SetUpdatedAt(t)
	return ihuo
}

// SetPrevStatusCode sets the "prev_status_code" field.
func (ihuo *InvoiceHistoryUpdateOne) SetPrevStatusCode(i int) *InvoiceHistoryUpdateOne {
	ihuo.mutation.SetPrevStatusCode(i)
	return ihuo
}

// SetNillablePrevStatusCode sets the "prev_status_code" field if the given value is not nil.
func (ihuo *InvoiceHistoryUpdateOne) SetNillablePrevStatusCode(i *int) *InvoiceHistoryUpdateOne {
	if i != nil {
		ihuo.SetPrevStatusCode(*i)
	}
	return ihuo
}

// ClearPrevStatusCode clears the value of the "prev_status_code" field.
func (ihuo *InvoiceHistoryUpdateOne) ClearPrevStatusCode() *InvoiceHistoryUpdateOne {
	ihuo.mutation.ClearPrevStatusCode()
	return ihuo
}

// SetNewStatusCode sets the "new_status_code" field.
func (ihuo *InvoiceHistoryUpdateOne) SetNewStatusCode(i int) *InvoiceHistoryUpdateOne {
	ihuo.mutation.SetNewStatusCode(i)
	return ihuo
}

// SetNillableNewStatusCode sets the "new_status_code" field if the given value is not nil.
func (ihuo *InvoiceHistoryUpdateOne) SetNillableNewStatusCode(i *int) *InvoiceHistoryUpdateOne {
	if i != nil {
		ihuo.SetNewStatusCode(*i)
	}
	return ihuo
}

// ClearNewStatusCode clears the value of the "new_status_code" field.
func (ihuo *InvoiceHistoryUpdateOne) ClearNewStatusCode() *InvoiceHistoryUpdateOne {
	ihuo.mutation.ClearNewStatusCode()
	return ihuo
}

// SetDescription sets the "description" field.
func (ihuo *InvoiceHistoryUpdateOne) SetDescription(s string) *InvoiceHistoryUpdateOne {
	ihuo.mutation.SetDescription(s)
	return ihuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ihuo *InvoiceHistoryUpdateOne) SetNillableDescription(s *string) *InvoiceHistoryUpdateOne {
	if s != nil {
		ihuo.SetDescription(*s)
	}
	return ihuo
}

// ClearDescription clears the value of the "description" field.
func (ihuo *InvoiceHistoryUpdateOne) ClearDescription() *InvoiceHistoryUpdateOne {
	ihuo.mutation.ClearDescription()
	return ihuo
}

// SetPrevStatusID sets the "prev_status" edge to the OrderStatusCode entity by ID.
func (ihuo *InvoiceHistoryUpdateOne) SetPrevStatusID(id int) *InvoiceHistoryUpdateOne {
	ihuo.mutation.SetPrevStatusID(id)
	return ihuo
}

// SetNillablePrevStatusID sets the "prev_status" edge to the OrderStatusCode entity by ID if the given value is not nil.
func (ihuo *InvoiceHistoryUpdateOne) SetNillablePrevStatusID(id *int) *InvoiceHistoryUpdateOne {
	if id != nil {
		ihuo = ihuo.SetPrevStatusID(*id)
	}
	return ihuo
}

// SetPrevStatus sets the "prev_status" edge to the OrderStatusCode entity.
func (ihuo *InvoiceHistoryUpdateOne) SetPrevStatus(o *OrderStatusCode) *InvoiceHistoryUpdateOne {
	return ihuo.SetPrevStatusID(o.ID)
}

// SetNewStatusID sets the "new_status" edge to the OrderStatusCode entity by ID.
func (ihuo *InvoiceHistoryUpdateOne) SetNewStatusID(id int) *InvoiceHistoryUpdateOne {
	ihuo.mutation.SetNewStatusID(id)
	return ihuo
}

// SetNillableNewStatusID sets the "new_status" edge to the OrderStatusCode entity by ID if the given value is not nil.
func (ihuo *InvoiceHistoryUpdateOne) SetNillableNewStatusID(id *int) *InvoiceHistoryUpdateOne {
	if id != nil {
		ihuo = ihuo.SetNewStatusID(*id)
	}
	return ihuo
}

// SetNewStatus sets the "new_status" edge to the OrderStatusCode entity.
func (ihuo *InvoiceHistoryUpdateOne) SetNewStatus(o *OrderStatusCode) *InvoiceHistoryUpdateOne {
	return ihuo.SetNewStatusID(o.ID)
}

// Mutation returns the InvoiceHistoryMutation object of the builder.
func (ihuo *InvoiceHistoryUpdateOne) Mutation() *InvoiceHistoryMutation {
	return ihuo.mutation
}

// ClearPrevStatus clears the "prev_status" edge to the OrderStatusCode entity.
func (ihuo *InvoiceHistoryUpdateOne) ClearPrevStatus() *InvoiceHistoryUpdateOne {
	ihuo.mutation.ClearPrevStatus()
	return ihuo
}

// ClearNewStatus clears the "new_status" edge to the OrderStatusCode entity.
func (ihuo *InvoiceHistoryUpdateOne) ClearNewStatus() *InvoiceHistoryUpdateOne {
	ihuo.mutation.ClearNewStatus()
	return ihuo
}

// Where appends a list predicates to the InvoiceHistoryUpdate builder.
func (ihuo *InvoiceHistoryUpdateOne) Where(ps ...predicate.InvoiceHistory) *InvoiceHistoryUpdateOne {
	ihuo.mutation.Where(ps...)
	return ihuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ihuo *InvoiceHistoryUpdateOne) Select(field string, fields ...string) *InvoiceHistoryUpdateOne {
	ihuo.fields = append([]string{field}, fields...)
	return ihuo
}

// Save executes the query and returns the updated InvoiceHistory entity.
func (ihuo *InvoiceHistoryUpdateOne) Save(ctx context.Context) (*InvoiceHistory, error) {
	ihuo.defaults()
	return withHooks(ctx, ihuo.sqlSave, ihuo.mutation, ihuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ihuo *InvoiceHistoryUpdateOne) SaveX(ctx context.Context) *InvoiceHistory {
	node, err := ihuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ihuo *InvoiceHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ihuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ihuo *InvoiceHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ihuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ihuo *InvoiceHistoryUpdateOne) defaults() {
	if _, ok := ihuo.mutation.UpdatedAt(); !ok {
		v := invoicehistory.UpdateDefaultUpdatedAt()
		ihuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ihuo *InvoiceHistoryUpdateOne) check() error {
	if _, ok := ihuo.mutation.InvoiceID(); ihuo.mutation.InvoiceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvoiceHistory.invoice"`)
	}
	if _, ok := ihuo.mutation.PersonID(); ihuo.mutation.PersonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InvoiceHistory.person"`)
	}
	return nil
}

func (ihuo *InvoiceHistoryUpdateOne) sqlSave(ctx context.Context) (_node *InvoiceHistory, err error) {
	if err := ihuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoicehistory.Table, invoicehistory.Columns, sqlgraph.NewFieldSpec(invoicehistory.FieldID, field.TypeUUID))
	id, ok := ihuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InvoiceHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ihuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoicehistory.FieldID)
		for _, f := range fields {
			if !invoicehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoicehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ihuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ihuo.mutation.UpdatedAt(); ok {
		_spec.SetField(invoicehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ihuo.mutation.Description(); ok {
		_spec.SetField(invoicehistory.FieldDescription, field.TypeString, value)
	}
	if ihuo.mutation.DescriptionCleared() {
		_spec.ClearField(invoicehistory.FieldDescription, field.TypeString)
	}
	if ihuo.mutation.PrevStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoicehistory.PrevStatusTable,
			Columns: []string{invoicehistory.PrevStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ihuo.mutation.PrevStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoicehistory.PrevStatusTable,
			Columns: []string{invoicehistory.PrevStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ihuo.mutation.NewStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoicehistory.NewStatusTable,
			Columns: []string{invoicehistory.NewStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ihuo.mutation.NewStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoicehistory.NewStatusTable,
			Columns: []string{invoicehistory.NewStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InvoiceHistory{config: ihuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ihuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoicehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ihuo.mutation.done = true
	return _node, nil
}
