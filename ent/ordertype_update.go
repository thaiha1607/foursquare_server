// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/ordertype"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// OrderTypeUpdate is the builder for updating OrderType entities.
type OrderTypeUpdate struct {
	config
	hooks    []Hook
	mutation *OrderTypeMutation
}

// Where appends a list predicates to the OrderTypeUpdate builder.
func (otu *OrderTypeUpdate) Where(ps ...predicate.OrderType) *OrderTypeUpdate {
	otu.mutation.Where(ps...)
	return otu
}

// SetUpdatedAt sets the "updated_at" field.
func (otu *OrderTypeUpdate) SetUpdatedAt(t time.Time) *OrderTypeUpdate {
	otu.mutation.SetUpdatedAt(t)
	return otu
}

// SetOrderType sets the "order_type" field.
func (otu *OrderTypeUpdate) SetOrderType(s string) *OrderTypeUpdate {
	otu.mutation.SetOrderType(s)
	return otu
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (otu *OrderTypeUpdate) SetNillableOrderType(s *string) *OrderTypeUpdate {
	if s != nil {
		otu.SetOrderType(*s)
	}
	return otu
}

// Mutation returns the OrderTypeMutation object of the builder.
func (otu *OrderTypeUpdate) Mutation() *OrderTypeMutation {
	return otu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (otu *OrderTypeUpdate) Save(ctx context.Context) (int, error) {
	otu.defaults()
	return withHooks(ctx, otu.sqlSave, otu.mutation, otu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (otu *OrderTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := otu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (otu *OrderTypeUpdate) Exec(ctx context.Context) error {
	_, err := otu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otu *OrderTypeUpdate) ExecX(ctx context.Context) {
	if err := otu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otu *OrderTypeUpdate) defaults() {
	if _, ok := otu.mutation.UpdatedAt(); !ok {
		v := ordertype.UpdateDefaultUpdatedAt()
		otu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otu *OrderTypeUpdate) check() error {
	if v, ok := otu.mutation.OrderType(); ok {
		if err := ordertype.OrderTypeValidator(v); err != nil {
			return &ValidationError{Name: "order_type", err: fmt.Errorf(`ent: validator failed for field "OrderType.order_type": %w`, err)}
		}
	}
	return nil
}

func (otu *OrderTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := otu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ordertype.Table, ordertype.Columns, sqlgraph.NewFieldSpec(ordertype.FieldID, field.TypeInt))
	if ps := otu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otu.mutation.UpdatedAt(); ok {
		_spec.SetField(ordertype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := otu.mutation.OrderType(); ok {
		_spec.SetField(ordertype.FieldOrderType, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, otu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordertype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	otu.mutation.done = true
	return n, nil
}

// OrderTypeUpdateOne is the builder for updating a single OrderType entity.
type OrderTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderTypeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (otuo *OrderTypeUpdateOne) SetUpdatedAt(t time.Time) *OrderTypeUpdateOne {
	otuo.mutation.SetUpdatedAt(t)
	return otuo
}

// SetOrderType sets the "order_type" field.
func (otuo *OrderTypeUpdateOne) SetOrderType(s string) *OrderTypeUpdateOne {
	otuo.mutation.SetOrderType(s)
	return otuo
}

// SetNillableOrderType sets the "order_type" field if the given value is not nil.
func (otuo *OrderTypeUpdateOne) SetNillableOrderType(s *string) *OrderTypeUpdateOne {
	if s != nil {
		otuo.SetOrderType(*s)
	}
	return otuo
}

// Mutation returns the OrderTypeMutation object of the builder.
func (otuo *OrderTypeUpdateOne) Mutation() *OrderTypeMutation {
	return otuo.mutation
}

// Where appends a list predicates to the OrderTypeUpdate builder.
func (otuo *OrderTypeUpdateOne) Where(ps ...predicate.OrderType) *OrderTypeUpdateOne {
	otuo.mutation.Where(ps...)
	return otuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (otuo *OrderTypeUpdateOne) Select(field string, fields ...string) *OrderTypeUpdateOne {
	otuo.fields = append([]string{field}, fields...)
	return otuo
}

// Save executes the query and returns the updated OrderType entity.
func (otuo *OrderTypeUpdateOne) Save(ctx context.Context) (*OrderType, error) {
	otuo.defaults()
	return withHooks(ctx, otuo.sqlSave, otuo.mutation, otuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (otuo *OrderTypeUpdateOne) SaveX(ctx context.Context) *OrderType {
	node, err := otuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (otuo *OrderTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := otuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otuo *OrderTypeUpdateOne) ExecX(ctx context.Context) {
	if err := otuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (otuo *OrderTypeUpdateOne) defaults() {
	if _, ok := otuo.mutation.UpdatedAt(); !ok {
		v := ordertype.UpdateDefaultUpdatedAt()
		otuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (otuo *OrderTypeUpdateOne) check() error {
	if v, ok := otuo.mutation.OrderType(); ok {
		if err := ordertype.OrderTypeValidator(v); err != nil {
			return &ValidationError{Name: "order_type", err: fmt.Errorf(`ent: validator failed for field "OrderType.order_type": %w`, err)}
		}
	}
	return nil
}

func (otuo *OrderTypeUpdateOne) sqlSave(ctx context.Context) (_node *OrderType, err error) {
	if err := otuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ordertype.Table, ordertype.Columns, sqlgraph.NewFieldSpec(ordertype.FieldID, field.TypeInt))
	id, ok := otuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := otuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordertype.FieldID)
		for _, f := range fields {
			if !ordertype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordertype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := otuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := otuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ordertype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := otuo.mutation.OrderType(); ok {
		_spec.SetField(ordertype.FieldOrderType, field.TypeString, value)
	}
	_node = &OrderType{config: otuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, otuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordertype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	otuo.mutation.done = true
	return _node, nil
}
