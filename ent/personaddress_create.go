// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/address"
	"github.com/thaiha1607/foursquare_server/ent/person"
	"github.com/thaiha1607/foursquare_server/ent/personaddress"
)

// PersonAddressCreate is the builder for creating a PersonAddress entity.
type PersonAddressCreate struct {
	config
	mutation *PersonAddressMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pac *PersonAddressCreate) SetCreatedAt(t time.Time) *PersonAddressCreate {
	pac.mutation.SetCreatedAt(t)
	return pac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pac *PersonAddressCreate) SetNillableCreatedAt(t *time.Time) *PersonAddressCreate {
	if t != nil {
		pac.SetCreatedAt(*t)
	}
	return pac
}

// SetUpdatedAt sets the "updated_at" field.
func (pac *PersonAddressCreate) SetUpdatedAt(t time.Time) *PersonAddressCreate {
	pac.mutation.SetUpdatedAt(t)
	return pac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pac *PersonAddressCreate) SetNillableUpdatedAt(t *time.Time) *PersonAddressCreate {
	if t != nil {
		pac.SetUpdatedAt(*t)
	}
	return pac
}

// SetPersonID sets the "person_id" field.
func (pac *PersonAddressCreate) SetPersonID(u uuid.UUID) *PersonAddressCreate {
	pac.mutation.SetPersonID(u)
	return pac
}

// SetAddressID sets the "address_id" field.
func (pac *PersonAddressCreate) SetAddressID(u uuid.UUID) *PersonAddressCreate {
	pac.mutation.SetAddressID(u)
	return pac
}

// SetPersonsID sets the "persons" edge to the Person entity by ID.
func (pac *PersonAddressCreate) SetPersonsID(id uuid.UUID) *PersonAddressCreate {
	pac.mutation.SetPersonsID(id)
	return pac
}

// SetPersons sets the "persons" edge to the Person entity.
func (pac *PersonAddressCreate) SetPersons(p *Person) *PersonAddressCreate {
	return pac.SetPersonsID(p.ID)
}

// SetAddressesID sets the "addresses" edge to the Address entity by ID.
func (pac *PersonAddressCreate) SetAddressesID(id uuid.UUID) *PersonAddressCreate {
	pac.mutation.SetAddressesID(id)
	return pac
}

// SetAddresses sets the "addresses" edge to the Address entity.
func (pac *PersonAddressCreate) SetAddresses(a *Address) *PersonAddressCreate {
	return pac.SetAddressesID(a.ID)
}

// Mutation returns the PersonAddressMutation object of the builder.
func (pac *PersonAddressCreate) Mutation() *PersonAddressMutation {
	return pac.mutation
}

// Save creates the PersonAddress in the database.
func (pac *PersonAddressCreate) Save(ctx context.Context) (*PersonAddress, error) {
	pac.defaults()
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PersonAddressCreate) SaveX(ctx context.Context) *PersonAddress {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *PersonAddressCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *PersonAddressCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pac *PersonAddressCreate) defaults() {
	if _, ok := pac.mutation.CreatedAt(); !ok {
		v := personaddress.DefaultCreatedAt()
		pac.mutation.SetCreatedAt(v)
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		v := personaddress.DefaultUpdatedAt()
		pac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *PersonAddressCreate) check() error {
	if _, ok := pac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PersonAddress.created_at"`)}
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PersonAddress.updated_at"`)}
	}
	if _, ok := pac.mutation.PersonID(); !ok {
		return &ValidationError{Name: "person_id", err: errors.New(`ent: missing required field "PersonAddress.person_id"`)}
	}
	if _, ok := pac.mutation.AddressID(); !ok {
		return &ValidationError{Name: "address_id", err: errors.New(`ent: missing required field "PersonAddress.address_id"`)}
	}
	if _, ok := pac.mutation.PersonsID(); !ok {
		return &ValidationError{Name: "persons", err: errors.New(`ent: missing required edge "PersonAddress.persons"`)}
	}
	if _, ok := pac.mutation.AddressesID(); !ok {
		return &ValidationError{Name: "addresses", err: errors.New(`ent: missing required edge "PersonAddress.addresses"`)}
	}
	return nil
}

func (pac *PersonAddressCreate) sqlSave(ctx context.Context) (*PersonAddress, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (pac *PersonAddressCreate) createSpec() (*PersonAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &PersonAddress{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(personaddress.Table, nil)
	)
	if value, ok := pac.mutation.CreatedAt(); ok {
		_spec.SetField(personaddress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := pac.mutation.UpdatedAt(); ok {
		_spec.SetField(personaddress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := pac.mutation.PersonsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   personaddress.PersonsTable,
			Columns: []string{personaddress.PersonsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PersonID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pac.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   personaddress.AddressesTable,
			Columns: []string{personaddress.AddressesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AddressID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PersonAddressCreateBulk is the builder for creating many PersonAddress entities in bulk.
type PersonAddressCreateBulk struct {
	config
	err      error
	builders []*PersonAddressCreate
}

// Save creates the PersonAddress entities in the database.
func (pacb *PersonAddressCreateBulk) Save(ctx context.Context) ([]*PersonAddress, error) {
	if pacb.err != nil {
		return nil, pacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PersonAddress, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PersonAddressCreateBulk) SaveX(ctx context.Context) []*PersonAddress {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *PersonAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *PersonAddressCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}
