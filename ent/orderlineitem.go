// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"github.com/thaiha1607/foursquare_server/ent/order"
	"github.com/thaiha1607/foursquare_server/ent/orderlineitem"
	"github.com/thaiha1607/foursquare_server/ent/product"
)

// OrderLineItem is the model entity for the OrderLineItem schema.
type OrderLineItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID uuid.UUID `json:"product_id,omitempty"`
	// Qty holds the value of the "qty" field.
	Qty decimal.Decimal `json:"qty,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderLineItemQuery when eager-loading is set.
	Edges        OrderLineItemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderLineItemEdges holds the relations/edges for other nodes in the graph.
type OrderLineItemEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderLineItemEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Order == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderLineItemEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.Product == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderLineItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderlineitem.FieldQty:
			values[i] = new(decimal.Decimal)
		case orderlineitem.FieldCreatedAt, orderlineitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case orderlineitem.FieldID, orderlineitem.FieldOrderID, orderlineitem.FieldProductID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderLineItem fields.
func (oli *OrderLineItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderlineitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oli.ID = *value
			}
		case orderlineitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oli.CreatedAt = value.Time
			}
		case orderlineitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oli.UpdatedAt = value.Time
			}
		case orderlineitem.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				oli.OrderID = *value
			}
		case orderlineitem.FieldProductID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value != nil {
				oli.ProductID = *value
			}
		case orderlineitem.FieldQty:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[i])
			} else if value != nil {
				oli.Qty = *value
			}
		default:
			oli.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderLineItem.
// This includes values selected through modifiers, order, etc.
func (oli *OrderLineItem) Value(name string) (ent.Value, error) {
	return oli.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderLineItem entity.
func (oli *OrderLineItem) QueryOrder() *OrderQuery {
	return NewOrderLineItemClient(oli.config).QueryOrder(oli)
}

// QueryProduct queries the "product" edge of the OrderLineItem entity.
func (oli *OrderLineItem) QueryProduct() *ProductQuery {
	return NewOrderLineItemClient(oli.config).QueryProduct(oli)
}

// Update returns a builder for updating this OrderLineItem.
// Note that you need to call OrderLineItem.Unwrap() before calling this method if this OrderLineItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (oli *OrderLineItem) Update() *OrderLineItemUpdateOne {
	return NewOrderLineItemClient(oli.config).UpdateOne(oli)
}

// Unwrap unwraps the OrderLineItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oli *OrderLineItem) Unwrap() *OrderLineItem {
	_tx, ok := oli.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderLineItem is not a transactional entity")
	}
	oli.config.driver = _tx.drv
	return oli
}

// String implements the fmt.Stringer.
func (oli *OrderLineItem) String() string {
	var builder strings.Builder
	builder.WriteString("OrderLineItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oli.ID))
	builder.WriteString("created_at=")
	builder.WriteString(oli.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oli.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", oli.OrderID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", oli.ProductID))
	builder.WriteString(", ")
	builder.WriteString("qty=")
	builder.WriteString(fmt.Sprintf("%v", oli.Qty))
	builder.WriteByte(')')
	return builder.String()
}

// OrderLineItems is a parsable slice of OrderLineItem.
type OrderLineItems []*OrderLineItem
