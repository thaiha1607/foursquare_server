// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the invoice type in the database.
	Label = "invoice"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPaymentMethod holds the string denoting the payment_method field in the database.
	FieldPaymentMethod = "payment_method"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// Table holds the table name of the invoice in the database.
	Table = "invoices"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "invoices"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
)

// Columns holds all SQL columns for invoice fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldOrderID,
	FieldTotal,
	FieldNote,
	FieldType,
	FieldStatus,
	FieldPaymentMethod,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// TypeProForma is the default value of the Type enum.
const DefaultType = TypeProForma

// Type values.
const (
	TypeProForma   Type = "PRO_FORMA"
	TypeRegular    Type = "REGULAR"
	TypePastDue    Type = "PAST_DUE"
	TypeInterim    Type = "INTERIM"
	TypeTimesheet  Type = "TIMESHEET"
	TypeFinal      Type = "FINAL"
	TypeCredit     Type = "CREDIT"
	TypeDebit      Type = "DEBIT"
	TypeMixed      Type = "MIXED"
	TypeCommercial Type = "COMMERCIAL"
	TypeRecurring  Type = "RECURRING"
	TypeOther      Type = "OTHER"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeProForma, TypeRegular, TypePastDue, TypeInterim, TypeTimesheet, TypeFinal, TypeCredit, TypeDebit, TypeMixed, TypeCommercial, TypeRecurring, TypeOther:
		return nil
	default:
		return fmt.Errorf("invoice: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusDraft is the default value of the Status enum.
const DefaultStatus = StatusDraft

// Status values.
const (
	StatusDraft    Status = "DRAFT"
	StatusActive   Status = "ACTIVE"
	StatusSent     Status = "SENT"
	StatusDisputed Status = "DISPUTED"
	StatusOverdue  Status = "OVERDUE"
	StatusPartial  Status = "PARTIAL"
	StatusPaid     Status = "PAID"
	StatusVoid     Status = "VOID"
	StatusDebt     Status = "DEBT"
	StatusOther    Status = "OTHER"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDraft, StatusActive, StatusSent, StatusDisputed, StatusOverdue, StatusPartial, StatusPaid, StatusVoid, StatusDebt, StatusOther:
		return nil
	default:
		return fmt.Errorf("invoice: invalid enum value for status field: %q", s)
	}
}

// PaymentMethod defines the type for the "payment_method" enum field.
type PaymentMethod string

// PaymentMethodCash is the default value of the PaymentMethod enum.
const DefaultPaymentMethod = PaymentMethodCash

// PaymentMethod values.
const (
	PaymentMethodCash        PaymentMethod = "CASH"
	PaymentMethodEFT         PaymentMethod = "ELECTRONIC_FUNDS_TRANSFER"
	PaymentMethodGiftCard    PaymentMethod = "GIFT_CARD"
	PaymentMethodCreditCard  PaymentMethod = "CREDIT_CARD"
	PaymentMethodDebitCard   PaymentMethod = "DEBIT_CARD"
	PaymentMethodPrepaidCard PaymentMethod = "PREPAID_CARD"
	PaymentMethodCheck       PaymentMethod = "CHECK"
	PaymentMethodOther       PaymentMethod = "OTHER"
)

func (pm PaymentMethod) String() string {
	return string(pm)
}

// PaymentMethodValidator is a validator for the "payment_method" field enum values. It is called by the builders before save.
func PaymentMethodValidator(pm PaymentMethod) error {
	switch pm {
	case PaymentMethodCash, PaymentMethodEFT, PaymentMethodGiftCard, PaymentMethodCreditCard, PaymentMethodDebitCard, PaymentMethodPrepaidCard, PaymentMethodCheck, PaymentMethodOther:
		return nil
	default:
		return fmt.Errorf("invoice: invalid enum value for payment_method field: %q", pm)
	}
}

// OrderOption defines the ordering options for the Invoice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByTotal orders the results by the total field.
func ByTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotal, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPaymentMethod orders the results by the payment_method field.
func ByPaymentMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentMethod, opts...).ToFunc()
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrderTable, OrderColumn),
	)
}
