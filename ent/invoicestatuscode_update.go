// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/invoicestatuscode"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// InvoiceStatusCodeUpdate is the builder for updating InvoiceStatusCode entities.
type InvoiceStatusCodeUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceStatusCodeMutation
}

// Where appends a list predicates to the InvoiceStatusCodeUpdate builder.
func (iscu *InvoiceStatusCodeUpdate) Where(ps ...predicate.InvoiceStatusCode) *InvoiceStatusCodeUpdate {
	iscu.mutation.Where(ps...)
	return iscu
}

// SetUpdatedAt sets the "updated_at" field.
func (iscu *InvoiceStatusCodeUpdate) SetUpdatedAt(t time.Time) *InvoiceStatusCodeUpdate {
	iscu.mutation.SetUpdatedAt(t)
	return iscu
}

// SetInvoiceStatus sets the "invoice_status" field.
func (iscu *InvoiceStatusCodeUpdate) SetInvoiceStatus(s string) *InvoiceStatusCodeUpdate {
	iscu.mutation.SetInvoiceStatus(s)
	return iscu
}

// SetNillableInvoiceStatus sets the "invoice_status" field if the given value is not nil.
func (iscu *InvoiceStatusCodeUpdate) SetNillableInvoiceStatus(s *string) *InvoiceStatusCodeUpdate {
	if s != nil {
		iscu.SetInvoiceStatus(*s)
	}
	return iscu
}

// Mutation returns the InvoiceStatusCodeMutation object of the builder.
func (iscu *InvoiceStatusCodeUpdate) Mutation() *InvoiceStatusCodeMutation {
	return iscu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iscu *InvoiceStatusCodeUpdate) Save(ctx context.Context) (int, error) {
	iscu.defaults()
	return withHooks(ctx, iscu.sqlSave, iscu.mutation, iscu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iscu *InvoiceStatusCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := iscu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iscu *InvoiceStatusCodeUpdate) Exec(ctx context.Context) error {
	_, err := iscu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscu *InvoiceStatusCodeUpdate) ExecX(ctx context.Context) {
	if err := iscu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iscu *InvoiceStatusCodeUpdate) defaults() {
	if _, ok := iscu.mutation.UpdatedAt(); !ok {
		v := invoicestatuscode.UpdateDefaultUpdatedAt()
		iscu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iscu *InvoiceStatusCodeUpdate) check() error {
	if v, ok := iscu.mutation.InvoiceStatus(); ok {
		if err := invoicestatuscode.InvoiceStatusValidator(v); err != nil {
			return &ValidationError{Name: "invoice_status", err: fmt.Errorf(`ent: validator failed for field "InvoiceStatusCode.invoice_status": %w`, err)}
		}
	}
	return nil
}

func (iscu *InvoiceStatusCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iscu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoicestatuscode.Table, invoicestatuscode.Columns, sqlgraph.NewFieldSpec(invoicestatuscode.FieldID, field.TypeInt))
	if ps := iscu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iscu.mutation.UpdatedAt(); ok {
		_spec.SetField(invoicestatuscode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iscu.mutation.InvoiceStatus(); ok {
		_spec.SetField(invoicestatuscode.FieldInvoiceStatus, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iscu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoicestatuscode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iscu.mutation.done = true
	return n, nil
}

// InvoiceStatusCodeUpdateOne is the builder for updating a single InvoiceStatusCode entity.
type InvoiceStatusCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceStatusCodeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iscuo *InvoiceStatusCodeUpdateOne) SetUpdatedAt(t time.Time) *InvoiceStatusCodeUpdateOne {
	iscuo.mutation.SetUpdatedAt(t)
	return iscuo
}

// SetInvoiceStatus sets the "invoice_status" field.
func (iscuo *InvoiceStatusCodeUpdateOne) SetInvoiceStatus(s string) *InvoiceStatusCodeUpdateOne {
	iscuo.mutation.SetInvoiceStatus(s)
	return iscuo
}

// SetNillableInvoiceStatus sets the "invoice_status" field if the given value is not nil.
func (iscuo *InvoiceStatusCodeUpdateOne) SetNillableInvoiceStatus(s *string) *InvoiceStatusCodeUpdateOne {
	if s != nil {
		iscuo.SetInvoiceStatus(*s)
	}
	return iscuo
}

// Mutation returns the InvoiceStatusCodeMutation object of the builder.
func (iscuo *InvoiceStatusCodeUpdateOne) Mutation() *InvoiceStatusCodeMutation {
	return iscuo.mutation
}

// Where appends a list predicates to the InvoiceStatusCodeUpdate builder.
func (iscuo *InvoiceStatusCodeUpdateOne) Where(ps ...predicate.InvoiceStatusCode) *InvoiceStatusCodeUpdateOne {
	iscuo.mutation.Where(ps...)
	return iscuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iscuo *InvoiceStatusCodeUpdateOne) Select(field string, fields ...string) *InvoiceStatusCodeUpdateOne {
	iscuo.fields = append([]string{field}, fields...)
	return iscuo
}

// Save executes the query and returns the updated InvoiceStatusCode entity.
func (iscuo *InvoiceStatusCodeUpdateOne) Save(ctx context.Context) (*InvoiceStatusCode, error) {
	iscuo.defaults()
	return withHooks(ctx, iscuo.sqlSave, iscuo.mutation, iscuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iscuo *InvoiceStatusCodeUpdateOne) SaveX(ctx context.Context) *InvoiceStatusCode {
	node, err := iscuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iscuo *InvoiceStatusCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := iscuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscuo *InvoiceStatusCodeUpdateOne) ExecX(ctx context.Context) {
	if err := iscuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iscuo *InvoiceStatusCodeUpdateOne) defaults() {
	if _, ok := iscuo.mutation.UpdatedAt(); !ok {
		v := invoicestatuscode.UpdateDefaultUpdatedAt()
		iscuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iscuo *InvoiceStatusCodeUpdateOne) check() error {
	if v, ok := iscuo.mutation.InvoiceStatus(); ok {
		if err := invoicestatuscode.InvoiceStatusValidator(v); err != nil {
			return &ValidationError{Name: "invoice_status", err: fmt.Errorf(`ent: validator failed for field "InvoiceStatusCode.invoice_status": %w`, err)}
		}
	}
	return nil
}

func (iscuo *InvoiceStatusCodeUpdateOne) sqlSave(ctx context.Context) (_node *InvoiceStatusCode, err error) {
	if err := iscuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoicestatuscode.Table, invoicestatuscode.Columns, sqlgraph.NewFieldSpec(invoicestatuscode.FieldID, field.TypeInt))
	id, ok := iscuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InvoiceStatusCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iscuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoicestatuscode.FieldID)
		for _, f := range fields {
			if !invoicestatuscode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoicestatuscode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iscuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iscuo.mutation.UpdatedAt(); ok {
		_spec.SetField(invoicestatuscode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iscuo.mutation.InvoiceStatus(); ok {
		_spec.SetField(invoicestatuscode.FieldInvoiceStatus, field.TypeString, value)
	}
	_node = &InvoiceStatusCode{config: iscuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iscuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoicestatuscode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iscuo.mutation.done = true
	return _node, nil
}
