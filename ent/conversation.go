// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/conversation"
	"github.com/thaiha1607/foursquare_server/ent/user"
)

// Conversation is the model entity for the Conversation schema.
type Conversation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Title holds the value of the "title" field.
	Title *string `json:"title,omitempty"`
	// UserOneID holds the value of the "user_one_id" field.
	UserOneID uuid.UUID `json:"user_one_id,omitempty"`
	// UserTwoID holds the value of the "user_two_id" field.
	UserTwoID uuid.UUID `json:"user_two_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConversationQuery when eager-loading is set.
	Edges        ConversationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ConversationEdges holds the relations/edges for other nodes in the graph.
type ConversationEdges struct {
	// UserOne holds the value of the user_one edge.
	UserOne *User `json:"user_one,omitempty"`
	// UserTwo holds the value of the user_two edge.
	UserTwo *User `json:"user_two,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOneOrErr returns the UserOne value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConversationEdges) UserOneOrErr() (*User, error) {
	if e.UserOne != nil {
		return e.UserOne, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user_one"}
}

// UserTwoOrErr returns the UserTwo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConversationEdges) UserTwoOrErr() (*User, error) {
	if e.UserTwo != nil {
		return e.UserTwo, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user_two"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Conversation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case conversation.FieldTitle:
			values[i] = new(sql.NullString)
		case conversation.FieldCreatedAt, conversation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case conversation.FieldID, conversation.FieldUserOneID, conversation.FieldUserTwoID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Conversation fields.
func (c *Conversation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case conversation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case conversation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case conversation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case conversation.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = new(string)
				*c.Title = value.String
			}
		case conversation.FieldUserOneID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_one_id", values[i])
			} else if value != nil {
				c.UserOneID = *value
			}
		case conversation.FieldUserTwoID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_two_id", values[i])
			} else if value != nil {
				c.UserTwoID = *value
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Conversation.
// This includes values selected through modifiers, order, etc.
func (c *Conversation) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryUserOne queries the "user_one" edge of the Conversation entity.
func (c *Conversation) QueryUserOne() *UserQuery {
	return NewConversationClient(c.config).QueryUserOne(c)
}

// QueryUserTwo queries the "user_two" edge of the Conversation entity.
func (c *Conversation) QueryUserTwo() *UserQuery {
	return NewConversationClient(c.config).QueryUserTwo(c)
}

// Update returns a builder for updating this Conversation.
// Note that you need to call Conversation.Unwrap() before calling this method if this Conversation
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Conversation) Update() *ConversationUpdateOne {
	return NewConversationClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Conversation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Conversation) Unwrap() *Conversation {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Conversation is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Conversation) String() string {
	var builder strings.Builder
	builder.WriteString("Conversation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := c.Title; v != nil {
		builder.WriteString("title=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("user_one_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserOneID))
	builder.WriteString(", ")
	builder.WriteString("user_two_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserTwoID))
	builder.WriteByte(')')
	return builder.String()
}

// Conversations is a parsable slice of Conversation.
type Conversations []*Conversation
