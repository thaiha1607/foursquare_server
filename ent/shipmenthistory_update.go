// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/shipmenthistory"
)

// ShipmentHistoryUpdate is the builder for updating ShipmentHistory entities.
type ShipmentHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentHistoryMutation
}

// Where appends a list predicates to the ShipmentHistoryUpdate builder.
func (shu *ShipmentHistoryUpdate) Where(ps ...predicate.ShipmentHistory) *ShipmentHistoryUpdate {
	shu.mutation.Where(ps...)
	return shu
}

// SetUpdatedAt sets the "updated_at" field.
func (shu *ShipmentHistoryUpdate) SetUpdatedAt(t time.Time) *ShipmentHistoryUpdate {
	shu.mutation.SetUpdatedAt(t)
	return shu
}

// Mutation returns the ShipmentHistoryMutation object of the builder.
func (shu *ShipmentHistoryUpdate) Mutation() *ShipmentHistoryMutation {
	return shu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (shu *ShipmentHistoryUpdate) Save(ctx context.Context) (int, error) {
	shu.defaults()
	return withHooks(ctx, shu.sqlSave, shu.mutation, shu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (shu *ShipmentHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := shu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (shu *ShipmentHistoryUpdate) Exec(ctx context.Context) error {
	_, err := shu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shu *ShipmentHistoryUpdate) ExecX(ctx context.Context) {
	if err := shu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shu *ShipmentHistoryUpdate) defaults() {
	if _, ok := shu.mutation.UpdatedAt(); !ok {
		v := shipmenthistory.UpdateDefaultUpdatedAt()
		shu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (shu *ShipmentHistoryUpdate) check() error {
	if _, ok := shu.mutation.ShipmentID(); shu.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentHistory.shipment"`)
	}
	if _, ok := shu.mutation.PersonID(); shu.mutation.PersonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentHistory.person"`)
	}
	return nil
}

func (shu *ShipmentHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := shu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmenthistory.Table, shipmenthistory.Columns, sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeUUID))
	if ps := shu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := shu.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmenthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if shu.mutation.DescriptionCleared() {
		_spec.ClearField(shipmenthistory.FieldDescription, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, shu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmenthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	shu.mutation.done = true
	return n, nil
}

// ShipmentHistoryUpdateOne is the builder for updating a single ShipmentHistory entity.
type ShipmentHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (shuo *ShipmentHistoryUpdateOne) SetUpdatedAt(t time.Time) *ShipmentHistoryUpdateOne {
	shuo.mutation.SetUpdatedAt(t)
	return shuo
}

// Mutation returns the ShipmentHistoryMutation object of the builder.
func (shuo *ShipmentHistoryUpdateOne) Mutation() *ShipmentHistoryMutation {
	return shuo.mutation
}

// Where appends a list predicates to the ShipmentHistoryUpdate builder.
func (shuo *ShipmentHistoryUpdateOne) Where(ps ...predicate.ShipmentHistory) *ShipmentHistoryUpdateOne {
	shuo.mutation.Where(ps...)
	return shuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (shuo *ShipmentHistoryUpdateOne) Select(field string, fields ...string) *ShipmentHistoryUpdateOne {
	shuo.fields = append([]string{field}, fields...)
	return shuo
}

// Save executes the query and returns the updated ShipmentHistory entity.
func (shuo *ShipmentHistoryUpdateOne) Save(ctx context.Context) (*ShipmentHistory, error) {
	shuo.defaults()
	return withHooks(ctx, shuo.sqlSave, shuo.mutation, shuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (shuo *ShipmentHistoryUpdateOne) SaveX(ctx context.Context) *ShipmentHistory {
	node, err := shuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (shuo *ShipmentHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := shuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shuo *ShipmentHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := shuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shuo *ShipmentHistoryUpdateOne) defaults() {
	if _, ok := shuo.mutation.UpdatedAt(); !ok {
		v := shipmenthistory.UpdateDefaultUpdatedAt()
		shuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (shuo *ShipmentHistoryUpdateOne) check() error {
	if _, ok := shuo.mutation.ShipmentID(); shuo.mutation.ShipmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentHistory.shipment"`)
	}
	if _, ok := shuo.mutation.PersonID(); shuo.mutation.PersonCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ShipmentHistory.person"`)
	}
	return nil
}

func (shuo *ShipmentHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentHistory, err error) {
	if err := shuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmenthistory.Table, shipmenthistory.Columns, sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeUUID))
	id, ok := shuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := shuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmenthistory.FieldID)
		for _, f := range fields {
			if !shipmenthistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmenthistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := shuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := shuo.mutation.UpdatedAt(); ok {
		_spec.SetField(shipmenthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if shuo.mutation.DescriptionCleared() {
		_spec.ClearField(shipmenthistory.FieldDescription, field.TypeString)
	}
	_node = &ShipmentHistory{config: shuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, shuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmenthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	shuo.mutation.done = true
	return _node, nil
}
