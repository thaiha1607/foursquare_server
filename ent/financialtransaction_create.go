// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"github.com/thaiha1607/foursquare_server/ent/financialtransaction"
	"github.com/thaiha1607/foursquare_server/ent/invoice"
	"github.com/thaiha1607/foursquare_server/ent/paymentmethod"
	"github.com/thaiha1607/foursquare_server/ent/transactiontype"
)

// FinancialTransactionCreate is the builder for creating a FinancialTransaction entity.
type FinancialTransactionCreate struct {
	config
	mutation *FinancialTransactionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ftc *FinancialTransactionCreate) SetCreatedAt(t time.Time) *FinancialTransactionCreate {
	ftc.mutation.SetCreatedAt(t)
	return ftc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ftc *FinancialTransactionCreate) SetNillableCreatedAt(t *time.Time) *FinancialTransactionCreate {
	if t != nil {
		ftc.SetCreatedAt(*t)
	}
	return ftc
}

// SetUpdatedAt sets the "updated_at" field.
func (ftc *FinancialTransactionCreate) SetUpdatedAt(t time.Time) *FinancialTransactionCreate {
	ftc.mutation.SetUpdatedAt(t)
	return ftc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ftc *FinancialTransactionCreate) SetNillableUpdatedAt(t *time.Time) *FinancialTransactionCreate {
	if t != nil {
		ftc.SetUpdatedAt(*t)
	}
	return ftc
}

// SetInvoiceID sets the "invoice_id" field.
func (ftc *FinancialTransactionCreate) SetInvoiceID(u uuid.UUID) *FinancialTransactionCreate {
	ftc.mutation.SetInvoiceID(u)
	return ftc
}

// SetAmount sets the "amount" field.
func (ftc *FinancialTransactionCreate) SetAmount(d decimal.Decimal) *FinancialTransactionCreate {
	ftc.mutation.SetAmount(d)
	return ftc
}

// SetComment sets the "comment" field.
func (ftc *FinancialTransactionCreate) SetComment(s string) *FinancialTransactionCreate {
	ftc.mutation.SetComment(s)
	return ftc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (ftc *FinancialTransactionCreate) SetNillableComment(s *string) *FinancialTransactionCreate {
	if s != nil {
		ftc.SetComment(*s)
	}
	return ftc
}

// SetType sets the "type" field.
func (ftc *FinancialTransactionCreate) SetType(i int) *FinancialTransactionCreate {
	ftc.mutation.SetType(i)
	return ftc
}

// SetPaymentMethod sets the "payment_method" field.
func (ftc *FinancialTransactionCreate) SetPaymentMethod(i int) *FinancialTransactionCreate {
	ftc.mutation.SetPaymentMethod(i)
	return ftc
}

// SetID sets the "id" field.
func (ftc *FinancialTransactionCreate) SetID(u uuid.UUID) *FinancialTransactionCreate {
	ftc.mutation.SetID(u)
	return ftc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ftc *FinancialTransactionCreate) SetNillableID(u *uuid.UUID) *FinancialTransactionCreate {
	if u != nil {
		ftc.SetID(*u)
	}
	return ftc
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (ftc *FinancialTransactionCreate) SetInvoice(i *Invoice) *FinancialTransactionCreate {
	return ftc.SetInvoiceID(i.ID)
}

// SetTransactionTypeID sets the "transaction_type" edge to the TransactionType entity by ID.
func (ftc *FinancialTransactionCreate) SetTransactionTypeID(id int) *FinancialTransactionCreate {
	ftc.mutation.SetTransactionTypeID(id)
	return ftc
}

// SetTransactionType sets the "transaction_type" edge to the TransactionType entity.
func (ftc *FinancialTransactionCreate) SetTransactionType(t *TransactionType) *FinancialTransactionCreate {
	return ftc.SetTransactionTypeID(t.ID)
}

// SetPaymentID sets the "payment" edge to the PaymentMethod entity by ID.
func (ftc *FinancialTransactionCreate) SetPaymentID(id int) *FinancialTransactionCreate {
	ftc.mutation.SetPaymentID(id)
	return ftc
}

// SetPayment sets the "payment" edge to the PaymentMethod entity.
func (ftc *FinancialTransactionCreate) SetPayment(p *PaymentMethod) *FinancialTransactionCreate {
	return ftc.SetPaymentID(p.ID)
}

// Mutation returns the FinancialTransactionMutation object of the builder.
func (ftc *FinancialTransactionCreate) Mutation() *FinancialTransactionMutation {
	return ftc.mutation
}

// Save creates the FinancialTransaction in the database.
func (ftc *FinancialTransactionCreate) Save(ctx context.Context) (*FinancialTransaction, error) {
	ftc.defaults()
	return withHooks(ctx, ftc.sqlSave, ftc.mutation, ftc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ftc *FinancialTransactionCreate) SaveX(ctx context.Context) *FinancialTransaction {
	v, err := ftc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ftc *FinancialTransactionCreate) Exec(ctx context.Context) error {
	_, err := ftc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftc *FinancialTransactionCreate) ExecX(ctx context.Context) {
	if err := ftc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ftc *FinancialTransactionCreate) defaults() {
	if _, ok := ftc.mutation.CreatedAt(); !ok {
		v := financialtransaction.DefaultCreatedAt()
		ftc.mutation.SetCreatedAt(v)
	}
	if _, ok := ftc.mutation.UpdatedAt(); !ok {
		v := financialtransaction.DefaultUpdatedAt()
		ftc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ftc.mutation.ID(); !ok {
		v := financialtransaction.DefaultID()
		ftc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftc *FinancialTransactionCreate) check() error {
	if _, ok := ftc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FinancialTransaction.created_at"`)}
	}
	if _, ok := ftc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FinancialTransaction.updated_at"`)}
	}
	if _, ok := ftc.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice_id", err: errors.New(`ent: missing required field "FinancialTransaction.invoice_id"`)}
	}
	if _, ok := ftc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "FinancialTransaction.amount"`)}
	}
	if _, ok := ftc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "FinancialTransaction.type"`)}
	}
	if _, ok := ftc.mutation.PaymentMethod(); !ok {
		return &ValidationError{Name: "payment_method", err: errors.New(`ent: missing required field "FinancialTransaction.payment_method"`)}
	}
	if _, ok := ftc.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice", err: errors.New(`ent: missing required edge "FinancialTransaction.invoice"`)}
	}
	if _, ok := ftc.mutation.TransactionTypeID(); !ok {
		return &ValidationError{Name: "transaction_type", err: errors.New(`ent: missing required edge "FinancialTransaction.transaction_type"`)}
	}
	if _, ok := ftc.mutation.PaymentID(); !ok {
		return &ValidationError{Name: "payment", err: errors.New(`ent: missing required edge "FinancialTransaction.payment"`)}
	}
	return nil
}

func (ftc *FinancialTransactionCreate) sqlSave(ctx context.Context) (*FinancialTransaction, error) {
	if err := ftc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ftc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ftc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ftc.mutation.id = &_node.ID
	ftc.mutation.done = true
	return _node, nil
}

func (ftc *FinancialTransactionCreate) createSpec() (*FinancialTransaction, *sqlgraph.CreateSpec) {
	var (
		_node = &FinancialTransaction{config: ftc.config}
		_spec = sqlgraph.NewCreateSpec(financialtransaction.Table, sqlgraph.NewFieldSpec(financialtransaction.FieldID, field.TypeUUID))
	)
	if id, ok := ftc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ftc.mutation.CreatedAt(); ok {
		_spec.SetField(financialtransaction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ftc.mutation.UpdatedAt(); ok {
		_spec.SetField(financialtransaction.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ftc.mutation.Amount(); ok {
		_spec.SetField(financialtransaction.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := ftc.mutation.Comment(); ok {
		_spec.SetField(financialtransaction.FieldComment, field.TypeString, value)
		_node.Comment = &value
	}
	if nodes := ftc.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   financialtransaction.InvoiceTable,
			Columns: []string{financialtransaction.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvoiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ftc.mutation.TransactionTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   financialtransaction.TransactionTypeTable,
			Columns: []string{financialtransaction.TransactionTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactiontype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Type = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ftc.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   financialtransaction.PaymentTable,
			Columns: []string{financialtransaction.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(paymentmethod.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PaymentMethod = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FinancialTransactionCreateBulk is the builder for creating many FinancialTransaction entities in bulk.
type FinancialTransactionCreateBulk struct {
	config
	err      error
	builders []*FinancialTransactionCreate
}

// Save creates the FinancialTransaction entities in the database.
func (ftcb *FinancialTransactionCreateBulk) Save(ctx context.Context) ([]*FinancialTransaction, error) {
	if ftcb.err != nil {
		return nil, ftcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ftcb.builders))
	nodes := make([]*FinancialTransaction, len(ftcb.builders))
	mutators := make([]Mutator, len(ftcb.builders))
	for i := range ftcb.builders {
		func(i int, root context.Context) {
			builder := ftcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FinancialTransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ftcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ftcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ftcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ftcb *FinancialTransactionCreateBulk) SaveX(ctx context.Context) []*FinancialTransaction {
	v, err := ftcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ftcb *FinancialTransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := ftcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftcb *FinancialTransactionCreateBulk) ExecX(ctx context.Context) {
	if err := ftcb.Exec(ctx); err != nil {
		panic(err)
	}
}
