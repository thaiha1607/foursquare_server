// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/transactiontype"
)

// TransactionTypeUpdate is the builder for updating TransactionType entities.
type TransactionTypeUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionTypeMutation
}

// Where appends a list predicates to the TransactionTypeUpdate builder.
func (ttu *TransactionTypeUpdate) Where(ps ...predicate.TransactionType) *TransactionTypeUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetUpdatedAt sets the "updated_at" field.
func (ttu *TransactionTypeUpdate) SetUpdatedAt(t time.Time) *TransactionTypeUpdate {
	ttu.mutation.SetUpdatedAt(t)
	return ttu
}

// SetTransactionType sets the "transaction_type" field.
func (ttu *TransactionTypeUpdate) SetTransactionType(s string) *TransactionTypeUpdate {
	ttu.mutation.SetTransactionType(s)
	return ttu
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (ttu *TransactionTypeUpdate) SetNillableTransactionType(s *string) *TransactionTypeUpdate {
	if s != nil {
		ttu.SetTransactionType(*s)
	}
	return ttu
}

// Mutation returns the TransactionTypeMutation object of the builder.
func (ttu *TransactionTypeUpdate) Mutation() *TransactionTypeMutation {
	return ttu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TransactionTypeUpdate) Save(ctx context.Context) (int, error) {
	ttu.defaults()
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TransactionTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TransactionTypeUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TransactionTypeUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttu *TransactionTypeUpdate) defaults() {
	if _, ok := ttu.mutation.UpdatedAt(); !ok {
		v := transactiontype.UpdateDefaultUpdatedAt()
		ttu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TransactionTypeUpdate) check() error {
	if v, ok := ttu.mutation.TransactionType(); ok {
		if err := transactiontype.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "transaction_type", err: fmt.Errorf(`ent: validator failed for field "TransactionType.transaction_type": %w`, err)}
		}
	}
	return nil
}

func (ttu *TransactionTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ttu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transactiontype.Table, transactiontype.Columns, sqlgraph.NewFieldSpec(transactiontype.FieldID, field.TypeInt))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.UpdatedAt(); ok {
		_spec.SetField(transactiontype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ttu.mutation.TransactionType(); ok {
		_spec.SetField(transactiontype.FieldTransactionType, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactiontype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// TransactionTypeUpdateOne is the builder for updating a single TransactionType entity.
type TransactionTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionTypeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ttuo *TransactionTypeUpdateOne) SetUpdatedAt(t time.Time) *TransactionTypeUpdateOne {
	ttuo.mutation.SetUpdatedAt(t)
	return ttuo
}

// SetTransactionType sets the "transaction_type" field.
func (ttuo *TransactionTypeUpdateOne) SetTransactionType(s string) *TransactionTypeUpdateOne {
	ttuo.mutation.SetTransactionType(s)
	return ttuo
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (ttuo *TransactionTypeUpdateOne) SetNillableTransactionType(s *string) *TransactionTypeUpdateOne {
	if s != nil {
		ttuo.SetTransactionType(*s)
	}
	return ttuo
}

// Mutation returns the TransactionTypeMutation object of the builder.
func (ttuo *TransactionTypeUpdateOne) Mutation() *TransactionTypeMutation {
	return ttuo.mutation
}

// Where appends a list predicates to the TransactionTypeUpdate builder.
func (ttuo *TransactionTypeUpdateOne) Where(ps ...predicate.TransactionType) *TransactionTypeUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TransactionTypeUpdateOne) Select(field string, fields ...string) *TransactionTypeUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TransactionType entity.
func (ttuo *TransactionTypeUpdateOne) Save(ctx context.Context) (*TransactionType, error) {
	ttuo.defaults()
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TransactionTypeUpdateOne) SaveX(ctx context.Context) *TransactionType {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TransactionTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TransactionTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttuo *TransactionTypeUpdateOne) defaults() {
	if _, ok := ttuo.mutation.UpdatedAt(); !ok {
		v := transactiontype.UpdateDefaultUpdatedAt()
		ttuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TransactionTypeUpdateOne) check() error {
	if v, ok := ttuo.mutation.TransactionType(); ok {
		if err := transactiontype.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "transaction_type", err: fmt.Errorf(`ent: validator failed for field "TransactionType.transaction_type": %w`, err)}
		}
	}
	return nil
}

func (ttuo *TransactionTypeUpdateOne) sqlSave(ctx context.Context) (_node *TransactionType, err error) {
	if err := ttuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transactiontype.Table, transactiontype.Columns, sqlgraph.NewFieldSpec(transactiontype.FieldID, field.TypeInt))
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TransactionType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transactiontype.FieldID)
		for _, f := range fields {
			if !transactiontype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transactiontype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.UpdatedAt(); ok {
		_spec.SetField(transactiontype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ttuo.mutation.TransactionType(); ok {
		_spec.SetField(transactiontype.FieldTransactionType, field.TypeString, value)
	}
	_node = &TransactionType{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactiontype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
