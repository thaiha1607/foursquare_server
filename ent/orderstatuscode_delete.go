// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/orderstatuscode"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
)

// OrderStatusCodeDelete is the builder for deleting a OrderStatusCode entity.
type OrderStatusCodeDelete struct {
	config
	hooks    []Hook
	mutation *OrderStatusCodeMutation
}

// Where appends a list predicates to the OrderStatusCodeDelete builder.
func (oscd *OrderStatusCodeDelete) Where(ps ...predicate.OrderStatusCode) *OrderStatusCodeDelete {
	oscd.mutation.Where(ps...)
	return oscd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (oscd *OrderStatusCodeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, oscd.sqlExec, oscd.mutation, oscd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (oscd *OrderStatusCodeDelete) ExecX(ctx context.Context) int {
	n, err := oscd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (oscd *OrderStatusCodeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(orderstatuscode.Table, sqlgraph.NewFieldSpec(orderstatuscode.FieldID, field.TypeInt))
	if ps := oscd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, oscd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	oscd.mutation.done = true
	return affected, err
}

// OrderStatusCodeDeleteOne is the builder for deleting a single OrderStatusCode entity.
type OrderStatusCodeDeleteOne struct {
	oscd *OrderStatusCodeDelete
}

// Where appends a list predicates to the OrderStatusCodeDelete builder.
func (oscdo *OrderStatusCodeDeleteOne) Where(ps ...predicate.OrderStatusCode) *OrderStatusCodeDeleteOne {
	oscdo.oscd.mutation.Where(ps...)
	return oscdo
}

// Exec executes the deletion query.
func (oscdo *OrderStatusCodeDeleteOne) Exec(ctx context.Context) error {
	n, err := oscdo.oscd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{orderstatuscode.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oscdo *OrderStatusCodeDeleteOne) ExecX(ctx context.Context) {
	if err := oscdo.Exec(ctx); err != nil {
		panic(err)
	}
}
