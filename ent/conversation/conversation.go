// Code generated by ent, DO NOT EDIT.

package conversation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the conversation type in the database.
	Label = "conversation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldPersonOneID holds the string denoting the person_one_id field in the database.
	FieldPersonOneID = "person_one_id"
	// FieldPersonTwoID holds the string denoting the person_two_id field in the database.
	FieldPersonTwoID = "person_two_id"
	// EdgePersonOne holds the string denoting the person_one edge name in mutations.
	EdgePersonOne = "person_one"
	// EdgePersonTwo holds the string denoting the person_two edge name in mutations.
	EdgePersonTwo = "person_two"
	// Table holds the table name of the conversation in the database.
	Table = "conversations"
	// PersonOneTable is the table that holds the person_one relation/edge.
	PersonOneTable = "conversations"
	// PersonOneInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PersonOneInverseTable = "persons"
	// PersonOneColumn is the table column denoting the person_one relation/edge.
	PersonOneColumn = "person_one_id"
	// PersonTwoTable is the table that holds the person_two relation/edge.
	PersonTwoTable = "conversations"
	// PersonTwoInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PersonTwoInverseTable = "persons"
	// PersonTwoColumn is the table column denoting the person_two relation/edge.
	PersonTwoColumn = "person_two_id"
)

// Columns holds all SQL columns for conversation fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTitle,
	FieldPersonOneID,
	FieldPersonTwoID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Conversation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByPersonOneID orders the results by the person_one_id field.
func ByPersonOneID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPersonOneID, opts...).ToFunc()
}

// ByPersonTwoID orders the results by the person_two_id field.
func ByPersonTwoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPersonTwoID, opts...).ToFunc()
}

// ByPersonOneField orders the results by person_one field.
func ByPersonOneField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonOneStep(), sql.OrderByField(field, opts...))
	}
}

// ByPersonTwoField orders the results by person_two field.
func ByPersonTwoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonTwoStep(), sql.OrderByField(field, opts...))
	}
}
func newPersonOneStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonOneInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PersonOneTable, PersonOneColumn),
	)
}
func newPersonTwoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonTwoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PersonTwoTable, PersonTwoColumn),
	)
}
