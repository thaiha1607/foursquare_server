// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"github.com/thaiha1607/foursquare_server/ent/financialtransaction"
	"github.com/thaiha1607/foursquare_server/ent/invoice"
)

// FinancialTransaction is the model entity for the FinancialTransaction schema.
type FinancialTransaction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// InvoiceID holds the value of the "invoice_id" field.
	InvoiceID uuid.UUID `json:"invoice_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment *string `json:"comment,omitempty"`
	// IsInternal holds the value of the "is_internal" field.
	IsInternal bool `json:"is_internal,omitempty"`
	// PaymentMethod holds the value of the "payment_method" field.
	PaymentMethod financialtransaction.PaymentMethod `json:"payment_method,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FinancialTransactionQuery when eager-loading is set.
	Edges        FinancialTransactionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FinancialTransactionEdges holds the relations/edges for other nodes in the graph.
type FinancialTransactionEdges struct {
	// Invoice holds the value of the invoice edge.
	Invoice *Invoice `json:"invoice,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InvoiceOrErr returns the Invoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FinancialTransactionEdges) InvoiceOrErr() (*Invoice, error) {
	if e.loadedTypes[0] {
		if e.Invoice == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: invoice.Label}
		}
		return e.Invoice, nil
	}
	return nil, &NotLoadedError{edge: "invoice"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FinancialTransaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case financialtransaction.FieldAmount:
			values[i] = new(decimal.Decimal)
		case financialtransaction.FieldIsInternal:
			values[i] = new(sql.NullBool)
		case financialtransaction.FieldComment, financialtransaction.FieldPaymentMethod:
			values[i] = new(sql.NullString)
		case financialtransaction.FieldCreatedAt, financialtransaction.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case financialtransaction.FieldID, financialtransaction.FieldInvoiceID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FinancialTransaction fields.
func (ft *FinancialTransaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case financialtransaction.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ft.ID = *value
			}
		case financialtransaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ft.CreatedAt = value.Time
			}
		case financialtransaction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ft.UpdatedAt = value.Time
			}
		case financialtransaction.FieldInvoiceID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_id", values[i])
			} else if value != nil {
				ft.InvoiceID = *value
			}
		case financialtransaction.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				ft.Amount = *value
			}
		case financialtransaction.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				ft.Comment = new(string)
				*ft.Comment = value.String
			}
		case financialtransaction.FieldIsInternal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_internal", values[i])
			} else if value.Valid {
				ft.IsInternal = value.Bool
			}
		case financialtransaction.FieldPaymentMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method", values[i])
			} else if value.Valid {
				ft.PaymentMethod = financialtransaction.PaymentMethod(value.String)
			}
		default:
			ft.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FinancialTransaction.
// This includes values selected through modifiers, order, etc.
func (ft *FinancialTransaction) Value(name string) (ent.Value, error) {
	return ft.selectValues.Get(name)
}

// QueryInvoice queries the "invoice" edge of the FinancialTransaction entity.
func (ft *FinancialTransaction) QueryInvoice() *InvoiceQuery {
	return NewFinancialTransactionClient(ft.config).QueryInvoice(ft)
}

// Update returns a builder for updating this FinancialTransaction.
// Note that you need to call FinancialTransaction.Unwrap() before calling this method if this FinancialTransaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (ft *FinancialTransaction) Update() *FinancialTransactionUpdateOne {
	return NewFinancialTransactionClient(ft.config).UpdateOne(ft)
}

// Unwrap unwraps the FinancialTransaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ft *FinancialTransaction) Unwrap() *FinancialTransaction {
	_tx, ok := ft.config.driver.(*txDriver)
	if !ok {
		panic("ent: FinancialTransaction is not a transactional entity")
	}
	ft.config.driver = _tx.drv
	return ft
}

// String implements the fmt.Stringer.
func (ft *FinancialTransaction) String() string {
	var builder strings.Builder
	builder.WriteString("FinancialTransaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ft.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ft.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ft.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("invoice_id=")
	builder.WriteString(fmt.Sprintf("%v", ft.InvoiceID))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", ft.Amount))
	builder.WriteString(", ")
	if v := ft.Comment; v != nil {
		builder.WriteString("comment=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("is_internal=")
	builder.WriteString(fmt.Sprintf("%v", ft.IsInternal))
	builder.WriteString(", ")
	builder.WriteString("payment_method=")
	builder.WriteString(fmt.Sprintf("%v", ft.PaymentMethod))
	builder.WriteByte(')')
	return builder.String()
}

// FinancialTransactions is a parsable slice of FinancialTransaction.
type FinancialTransactions []*FinancialTransaction
