// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/account"
	"github.com/thaiha1607/foursquare_server/ent/user"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *AccountCreate) SetCreatedAt(t time.Time) *AccountCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableCreatedAt(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AccountCreate) SetUpdatedAt(t time.Time) *AccountCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableUpdatedAt(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetUserID sets the "user_id" field.
func (ac *AccountCreate) SetUserID(u uuid.UUID) *AccountCreate {
	ac.mutation.SetUserID(u)
	return ac
}

// SetUsername sets the "username" field.
func (ac *AccountCreate) SetUsername(s string) *AccountCreate {
	ac.mutation.SetUsername(s)
	return ac
}

// SetLastReset sets the "last_reset" field.
func (ac *AccountCreate) SetLastReset(t time.Time) *AccountCreate {
	ac.mutation.SetLastReset(t)
	return ac
}

// SetNillableLastReset sets the "last_reset" field if the given value is not nil.
func (ac *AccountCreate) SetNillableLastReset(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetLastReset(*t)
	}
	return ac
}

// SetLastEmailVerification sets the "last_email_verification" field.
func (ac *AccountCreate) SetLastEmailVerification(t time.Time) *AccountCreate {
	ac.mutation.SetLastEmailVerification(t)
	return ac
}

// SetNillableLastEmailVerification sets the "last_email_verification" field if the given value is not nil.
func (ac *AccountCreate) SetNillableLastEmailVerification(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetLastEmailVerification(*t)
	}
	return ac
}

// SetLastPhoneVerification sets the "last_phone_verification" field.
func (ac *AccountCreate) SetLastPhoneVerification(t time.Time) *AccountCreate {
	ac.mutation.SetLastPhoneVerification(t)
	return ac
}

// SetNillableLastPhoneVerification sets the "last_phone_verification" field if the given value is not nil.
func (ac *AccountCreate) SetNillableLastPhoneVerification(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetLastPhoneVerification(*t)
	}
	return ac
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (ac *AccountCreate) SetIsEmailVerified(b bool) *AccountCreate {
	ac.mutation.SetIsEmailVerified(b)
	return ac
}

// SetNillableIsEmailVerified sets the "is_email_verified" field if the given value is not nil.
func (ac *AccountCreate) SetNillableIsEmailVerified(b *bool) *AccountCreate {
	if b != nil {
		ac.SetIsEmailVerified(*b)
	}
	return ac
}

// SetIsPhoneVerified sets the "is_phone_verified" field.
func (ac *AccountCreate) SetIsPhoneVerified(b bool) *AccountCreate {
	ac.mutation.SetIsPhoneVerified(b)
	return ac
}

// SetNillableIsPhoneVerified sets the "is_phone_verified" field if the given value is not nil.
func (ac *AccountCreate) SetNillableIsPhoneVerified(b *bool) *AccountCreate {
	if b != nil {
		ac.SetIsPhoneVerified(*b)
	}
	return ac
}

// SetRole sets the "role" field.
func (ac *AccountCreate) SetRole(a account.Role) *AccountCreate {
	ac.mutation.SetRole(a)
	return ac
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (ac *AccountCreate) SetNillableRole(a *account.Role) *AccountCreate {
	if a != nil {
		ac.SetRole(*a)
	}
	return ac
}

// SetPasswordHash sets the "password_hash" field.
func (ac *AccountCreate) SetPasswordHash(s string) *AccountCreate {
	ac.mutation.SetPasswordHash(s)
	return ac
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (ac *AccountCreate) SetNillablePasswordHash(s *string) *AccountCreate {
	if s != nil {
		ac.SetPasswordHash(*s)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AccountCreate) SetID(u uuid.UUID) *AccountCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AccountCreate) SetNillableID(u *uuid.UUID) *AccountCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// SetUser sets the "user" edge to the User entity.
func (ac *AccountCreate) SetUser(u *User) *AccountCreate {
	return ac.SetUserID(u.ID)
}

// Mutation returns the AccountMutation object of the builder.
func (ac *AccountCreate) Mutation() *AccountMutation {
	return ac.mutation
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccountCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccountCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AccountCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if account.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized account.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := account.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if account.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized account.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := account.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.IsEmailVerified(); !ok {
		v := account.DefaultIsEmailVerified
		ac.mutation.SetIsEmailVerified(v)
	}
	if _, ok := ac.mutation.IsPhoneVerified(); !ok {
		v := account.DefaultIsPhoneVerified
		ac.mutation.SetIsPhoneVerified(v)
	}
	if _, ok := ac.mutation.Role(); !ok {
		v := account.DefaultRole
		ac.mutation.SetRole(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		if account.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized account.DefaultID (forgotten import ent/runtime?)")
		}
		v := account.DefaultID()
		ac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Account.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Account.updated_at"`)}
	}
	if _, ok := ac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Account.user_id"`)}
	}
	if _, ok := ac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "Account.username"`)}
	}
	if v, ok := ac.mutation.Username(); ok {
		if err := account.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Account.username": %w`, err)}
		}
	}
	if _, ok := ac.mutation.IsEmailVerified(); !ok {
		return &ValidationError{Name: "is_email_verified", err: errors.New(`ent: missing required field "Account.is_email_verified"`)}
	}
	if _, ok := ac.mutation.IsPhoneVerified(); !ok {
		return &ValidationError{Name: "is_phone_verified", err: errors.New(`ent: missing required field "Account.is_phone_verified"`)}
	}
	if _, ok := ac.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "Account.role"`)}
	}
	if v, ok := ac.mutation.Role(); ok {
		if err := account.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Account.role": %w`, err)}
		}
	}
	if v, ok := ac.mutation.PasswordHash(); ok {
		if err := account.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "Account.password_hash": %w`, err)}
		}
	}
	if _, ok := ac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Account.user"`)}
	}
	return nil
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AccountCreate) createSpec() (*Account, *sqlgraph.CreateSpec) {
	var (
		_node = &Account{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(account.Table, sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(account.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(account.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Username(); ok {
		_spec.SetField(account.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := ac.mutation.LastReset(); ok {
		_spec.SetField(account.FieldLastReset, field.TypeTime, value)
		_node.LastReset = &value
	}
	if value, ok := ac.mutation.LastEmailVerification(); ok {
		_spec.SetField(account.FieldLastEmailVerification, field.TypeTime, value)
		_node.LastEmailVerification = &value
	}
	if value, ok := ac.mutation.LastPhoneVerification(); ok {
		_spec.SetField(account.FieldLastPhoneVerification, field.TypeTime, value)
		_node.LastPhoneVerification = &value
	}
	if value, ok := ac.mutation.IsEmailVerified(); ok {
		_spec.SetField(account.FieldIsEmailVerified, field.TypeBool, value)
		_node.IsEmailVerified = value
	}
	if value, ok := ac.mutation.IsPhoneVerified(); ok {
		_spec.SetField(account.FieldIsPhoneVerified, field.TypeBool, value)
		_node.IsPhoneVerified = value
	}
	if value, ok := ac.mutation.Role(); ok {
		_spec.SetField(account.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := ac.mutation.PasswordHash(); ok {
		_spec.SetField(account.FieldPasswordHash, field.TypeString, value)
		_node.PasswordHash = &value
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   account.UserTable,
			Columns: []string{account.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccountCreateBulk is the builder for creating many Account entities in bulk.
type AccountCreateBulk struct {
	config
	err      error
	builders []*AccountCreate
}

// Save creates the Account entities in the database.
func (acb *AccountCreateBulk) Save(ctx context.Context) ([]*Account, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Account, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountCreateBulk) SaveX(ctx context.Context) []*Account {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccountCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccountCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
