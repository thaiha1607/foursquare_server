// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
	"github.com/thaiha1607/foursquare_server/ent/invoice"
	"github.com/thaiha1607/foursquare_server/ent/invoicelineitem"
	"github.com/thaiha1607/foursquare_server/ent/orderlineitem"
)

// InvoiceLineItemCreate is the builder for creating a InvoiceLineItem entity.
type InvoiceLineItemCreate struct {
	config
	mutation *InvoiceLineItemMutation
	hooks    []Hook
}

// SetInvoiceID sets the "invoice_id" field.
func (ilic *InvoiceLineItemCreate) SetInvoiceID(u uuid.UUID) *InvoiceLineItemCreate {
	ilic.mutation.SetInvoiceID(u)
	return ilic
}

// SetOrderLineItemID sets the "order_line_item_id" field.
func (ilic *InvoiceLineItemCreate) SetOrderLineItemID(u uuid.UUID) *InvoiceLineItemCreate {
	ilic.mutation.SetOrderLineItemID(u)
	return ilic
}

// SetQty sets the "qty" field.
func (ilic *InvoiceLineItemCreate) SetQty(d decimal.Decimal) *InvoiceLineItemCreate {
	ilic.mutation.SetQty(d)
	return ilic
}

// SetTotal sets the "total" field.
func (ilic *InvoiceLineItemCreate) SetTotal(d decimal.Decimal) *InvoiceLineItemCreate {
	ilic.mutation.SetTotal(d)
	return ilic
}

// SetCreatedAt sets the "created_at" field.
func (ilic *InvoiceLineItemCreate) SetCreatedAt(t time.Time) *InvoiceLineItemCreate {
	ilic.mutation.SetCreatedAt(t)
	return ilic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ilic *InvoiceLineItemCreate) SetNillableCreatedAt(t *time.Time) *InvoiceLineItemCreate {
	if t != nil {
		ilic.SetCreatedAt(*t)
	}
	return ilic
}

// SetID sets the "id" field.
func (ilic *InvoiceLineItemCreate) SetID(u uuid.UUID) *InvoiceLineItemCreate {
	ilic.mutation.SetID(u)
	return ilic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ilic *InvoiceLineItemCreate) SetNillableID(u *uuid.UUID) *InvoiceLineItemCreate {
	if u != nil {
		ilic.SetID(*u)
	}
	return ilic
}

// SetInvoice sets the "invoice" edge to the Invoice entity.
func (ilic *InvoiceLineItemCreate) SetInvoice(i *Invoice) *InvoiceLineItemCreate {
	return ilic.SetInvoiceID(i.ID)
}

// SetOrderLineItem sets the "order_line_item" edge to the OrderLineItem entity.
func (ilic *InvoiceLineItemCreate) SetOrderLineItem(o *OrderLineItem) *InvoiceLineItemCreate {
	return ilic.SetOrderLineItemID(o.ID)
}

// Mutation returns the InvoiceLineItemMutation object of the builder.
func (ilic *InvoiceLineItemCreate) Mutation() *InvoiceLineItemMutation {
	return ilic.mutation
}

// Save creates the InvoiceLineItem in the database.
func (ilic *InvoiceLineItemCreate) Save(ctx context.Context) (*InvoiceLineItem, error) {
	ilic.defaults()
	return withHooks(ctx, ilic.sqlSave, ilic.mutation, ilic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ilic *InvoiceLineItemCreate) SaveX(ctx context.Context) *InvoiceLineItem {
	v, err := ilic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ilic *InvoiceLineItemCreate) Exec(ctx context.Context) error {
	_, err := ilic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ilic *InvoiceLineItemCreate) ExecX(ctx context.Context) {
	if err := ilic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ilic *InvoiceLineItemCreate) defaults() {
	if _, ok := ilic.mutation.CreatedAt(); !ok {
		v := invoicelineitem.DefaultCreatedAt()
		ilic.mutation.SetCreatedAt(v)
	}
	if _, ok := ilic.mutation.ID(); !ok {
		v := invoicelineitem.DefaultID()
		ilic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ilic *InvoiceLineItemCreate) check() error {
	if _, ok := ilic.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice_id", err: errors.New(`ent: missing required field "InvoiceLineItem.invoice_id"`)}
	}
	if _, ok := ilic.mutation.OrderLineItemID(); !ok {
		return &ValidationError{Name: "order_line_item_id", err: errors.New(`ent: missing required field "InvoiceLineItem.order_line_item_id"`)}
	}
	if _, ok := ilic.mutation.Qty(); !ok {
		return &ValidationError{Name: "qty", err: errors.New(`ent: missing required field "InvoiceLineItem.qty"`)}
	}
	if _, ok := ilic.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "InvoiceLineItem.total"`)}
	}
	if _, ok := ilic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InvoiceLineItem.created_at"`)}
	}
	if _, ok := ilic.mutation.InvoiceID(); !ok {
		return &ValidationError{Name: "invoice", err: errors.New(`ent: missing required edge "InvoiceLineItem.invoice"`)}
	}
	if _, ok := ilic.mutation.OrderLineItemID(); !ok {
		return &ValidationError{Name: "order_line_item", err: errors.New(`ent: missing required edge "InvoiceLineItem.order_line_item"`)}
	}
	return nil
}

func (ilic *InvoiceLineItemCreate) sqlSave(ctx context.Context) (*InvoiceLineItem, error) {
	if err := ilic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ilic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ilic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ilic.mutation.id = &_node.ID
	ilic.mutation.done = true
	return _node, nil
}

func (ilic *InvoiceLineItemCreate) createSpec() (*InvoiceLineItem, *sqlgraph.CreateSpec) {
	var (
		_node = &InvoiceLineItem{config: ilic.config}
		_spec = sqlgraph.NewCreateSpec(invoicelineitem.Table, sqlgraph.NewFieldSpec(invoicelineitem.FieldID, field.TypeUUID))
	)
	if id, ok := ilic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ilic.mutation.Qty(); ok {
		_spec.SetField(invoicelineitem.FieldQty, field.TypeFloat64, value)
		_node.Qty = value
	}
	if value, ok := ilic.mutation.Total(); ok {
		_spec.SetField(invoicelineitem.FieldTotal, field.TypeFloat64, value)
		_node.Total = value
	}
	if value, ok := ilic.mutation.CreatedAt(); ok {
		_spec.SetField(invoicelineitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ilic.mutation.InvoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoicelineitem.InvoiceTable,
			Columns: []string{invoicelineitem.InvoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InvoiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ilic.mutation.OrderLineItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoicelineitem.OrderLineItemTable,
			Columns: []string{invoicelineitem.OrderLineItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderlineitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderLineItemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InvoiceLineItemCreateBulk is the builder for creating many InvoiceLineItem entities in bulk.
type InvoiceLineItemCreateBulk struct {
	config
	err      error
	builders []*InvoiceLineItemCreate
}

// Save creates the InvoiceLineItem entities in the database.
func (ilicb *InvoiceLineItemCreateBulk) Save(ctx context.Context) ([]*InvoiceLineItem, error) {
	if ilicb.err != nil {
		return nil, ilicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ilicb.builders))
	nodes := make([]*InvoiceLineItem, len(ilicb.builders))
	mutators := make([]Mutator, len(ilicb.builders))
	for i := range ilicb.builders {
		func(i int, root context.Context) {
			builder := ilicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvoiceLineItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ilicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ilicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ilicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ilicb *InvoiceLineItemCreateBulk) SaveX(ctx context.Context) []*InvoiceLineItem {
	v, err := ilicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ilicb *InvoiceLineItemCreateBulk) Exec(ctx context.Context) error {
	_, err := ilicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ilicb *InvoiceLineItemCreateBulk) ExecX(ctx context.Context) {
	if err := ilicb.Exec(ctx); err != nil {
		panic(err)
	}
}
