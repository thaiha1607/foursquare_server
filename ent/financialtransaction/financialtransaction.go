// Code generated by ent, DO NOT EDIT.

package financialtransaction

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the financialtransaction type in the database.
	Label = "financial_transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldInvoiceID holds the string denoting the invoice_id field in the database.
	FieldInvoiceID = "invoice_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldPaymentMethod holds the string denoting the payment_method field in the database.
	FieldPaymentMethod = "payment_method"
	// EdgeInvoice holds the string denoting the invoice edge name in mutations.
	EdgeInvoice = "invoice"
	// EdgeTransactionType holds the string denoting the transaction_type edge name in mutations.
	EdgeTransactionType = "transaction_type"
	// Table holds the table name of the financialtransaction in the database.
	Table = "financial_transactions"
	// InvoiceTable is the table that holds the invoice relation/edge.
	InvoiceTable = "financial_transactions"
	// InvoiceInverseTable is the table name for the Invoice entity.
	// It exists in this package in order to avoid circular dependency with the "invoice" package.
	InvoiceInverseTable = "invoices"
	// InvoiceColumn is the table column denoting the invoice relation/edge.
	InvoiceColumn = "invoice_id"
	// TransactionTypeTable is the table that holds the transaction_type relation/edge.
	TransactionTypeTable = "financial_transactions"
	// TransactionTypeInverseTable is the table name for the TransactionType entity.
	// It exists in this package in order to avoid circular dependency with the "transactiontype" package.
	TransactionTypeInverseTable = "transaction_types"
	// TransactionTypeColumn is the table column denoting the transaction_type relation/edge.
	TransactionTypeColumn = "type"
)

// Columns holds all SQL columns for financialtransaction fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldInvoiceID,
	FieldAmount,
	FieldComment,
	FieldType,
	FieldPaymentMethod,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// PaymentMethod defines the type for the "payment_method" enum field.
type PaymentMethod string

// PaymentMethodCash is the default value of the PaymentMethod enum.
const DefaultPaymentMethod = PaymentMethodCash

// PaymentMethod values.
const (
	PaymentMethodCash        PaymentMethod = "CASH"
	PaymentMethodEFT         PaymentMethod = "ELECTRONIC_FUNDS_TRANSFER"
	PaymentMethodGiftCard    PaymentMethod = "GIFT_CARD"
	PaymentMethodCreditCard  PaymentMethod = "CREDIT_CARD"
	PaymentMethodDebitCard   PaymentMethod = "DEBIT_CARD"
	PaymentMethodPrepaidCard PaymentMethod = "PREPAID_CARD"
	PaymentMethodCheck       PaymentMethod = "CHECK"
	PaymentMethodOther       PaymentMethod = "OTHER"
)

func (pm PaymentMethod) String() string {
	return string(pm)
}

// PaymentMethodValidator is a validator for the "payment_method" field enum values. It is called by the builders before save.
func PaymentMethodValidator(pm PaymentMethod) error {
	switch pm {
	case PaymentMethodCash, PaymentMethodEFT, PaymentMethodGiftCard, PaymentMethodCreditCard, PaymentMethodDebitCard, PaymentMethodPrepaidCard, PaymentMethodCheck, PaymentMethodOther:
		return nil
	default:
		return fmt.Errorf("financialtransaction: invalid enum value for payment_method field: %q", pm)
	}
}

// OrderOption defines the ordering options for the FinancialTransaction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByInvoiceID orders the results by the invoice_id field.
func ByInvoiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByPaymentMethod orders the results by the payment_method field.
func ByPaymentMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentMethod, opts...).ToFunc()
}

// ByInvoiceField orders the results by invoice field.
func ByInvoiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvoiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByTransactionTypeField orders the results by transaction_type field.
func ByTransactionTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionTypeStep(), sql.OrderByField(field, opts...))
	}
}
func newInvoiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvoiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, InvoiceTable, InvoiceColumn),
	)
}
func newTransactionTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TransactionTypeTable, TransactionTypeColumn),
	)
}
