// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/thaiha1607/foursquare_server/ent/address"
)

// Address is the model entity for the Address schema.
type Address struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Line1 holds the value of the "line1" field.
	Line1 string `json:"line1,omitempty"`
	// Line2 holds the value of the "line2" field.
	Line2 *string `json:"line2,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// StateOrProvince holds the value of the "state_or_province" field.
	StateOrProvince string `json:"state_or_province,omitempty"`
	// ZipOrPostcode holds the value of the "zip_or_postcode" field.
	ZipOrPostcode string `json:"zip_or_postcode,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// OtherAddressDetails holds the value of the "other_address_details" field.
	OtherAddressDetails *string `json:"other_address_details,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressQuery when eager-loading is set.
	Edges        AddressEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AddressEdges holds the relations/edges for other nodes in the graph.
type AddressEdges struct {
	// Persons holds the value of the persons edge.
	Persons []*Person `json:"persons,omitempty"`
	// PersonAddresses holds the value of the person_addresses edge.
	PersonAddresses []*PersonAddress `json:"person_addresses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PersonsOrErr returns the Persons value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) PersonsOrErr() ([]*Person, error) {
	if e.loadedTypes[0] {
		return e.Persons, nil
	}
	return nil, &NotLoadedError{edge: "persons"}
}

// PersonAddressesOrErr returns the PersonAddresses value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) PersonAddressesOrErr() ([]*PersonAddress, error) {
	if e.loadedTypes[1] {
		return e.PersonAddresses, nil
	}
	return nil, &NotLoadedError{edge: "person_addresses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Address) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case address.FieldLine1, address.FieldLine2, address.FieldCity, address.FieldStateOrProvince, address.FieldZipOrPostcode, address.FieldCountry, address.FieldOtherAddressDetails:
			values[i] = new(sql.NullString)
		case address.FieldCreatedAt, address.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case address.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Address fields.
func (a *Address) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case address.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case address.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case address.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case address.FieldLine1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line1", values[i])
			} else if value.Valid {
				a.Line1 = value.String
			}
		case address.FieldLine2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line2", values[i])
			} else if value.Valid {
				a.Line2 = new(string)
				*a.Line2 = value.String
			}
		case address.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				a.City = value.String
			}
		case address.FieldStateOrProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state_or_province", values[i])
			} else if value.Valid {
				a.StateOrProvince = value.String
			}
		case address.FieldZipOrPostcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zip_or_postcode", values[i])
			} else if value.Valid {
				a.ZipOrPostcode = value.String
			}
		case address.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				a.Country = value.String
			}
		case address.FieldOtherAddressDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other_address_details", values[i])
			} else if value.Valid {
				a.OtherAddressDetails = new(string)
				*a.OtherAddressDetails = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Address.
// This includes values selected through modifiers, order, etc.
func (a *Address) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryPersons queries the "persons" edge of the Address entity.
func (a *Address) QueryPersons() *PersonQuery {
	return NewAddressClient(a.config).QueryPersons(a)
}

// QueryPersonAddresses queries the "person_addresses" edge of the Address entity.
func (a *Address) QueryPersonAddresses() *PersonAddressQuery {
	return NewAddressClient(a.config).QueryPersonAddresses(a)
}

// Update returns a builder for updating this Address.
// Note that you need to call Address.Unwrap() before calling this method if this Address
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Address) Update() *AddressUpdateOne {
	return NewAddressClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Address entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Address) Unwrap() *Address {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Address is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Address) String() string {
	var builder strings.Builder
	builder.WriteString("Address(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("line1=")
	builder.WriteString(a.Line1)
	builder.WriteString(", ")
	if v := a.Line2; v != nil {
		builder.WriteString("line2=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(a.City)
	builder.WriteString(", ")
	builder.WriteString("state_or_province=")
	builder.WriteString(a.StateOrProvince)
	builder.WriteString(", ")
	builder.WriteString("zip_or_postcode=")
	builder.WriteString(a.ZipOrPostcode)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(a.Country)
	builder.WriteString(", ")
	if v := a.OtherAddressDetails; v != nil {
		builder.WriteString("other_address_details=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Addresses is a parsable slice of Address.
type Addresses []*Address
