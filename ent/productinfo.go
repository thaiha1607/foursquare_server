// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/thaiha1607/foursquare_server/ent/productinfo"
)

// ProductInfo is the model entity for the ProductInfo schema.
type ProductInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Year holds the value of the "year" field.
	Year *int `json:"year,omitempty"`
	// Provider holds the value of the "provider" field.
	Provider *string `json:"provider,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductInfoQuery when eager-loading is set.
	Edges        ProductInfoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductInfoEdges holds the relations/edges for other nodes in the graph.
type ProductInfoEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// ProductTags holds the value of the product_tags edge.
	ProductTags []*ProductTag `json:"product_tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e ProductInfoEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// ProductTagsOrErr returns the ProductTags value or an error if the edge
// was not loaded in eager-loading.
func (e ProductInfoEdges) ProductTagsOrErr() ([]*ProductTag, error) {
	if e.loadedTypes[1] {
		return e.ProductTags, nil
	}
	return nil, &NotLoadedError{edge: "product_tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productinfo.FieldYear:
			values[i] = new(sql.NullInt64)
		case productinfo.FieldID, productinfo.FieldName, productinfo.FieldDescription, productinfo.FieldProvider:
			values[i] = new(sql.NullString)
		case productinfo.FieldCreatedAt, productinfo.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductInfo fields.
func (pi *ProductInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productinfo.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pi.ID = value.String
			}
		case productinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = new(time.Time)
				*pi.CreatedAt = value.Time
			}
		case productinfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = new(time.Time)
				*pi.UpdatedAt = value.Time
			}
		case productinfo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pi.Name = value.String
			}
		case productinfo.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pi.Description = new(string)
				*pi.Description = value.String
			}
		case productinfo.FieldYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field year", values[i])
			} else if value.Valid {
				pi.Year = new(int)
				*pi.Year = int(value.Int64)
			}
		case productinfo.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				pi.Provider = new(string)
				*pi.Provider = value.String
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductInfo.
// This includes values selected through modifiers, order, etc.
func (pi *ProductInfo) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryTags queries the "tags" edge of the ProductInfo entity.
func (pi *ProductInfo) QueryTags() *TagQuery {
	return NewProductInfoClient(pi.config).QueryTags(pi)
}

// QueryProductTags queries the "product_tags" edge of the ProductInfo entity.
func (pi *ProductInfo) QueryProductTags() *ProductTagQuery {
	return NewProductInfoClient(pi.config).QueryProductTags(pi)
}

// Update returns a builder for updating this ProductInfo.
// Note that you need to call ProductInfo.Unwrap() before calling this method if this ProductInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ProductInfo) Update() *ProductInfoUpdateOne {
	return NewProductInfoClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ProductInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ProductInfo) Unwrap() *ProductInfo {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductInfo is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ProductInfo) String() string {
	var builder strings.Builder
	builder.WriteString("ProductInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	if v := pi.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pi.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pi.Name)
	builder.WriteString(", ")
	if v := pi.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pi.Year; v != nil {
		builder.WriteString("year=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pi.Provider; v != nil {
		builder.WriteString("provider=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ProductInfos is a parsable slice of ProductInfo.
type ProductInfos []*ProductInfo
