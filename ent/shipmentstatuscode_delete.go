// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/thaiha1607/foursquare_server/ent/predicate"
	"github.com/thaiha1607/foursquare_server/ent/shipmentstatuscode"
)

// ShipmentStatusCodeDelete is the builder for deleting a ShipmentStatusCode entity.
type ShipmentStatusCodeDelete struct {
	config
	hooks    []Hook
	mutation *ShipmentStatusCodeMutation
}

// Where appends a list predicates to the ShipmentStatusCodeDelete builder.
func (sscd *ShipmentStatusCodeDelete) Where(ps ...predicate.ShipmentStatusCode) *ShipmentStatusCodeDelete {
	sscd.mutation.Where(ps...)
	return sscd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sscd *ShipmentStatusCodeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sscd.sqlExec, sscd.mutation, sscd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sscd *ShipmentStatusCodeDelete) ExecX(ctx context.Context) int {
	n, err := sscd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sscd *ShipmentStatusCodeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(shipmentstatuscode.Table, sqlgraph.NewFieldSpec(shipmentstatuscode.FieldID, field.TypeInt))
	if ps := sscd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sscd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sscd.mutation.done = true
	return affected, err
}

// ShipmentStatusCodeDeleteOne is the builder for deleting a single ShipmentStatusCode entity.
type ShipmentStatusCodeDeleteOne struct {
	sscd *ShipmentStatusCodeDelete
}

// Where appends a list predicates to the ShipmentStatusCodeDelete builder.
func (sscdo *ShipmentStatusCodeDeleteOne) Where(ps ...predicate.ShipmentStatusCode) *ShipmentStatusCodeDeleteOne {
	sscdo.sscd.mutation.Where(ps...)
	return sscdo
}

// Exec executes the deletion query.
func (sscdo *ShipmentStatusCodeDeleteOne) Exec(ctx context.Context) error {
	n, err := sscdo.sscd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{shipmentstatuscode.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sscdo *ShipmentStatusCodeDeleteOne) ExecX(ctx context.Context) {
	if err := sscdo.Exec(ctx); err != nil {
		panic(err)
	}
}
